/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"fmt"
)

// TypesBillingTier the model 'TypesBillingTier'
type TypesBillingTier string

// List of types.BillingTier
const (
	TYPESBILLINGTIER_BILLING_TIER_VOLUME TypesBillingTier = "VOLUME"
	TYPESBILLINGTIER_BILLING_TIER_SLAB TypesBillingTier = "SLAB"
)

// All allowed values of TypesBillingTier enum
var AllowedTypesBillingTierEnumValues = []TypesBillingTier{
	"VOLUME",
	"SLAB",
}

func (v *TypesBillingTier) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesBillingTier(value)
	for _, existing := range AllowedTypesBillingTierEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesBillingTier", value)
}

// NewTypesBillingTierFromValue returns a pointer to a valid TypesBillingTier
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesBillingTierFromValue(v string) (*TypesBillingTier, error) {
	ev := TypesBillingTier(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesBillingTier: valid values are %v", v, AllowedTypesBillingTierEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesBillingTier) IsValid() bool {
	for _, existing := range AllowedTypesBillingTierEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.BillingTier value
func (v TypesBillingTier) Ptr() *TypesBillingTier {
	return &v
}

type NullableTypesBillingTier struct {
	value *TypesBillingTier
	isSet bool
}

func (v NullableTypesBillingTier) Get() *TypesBillingTier {
	return v.value
}

func (v *NullableTypesBillingTier) Set(val *TypesBillingTier) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesBillingTier) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesBillingTier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesBillingTier(val *TypesBillingTier) *NullableTypesBillingTier {
	return &NullableTypesBillingTier{value: val, isSet: true}
}

func (v NullableTypesBillingTier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesBillingTier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

