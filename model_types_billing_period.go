/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"fmt"
)

// TypesBillingPeriod the model 'TypesBillingPeriod'
type TypesBillingPeriod string

// List of types.BillingPeriod
const (
	TYPESBILLINGPERIOD_BILLING_PERIOD_MONTHLY TypesBillingPeriod = "MONTHLY"
	TYPESBILLINGPERIOD_BILLING_PERIOD_ANNUAL TypesBillingPeriod = "ANNUAL"
	TYPESBILLINGPERIOD_BILLING_PERIOD_WEEKLY TypesBillingPeriod = "WEEKLY"
	TYPESBILLINGPERIOD_BILLING_PERIOD_DAILY TypesBillingPeriod = "DAILY"
	TYPESBILLINGPERIOD_BILLING_PERIOD_QUARTER TypesBillingPeriod = "QUARTERLY"
	TYPESBILLINGPERIOD_BILLING_PERIOD_HALF_YEAR TypesBillingPeriod = "HALF_YEARLY"
)

// All allowed values of TypesBillingPeriod enum
var AllowedTypesBillingPeriodEnumValues = []TypesBillingPeriod{
	"MONTHLY",
	"ANNUAL",
	"WEEKLY",
	"DAILY",
	"QUARTERLY",
	"HALF_YEARLY",
}

func (v *TypesBillingPeriod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesBillingPeriod(value)
	for _, existing := range AllowedTypesBillingPeriodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesBillingPeriod", value)
}

// NewTypesBillingPeriodFromValue returns a pointer to a valid TypesBillingPeriod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesBillingPeriodFromValue(v string) (*TypesBillingPeriod, error) {
	ev := TypesBillingPeriod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesBillingPeriod: valid values are %v", v, AllowedTypesBillingPeriodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesBillingPeriod) IsValid() bool {
	for _, existing := range AllowedTypesBillingPeriodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.BillingPeriod value
func (v TypesBillingPeriod) Ptr() *TypesBillingPeriod {
	return &v
}

type NullableTypesBillingPeriod struct {
	value *TypesBillingPeriod
	isSet bool
}

func (v NullableTypesBillingPeriod) Get() *TypesBillingPeriod {
	return v.value
}

func (v *NullableTypesBillingPeriod) Set(val *TypesBillingPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesBillingPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesBillingPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesBillingPeriod(val *TypesBillingPeriod) *NullableTypesBillingPeriod {
	return &NullableTypesBillingPeriod{value: val, isSet: true}
}

func (v NullableTypesBillingPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesBillingPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

