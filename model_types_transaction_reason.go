/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"fmt"
)

// TypesTransactionReason the model 'TypesTransactionReason'
type TypesTransactionReason string

// List of types.TransactionReason
const (
	TYPESTRANSACTIONREASON_TransactionReasonInvoicePayment TypesTransactionReason = "INVOICE_PAYMENT"
	TYPESTRANSACTIONREASON_TransactionReasonFreeCredit TypesTransactionReason = "FREE_CREDIT_GRANT"
	TYPESTRANSACTIONREASON_TransactionReasonSubscriptionCredit TypesTransactionReason = "SUBSCRIPTION_CREDIT_GRANT"
	TYPESTRANSACTIONREASON_TransactionReasonPurchasedCreditInvoiced TypesTransactionReason = "PURCHASED_CREDIT_INVOICED"
	TYPESTRANSACTIONREASON_TransactionReasonPurchasedCreditDirect TypesTransactionReason = "PURCHASED_CREDIT_DIRECT"
	TYPESTRANSACTIONREASON_TransactionReasonInvoiceRefund TypesTransactionReason = "INVOICE_REFUND"
	TYPESTRANSACTIONREASON_TransactionReasonCreditExpired TypesTransactionReason = "CREDIT_EXPIRED"
	TYPESTRANSACTIONREASON_TransactionReasonWalletTermination TypesTransactionReason = "WALLET_TERMINATION"
)

// All allowed values of TypesTransactionReason enum
var AllowedTypesTransactionReasonEnumValues = []TypesTransactionReason{
	"INVOICE_PAYMENT",
	"FREE_CREDIT_GRANT",
	"SUBSCRIPTION_CREDIT_GRANT",
	"PURCHASED_CREDIT_INVOICED",
	"PURCHASED_CREDIT_DIRECT",
	"INVOICE_REFUND",
	"CREDIT_EXPIRED",
	"WALLET_TERMINATION",
}

func (v *TypesTransactionReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesTransactionReason(value)
	for _, existing := range AllowedTypesTransactionReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesTransactionReason", value)
}

// NewTypesTransactionReasonFromValue returns a pointer to a valid TypesTransactionReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesTransactionReasonFromValue(v string) (*TypesTransactionReason, error) {
	ev := TypesTransactionReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesTransactionReason: valid values are %v", v, AllowedTypesTransactionReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesTransactionReason) IsValid() bool {
	for _, existing := range AllowedTypesTransactionReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.TransactionReason value
func (v TypesTransactionReason) Ptr() *TypesTransactionReason {
	return &v
}

type NullableTypesTransactionReason struct {
	value *TypesTransactionReason
	isSet bool
}

func (v NullableTypesTransactionReason) Get() *TypesTransactionReason {
	return v.value
}

func (v *NullableTypesTransactionReason) Set(val *TypesTransactionReason) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesTransactionReason) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesTransactionReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesTransactionReason(val *TypesTransactionReason) *NullableTypesTransactionReason {
	return &NullableTypesTransactionReason{value: val, isSet: true}
}

func (v NullableTypesTransactionReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesTransactionReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

