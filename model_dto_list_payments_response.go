/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoListPaymentsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoListPaymentsResponse{}

// DtoListPaymentsResponse struct for DtoListPaymentsResponse
type DtoListPaymentsResponse struct {
	Items []DtoPaymentResponse `json:"items,omitempty"`
	Pagination *TypesPaginationResponse `json:"pagination,omitempty"`
}

// NewDtoListPaymentsResponse instantiates a new DtoListPaymentsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoListPaymentsResponse() *DtoListPaymentsResponse {
	this := DtoListPaymentsResponse{}
	return &this
}

// NewDtoListPaymentsResponseWithDefaults instantiates a new DtoListPaymentsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoListPaymentsResponseWithDefaults() *DtoListPaymentsResponse {
	this := DtoListPaymentsResponse{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *DtoListPaymentsResponse) GetItems() []DtoPaymentResponse {
	if o == nil || IsNil(o.Items) {
		var ret []DtoPaymentResponse
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoListPaymentsResponse) GetItemsOk() ([]DtoPaymentResponse, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *DtoListPaymentsResponse) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []DtoPaymentResponse and assigns it to the Items field.
func (o *DtoListPaymentsResponse) SetItems(v []DtoPaymentResponse) {
	o.Items = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *DtoListPaymentsResponse) GetPagination() TypesPaginationResponse {
	if o == nil || IsNil(o.Pagination) {
		var ret TypesPaginationResponse
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoListPaymentsResponse) GetPaginationOk() (*TypesPaginationResponse, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *DtoListPaymentsResponse) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given TypesPaginationResponse and assigns it to the Pagination field.
func (o *DtoListPaymentsResponse) SetPagination(v TypesPaginationResponse) {
	o.Pagination = &v
}

func (o DtoListPaymentsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoListPaymentsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	return toSerialize, nil
}

type NullableDtoListPaymentsResponse struct {
	value *DtoListPaymentsResponse
	isSet bool
}

func (v NullableDtoListPaymentsResponse) Get() *DtoListPaymentsResponse {
	return v.value
}

func (v *NullableDtoListPaymentsResponse) Set(val *DtoListPaymentsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoListPaymentsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoListPaymentsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoListPaymentsResponse(val *DtoListPaymentsResponse) *NullableDtoListPaymentsResponse {
	return &NullableDtoListPaymentsResponse{value: val, isSet: true}
}

func (v NullableDtoListPaymentsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoListPaymentsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


