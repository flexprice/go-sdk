/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"fmt"
)

// TypesTransactionType the model 'TypesTransactionType'
type TypesTransactionType string

// List of types.TransactionType
const (
	TYPESTRANSACTIONTYPE_TransactionTypeCredit TypesTransactionType = "credit"
	TYPESTRANSACTIONTYPE_TransactionTypeDebit TypesTransactionType = "debit"
)

// All allowed values of TypesTransactionType enum
var AllowedTypesTransactionTypeEnumValues = []TypesTransactionType{
	"credit",
	"debit",
}

func (v *TypesTransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesTransactionType(value)
	for _, existing := range AllowedTypesTransactionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesTransactionType", value)
}

// NewTypesTransactionTypeFromValue returns a pointer to a valid TypesTransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesTransactionTypeFromValue(v string) (*TypesTransactionType, error) {
	ev := TypesTransactionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesTransactionType: valid values are %v", v, AllowedTypesTransactionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesTransactionType) IsValid() bool {
	for _, existing := range AllowedTypesTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.TransactionType value
func (v TypesTransactionType) Ptr() *TypesTransactionType {
	return &v
}

type NullableTypesTransactionType struct {
	value *TypesTransactionType
	isSet bool
}

func (v NullableTypesTransactionType) Get() *TypesTransactionType {
	return v.value
}

func (v *NullableTypesTransactionType) Set(val *TypesTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesTransactionType(val *TypesTransactionType) *NullableTypesTransactionType {
	return &NullableTypesTransactionType{value: val, isSet: true}
}

func (v NullableTypesTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

