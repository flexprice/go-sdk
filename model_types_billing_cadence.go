/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"fmt"
)

// TypesBillingCadence the model 'TypesBillingCadence'
type TypesBillingCadence string

// List of types.BillingCadence
const (
	TYPESBILLINGCADENCE_BILLING_CADENCE_RECURRING TypesBillingCadence = "RECURRING"
	TYPESBILLINGCADENCE_BILLING_CADENCE_ONETIME TypesBillingCadence = "ONETIME"
)

// All allowed values of TypesBillingCadence enum
var AllowedTypesBillingCadenceEnumValues = []TypesBillingCadence{
	"RECURRING",
	"ONETIME",
}

func (v *TypesBillingCadence) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesBillingCadence(value)
	for _, existing := range AllowedTypesBillingCadenceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesBillingCadence", value)
}

// NewTypesBillingCadenceFromValue returns a pointer to a valid TypesBillingCadence
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesBillingCadenceFromValue(v string) (*TypesBillingCadence, error) {
	ev := TypesBillingCadence(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesBillingCadence: valid values are %v", v, AllowedTypesBillingCadenceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesBillingCadence) IsValid() bool {
	for _, existing := range AllowedTypesBillingCadenceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.BillingCadence value
func (v TypesBillingCadence) Ptr() *TypesBillingCadence {
	return &v
}

type NullableTypesBillingCadence struct {
	value *TypesBillingCadence
	isSet bool
}

func (v NullableTypesBillingCadence) Get() *TypesBillingCadence {
	return v.value
}

func (v *NullableTypesBillingCadence) Set(val *TypesBillingCadence) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesBillingCadence) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesBillingCadence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesBillingCadence(val *TypesBillingCadence) *NullableTypesBillingCadence {
	return &NullableTypesBillingCadence{value: val, isSet: true}
}

func (v NullableTypesBillingCadence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesBillingCadence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

