/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the GithubComFlexpriceFlexpriceInternalTypesValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GithubComFlexpriceFlexpriceInternalTypesValue{}

// GithubComFlexpriceFlexpriceInternalTypesValue struct for GithubComFlexpriceFlexpriceInternalTypesValue
type GithubComFlexpriceFlexpriceInternalTypesValue struct {
	Array []string `json:"array,omitempty"`
	Boolean *bool `json:"boolean,omitempty"`
	Date *string `json:"date,omitempty"`
	Number *float32 `json:"number,omitempty"`
	String *string `json:"string,omitempty"`
}

// NewGithubComFlexpriceFlexpriceInternalTypesValue instantiates a new GithubComFlexpriceFlexpriceInternalTypesValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubComFlexpriceFlexpriceInternalTypesValue() *GithubComFlexpriceFlexpriceInternalTypesValue {
	this := GithubComFlexpriceFlexpriceInternalTypesValue{}
	return &this
}

// NewGithubComFlexpriceFlexpriceInternalTypesValueWithDefaults instantiates a new GithubComFlexpriceFlexpriceInternalTypesValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubComFlexpriceFlexpriceInternalTypesValueWithDefaults() *GithubComFlexpriceFlexpriceInternalTypesValue {
	this := GithubComFlexpriceFlexpriceInternalTypesValue{}
	return &this
}

// GetArray returns the Array field value if set, zero value otherwise.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) GetArray() []string {
	if o == nil || IsNil(o.Array) {
		var ret []string
		return ret
	}
	return o.Array
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) GetArrayOk() ([]string, bool) {
	if o == nil || IsNil(o.Array) {
		return nil, false
	}
	return o.Array, true
}

// HasArray returns a boolean if a field has been set.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) HasArray() bool {
	if o != nil && !IsNil(o.Array) {
		return true
	}

	return false
}

// SetArray gets a reference to the given []string and assigns it to the Array field.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) SetArray(v []string) {
	o.Array = v
}

// GetBoolean returns the Boolean field value if set, zero value otherwise.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) GetBoolean() bool {
	if o == nil || IsNil(o.Boolean) {
		var ret bool
		return ret
	}
	return *o.Boolean
}

// GetBooleanOk returns a tuple with the Boolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) GetBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.Boolean) {
		return nil, false
	}
	return o.Boolean, true
}

// HasBoolean returns a boolean if a field has been set.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) HasBoolean() bool {
	if o != nil && !IsNil(o.Boolean) {
		return true
	}

	return false
}

// SetBoolean gets a reference to the given bool and assigns it to the Boolean field.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) SetBoolean(v bool) {
	o.Boolean = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) SetDate(v string) {
	o.Date = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) GetNumber() float32 {
	if o == nil || IsNil(o.Number) {
		var ret float32
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) GetNumberOk() (*float32, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given float32 and assigns it to the Number field.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) SetNumber(v float32) {
	o.Number = &v
}

// GetString returns the String field value if set, zero value otherwise.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) GetString() string {
	if o == nil || IsNil(o.String) {
		var ret string
		return ret
	}
	return *o.String
}

// GetStringOk returns a tuple with the String field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) GetStringOk() (*string, bool) {
	if o == nil || IsNil(o.String) {
		return nil, false
	}
	return o.String, true
}

// HasString returns a boolean if a field has been set.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) HasString() bool {
	if o != nil && !IsNil(o.String) {
		return true
	}

	return false
}

// SetString gets a reference to the given string and assigns it to the String field.
func (o *GithubComFlexpriceFlexpriceInternalTypesValue) SetString(v string) {
	o.String = &v
}

func (o GithubComFlexpriceFlexpriceInternalTypesValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GithubComFlexpriceFlexpriceInternalTypesValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Array) {
		toSerialize["array"] = o.Array
	}
	if !IsNil(o.Boolean) {
		toSerialize["boolean"] = o.Boolean
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !IsNil(o.String) {
		toSerialize["string"] = o.String
	}
	return toSerialize, nil
}

type NullableGithubComFlexpriceFlexpriceInternalTypesValue struct {
	value *GithubComFlexpriceFlexpriceInternalTypesValue
	isSet bool
}

func (v NullableGithubComFlexpriceFlexpriceInternalTypesValue) Get() *GithubComFlexpriceFlexpriceInternalTypesValue {
	return v.value
}

func (v *NullableGithubComFlexpriceFlexpriceInternalTypesValue) Set(val *GithubComFlexpriceFlexpriceInternalTypesValue) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubComFlexpriceFlexpriceInternalTypesValue) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubComFlexpriceFlexpriceInternalTypesValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubComFlexpriceFlexpriceInternalTypesValue(val *GithubComFlexpriceFlexpriceInternalTypesValue) *NullableGithubComFlexpriceFlexpriceInternalTypesValue {
	return &NullableGithubComFlexpriceFlexpriceInternalTypesValue{value: val, isSet: true}
}

func (v NullableGithubComFlexpriceFlexpriceInternalTypesValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubComFlexpriceFlexpriceInternalTypesValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


