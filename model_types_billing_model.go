/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"fmt"
)

// TypesBillingModel the model 'TypesBillingModel'
type TypesBillingModel string

// List of types.BillingModel
const (
	TYPESBILLINGMODEL_BILLING_MODEL_FLAT_FEE TypesBillingModel = "FLAT_FEE"
	TYPESBILLINGMODEL_BILLING_MODEL_PACKAGE TypesBillingModel = "PACKAGE"
	TYPESBILLINGMODEL_BILLING_MODEL_TIERED TypesBillingModel = "TIERED"
)

// All allowed values of TypesBillingModel enum
var AllowedTypesBillingModelEnumValues = []TypesBillingModel{
	"FLAT_FEE",
	"PACKAGE",
	"TIERED",
}

func (v *TypesBillingModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesBillingModel(value)
	for _, existing := range AllowedTypesBillingModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesBillingModel", value)
}

// NewTypesBillingModelFromValue returns a pointer to a valid TypesBillingModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesBillingModelFromValue(v string) (*TypesBillingModel, error) {
	ev := TypesBillingModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesBillingModel: valid values are %v", v, AllowedTypesBillingModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesBillingModel) IsValid() bool {
	for _, existing := range AllowedTypesBillingModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.BillingModel value
func (v TypesBillingModel) Ptr() *TypesBillingModel {
	return &v
}

type NullableTypesBillingModel struct {
	value *TypesBillingModel
	isSet bool
}

func (v NullableTypesBillingModel) Get() *TypesBillingModel {
	return v.value
}

func (v *NullableTypesBillingModel) Set(val *TypesBillingModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesBillingModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesBillingModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesBillingModel(val *TypesBillingModel) *NullableTypesBillingModel {
	return &NullableTypesBillingModel{value: val, isSet: true}
}

func (v NullableTypesBillingModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesBillingModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

