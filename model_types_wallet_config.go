/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the TypesWalletConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesWalletConfig{}

// TypesWalletConfig struct for TypesWalletConfig
type TypesWalletConfig struct {
	// AllowedPriceTypes is a list of price types that are allowed for the wallet nil means all price types are allowed
	AllowedPriceTypes []TypesWalletConfigPriceType `json:"allowed_price_types,omitempty"`
}

// NewTypesWalletConfig instantiates a new TypesWalletConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesWalletConfig() *TypesWalletConfig {
	this := TypesWalletConfig{}
	return &this
}

// NewTypesWalletConfigWithDefaults instantiates a new TypesWalletConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesWalletConfigWithDefaults() *TypesWalletConfig {
	this := TypesWalletConfig{}
	return &this
}

// GetAllowedPriceTypes returns the AllowedPriceTypes field value if set, zero value otherwise.
func (o *TypesWalletConfig) GetAllowedPriceTypes() []TypesWalletConfigPriceType {
	if o == nil || IsNil(o.AllowedPriceTypes) {
		var ret []TypesWalletConfigPriceType
		return ret
	}
	return o.AllowedPriceTypes
}

// GetAllowedPriceTypesOk returns a tuple with the AllowedPriceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesWalletConfig) GetAllowedPriceTypesOk() ([]TypesWalletConfigPriceType, bool) {
	if o == nil || IsNil(o.AllowedPriceTypes) {
		return nil, false
	}
	return o.AllowedPriceTypes, true
}

// HasAllowedPriceTypes returns a boolean if a field has been set.
func (o *TypesWalletConfig) HasAllowedPriceTypes() bool {
	if o != nil && !IsNil(o.AllowedPriceTypes) {
		return true
	}

	return false
}

// SetAllowedPriceTypes gets a reference to the given []TypesWalletConfigPriceType and assigns it to the AllowedPriceTypes field.
func (o *TypesWalletConfig) SetAllowedPriceTypes(v []TypesWalletConfigPriceType) {
	o.AllowedPriceTypes = v
}

func (o TypesWalletConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesWalletConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedPriceTypes) {
		toSerialize["allowed_price_types"] = o.AllowedPriceTypes
	}
	return toSerialize, nil
}

type NullableTypesWalletConfig struct {
	value *TypesWalletConfig
	isSet bool
}

func (v NullableTypesWalletConfig) Get() *TypesWalletConfig {
	return v.value
}

func (v *NullableTypesWalletConfig) Set(val *TypesWalletConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesWalletConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesWalletConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesWalletConfig(val *TypesWalletConfig) *NullableTypesWalletConfig {
	return &NullableTypesWalletConfig{value: val, isSet: true}
}

func (v NullableTypesWalletConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesWalletConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


