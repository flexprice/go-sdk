/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"fmt"
)

// TypesResetUsage the model 'TypesResetUsage'
type TypesResetUsage string

// List of types.ResetUsage
const (
	TYPESRESETUSAGE_ResetUsageBillingPeriod TypesResetUsage = "BILLING_PERIOD"
	TYPESRESETUSAGE_ResetUsageNever TypesResetUsage = "NEVER"
)

// All allowed values of TypesResetUsage enum
var AllowedTypesResetUsageEnumValues = []TypesResetUsage{
	"BILLING_PERIOD",
	"NEVER",
}

func (v *TypesResetUsage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesResetUsage(value)
	for _, existing := range AllowedTypesResetUsageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesResetUsage", value)
}

// NewTypesResetUsageFromValue returns a pointer to a valid TypesResetUsage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesResetUsageFromValue(v string) (*TypesResetUsage, error) {
	ev := TypesResetUsage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesResetUsage: valid values are %v", v, AllowedTypesResetUsageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesResetUsage) IsValid() bool {
	for _, existing := range AllowedTypesResetUsageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.ResetUsage value
func (v TypesResetUsage) Ptr() *TypesResetUsage {
	return &v
}

type NullableTypesResetUsage struct {
	value *TypesResetUsage
	isSet bool
}

func (v NullableTypesResetUsage) Get() *TypesResetUsage {
	return v.value
}

func (v *NullableTypesResetUsage) Set(val *TypesResetUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesResetUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesResetUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesResetUsage(val *TypesResetUsage) *NullableTypesResetUsage {
	return &NullableTypesResetUsage{value: val, isSet: true}
}

func (v NullableTypesResetUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesResetUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

