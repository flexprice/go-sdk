/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DtoBulkIngestEventRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoBulkIngestEventRequest{}

// DtoBulkIngestEventRequest struct for DtoBulkIngestEventRequest
type DtoBulkIngestEventRequest struct {
	Events []DtoIngestEventRequest `json:"events"`
}

type _DtoBulkIngestEventRequest DtoBulkIngestEventRequest

// NewDtoBulkIngestEventRequest instantiates a new DtoBulkIngestEventRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoBulkIngestEventRequest(events []DtoIngestEventRequest) *DtoBulkIngestEventRequest {
	this := DtoBulkIngestEventRequest{}
	this.Events = events
	return &this
}

// NewDtoBulkIngestEventRequestWithDefaults instantiates a new DtoBulkIngestEventRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoBulkIngestEventRequestWithDefaults() *DtoBulkIngestEventRequest {
	this := DtoBulkIngestEventRequest{}
	return &this
}

// GetEvents returns the Events field value
func (o *DtoBulkIngestEventRequest) GetEvents() []DtoIngestEventRequest {
	if o == nil {
		var ret []DtoIngestEventRequest
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *DtoBulkIngestEventRequest) GetEventsOk() ([]DtoIngestEventRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *DtoBulkIngestEventRequest) SetEvents(v []DtoIngestEventRequest) {
	o.Events = v
}

func (o DtoBulkIngestEventRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoBulkIngestEventRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events
	return toSerialize, nil
}

func (o *DtoBulkIngestEventRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"events",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtoBulkIngestEventRequest := _DtoBulkIngestEventRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtoBulkIngestEventRequest)

	if err != nil {
		return err
	}

	*o = DtoBulkIngestEventRequest(varDtoBulkIngestEventRequest)

	return err
}

type NullableDtoBulkIngestEventRequest struct {
	value *DtoBulkIngestEventRequest
	isSet bool
}

func (v NullableDtoBulkIngestEventRequest) Get() *DtoBulkIngestEventRequest {
	return v.value
}

func (v *NullableDtoBulkIngestEventRequest) Set(val *DtoBulkIngestEventRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoBulkIngestEventRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoBulkIngestEventRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoBulkIngestEventRequest(val *DtoBulkIngestEventRequest) *NullableDtoBulkIngestEventRequest {
	return &NullableDtoBulkIngestEventRequest{value: val, isSet: true}
}

func (v NullableDtoBulkIngestEventRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoBulkIngestEventRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


