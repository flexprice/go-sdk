/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoEntitlementSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoEntitlementSource{}

// DtoEntitlementSource struct for DtoEntitlementSource
type DtoEntitlementSource struct {
	EntitlementId *string `json:"entitlement_id,omitempty"`
	IsEnabled *bool `json:"is_enabled,omitempty"`
	PlanId *string `json:"plan_id,omitempty"`
	PlanName *string `json:"plan_name,omitempty"`
	Quantity *int32 `json:"quantity,omitempty"`
	StaticValue *string `json:"static_value,omitempty"`
	SubscriptionId *string `json:"subscription_id,omitempty"`
	UsageLimit *int32 `json:"usage_limit,omitempty"`
}

// NewDtoEntitlementSource instantiates a new DtoEntitlementSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoEntitlementSource() *DtoEntitlementSource {
	this := DtoEntitlementSource{}
	return &this
}

// NewDtoEntitlementSourceWithDefaults instantiates a new DtoEntitlementSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoEntitlementSourceWithDefaults() *DtoEntitlementSource {
	this := DtoEntitlementSource{}
	return &this
}

// GetEntitlementId returns the EntitlementId field value if set, zero value otherwise.
func (o *DtoEntitlementSource) GetEntitlementId() string {
	if o == nil || IsNil(o.EntitlementId) {
		var ret string
		return ret
	}
	return *o.EntitlementId
}

// GetEntitlementIdOk returns a tuple with the EntitlementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoEntitlementSource) GetEntitlementIdOk() (*string, bool) {
	if o == nil || IsNil(o.EntitlementId) {
		return nil, false
	}
	return o.EntitlementId, true
}

// HasEntitlementId returns a boolean if a field has been set.
func (o *DtoEntitlementSource) HasEntitlementId() bool {
	if o != nil && !IsNil(o.EntitlementId) {
		return true
	}

	return false
}

// SetEntitlementId gets a reference to the given string and assigns it to the EntitlementId field.
func (o *DtoEntitlementSource) SetEntitlementId(v string) {
	o.EntitlementId = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *DtoEntitlementSource) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoEntitlementSource) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *DtoEntitlementSource) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *DtoEntitlementSource) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetPlanId returns the PlanId field value if set, zero value otherwise.
func (o *DtoEntitlementSource) GetPlanId() string {
	if o == nil || IsNil(o.PlanId) {
		var ret string
		return ret
	}
	return *o.PlanId
}

// GetPlanIdOk returns a tuple with the PlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoEntitlementSource) GetPlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.PlanId) {
		return nil, false
	}
	return o.PlanId, true
}

// HasPlanId returns a boolean if a field has been set.
func (o *DtoEntitlementSource) HasPlanId() bool {
	if o != nil && !IsNil(o.PlanId) {
		return true
	}

	return false
}

// SetPlanId gets a reference to the given string and assigns it to the PlanId field.
func (o *DtoEntitlementSource) SetPlanId(v string) {
	o.PlanId = &v
}

// GetPlanName returns the PlanName field value if set, zero value otherwise.
func (o *DtoEntitlementSource) GetPlanName() string {
	if o == nil || IsNil(o.PlanName) {
		var ret string
		return ret
	}
	return *o.PlanName
}

// GetPlanNameOk returns a tuple with the PlanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoEntitlementSource) GetPlanNameOk() (*string, bool) {
	if o == nil || IsNil(o.PlanName) {
		return nil, false
	}
	return o.PlanName, true
}

// HasPlanName returns a boolean if a field has been set.
func (o *DtoEntitlementSource) HasPlanName() bool {
	if o != nil && !IsNil(o.PlanName) {
		return true
	}

	return false
}

// SetPlanName gets a reference to the given string and assigns it to the PlanName field.
func (o *DtoEntitlementSource) SetPlanName(v string) {
	o.PlanName = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *DtoEntitlementSource) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoEntitlementSource) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *DtoEntitlementSource) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *DtoEntitlementSource) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetStaticValue returns the StaticValue field value if set, zero value otherwise.
func (o *DtoEntitlementSource) GetStaticValue() string {
	if o == nil || IsNil(o.StaticValue) {
		var ret string
		return ret
	}
	return *o.StaticValue
}

// GetStaticValueOk returns a tuple with the StaticValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoEntitlementSource) GetStaticValueOk() (*string, bool) {
	if o == nil || IsNil(o.StaticValue) {
		return nil, false
	}
	return o.StaticValue, true
}

// HasStaticValue returns a boolean if a field has been set.
func (o *DtoEntitlementSource) HasStaticValue() bool {
	if o != nil && !IsNil(o.StaticValue) {
		return true
	}

	return false
}

// SetStaticValue gets a reference to the given string and assigns it to the StaticValue field.
func (o *DtoEntitlementSource) SetStaticValue(v string) {
	o.StaticValue = &v
}

// GetSubscriptionId returns the SubscriptionId field value if set, zero value otherwise.
func (o *DtoEntitlementSource) GetSubscriptionId() string {
	if o == nil || IsNil(o.SubscriptionId) {
		var ret string
		return ret
	}
	return *o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoEntitlementSource) GetSubscriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionId) {
		return nil, false
	}
	return o.SubscriptionId, true
}

// HasSubscriptionId returns a boolean if a field has been set.
func (o *DtoEntitlementSource) HasSubscriptionId() bool {
	if o != nil && !IsNil(o.SubscriptionId) {
		return true
	}

	return false
}

// SetSubscriptionId gets a reference to the given string and assigns it to the SubscriptionId field.
func (o *DtoEntitlementSource) SetSubscriptionId(v string) {
	o.SubscriptionId = &v
}

// GetUsageLimit returns the UsageLimit field value if set, zero value otherwise.
func (o *DtoEntitlementSource) GetUsageLimit() int32 {
	if o == nil || IsNil(o.UsageLimit) {
		var ret int32
		return ret
	}
	return *o.UsageLimit
}

// GetUsageLimitOk returns a tuple with the UsageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoEntitlementSource) GetUsageLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.UsageLimit) {
		return nil, false
	}
	return o.UsageLimit, true
}

// HasUsageLimit returns a boolean if a field has been set.
func (o *DtoEntitlementSource) HasUsageLimit() bool {
	if o != nil && !IsNil(o.UsageLimit) {
		return true
	}

	return false
}

// SetUsageLimit gets a reference to the given int32 and assigns it to the UsageLimit field.
func (o *DtoEntitlementSource) SetUsageLimit(v int32) {
	o.UsageLimit = &v
}

func (o DtoEntitlementSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoEntitlementSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntitlementId) {
		toSerialize["entitlement_id"] = o.EntitlementId
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["is_enabled"] = o.IsEnabled
	}
	if !IsNil(o.PlanId) {
		toSerialize["plan_id"] = o.PlanId
	}
	if !IsNil(o.PlanName) {
		toSerialize["plan_name"] = o.PlanName
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.StaticValue) {
		toSerialize["static_value"] = o.StaticValue
	}
	if !IsNil(o.SubscriptionId) {
		toSerialize["subscription_id"] = o.SubscriptionId
	}
	if !IsNil(o.UsageLimit) {
		toSerialize["usage_limit"] = o.UsageLimit
	}
	return toSerialize, nil
}

type NullableDtoEntitlementSource struct {
	value *DtoEntitlementSource
	isSet bool
}

func (v NullableDtoEntitlementSource) Get() *DtoEntitlementSource {
	return v.value
}

func (v *NullableDtoEntitlementSource) Set(val *DtoEntitlementSource) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoEntitlementSource) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoEntitlementSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoEntitlementSource(val *DtoEntitlementSource) *NullableDtoEntitlementSource {
	return &NullableDtoEntitlementSource{value: val, isSet: true}
}

func (v NullableDtoEntitlementSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoEntitlementSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


