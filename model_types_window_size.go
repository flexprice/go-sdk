/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"fmt"
)

// TypesWindowSize the model 'TypesWindowSize'
type TypesWindowSize string

// List of types.WindowSize
const (
	TYPESWINDOWSIZE_WindowSizeMinute TypesWindowSize = "MINUTE"
	TYPESWINDOWSIZE_WindowSizeHour TypesWindowSize = "HOUR"
	TYPESWINDOWSIZE_WindowSizeDay TypesWindowSize = "DAY"
)

// All allowed values of TypesWindowSize enum
var AllowedTypesWindowSizeEnumValues = []TypesWindowSize{
	"MINUTE",
	"HOUR",
	"DAY",
}

func (v *TypesWindowSize) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesWindowSize(value)
	for _, existing := range AllowedTypesWindowSizeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesWindowSize", value)
}

// NewTypesWindowSizeFromValue returns a pointer to a valid TypesWindowSize
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesWindowSizeFromValue(v string) (*TypesWindowSize, error) {
	ev := TypesWindowSize(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesWindowSize: valid values are %v", v, AllowedTypesWindowSizeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesWindowSize) IsValid() bool {
	for _, existing := range AllowedTypesWindowSizeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.WindowSize value
func (v TypesWindowSize) Ptr() *TypesWindowSize {
	return &v
}

type NullableTypesWindowSize struct {
	value *TypesWindowSize
	isSet bool
}

func (v NullableTypesWindowSize) Get() *TypesWindowSize {
	return v.value
}

func (v *NullableTypesWindowSize) Set(val *TypesWindowSize) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesWindowSize) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesWindowSize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesWindowSize(val *TypesWindowSize) *NullableTypesWindowSize {
	return &NullableTypesWindowSize{value: val, isSet: true}
}

func (v NullableTypesWindowSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesWindowSize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

