/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoSubscriptionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoSubscriptionResponse{}

// DtoSubscriptionResponse struct for DtoSubscriptionResponse
type DtoSubscriptionResponse struct {
	// ActivePauseID references the current active pause configuration This will be null if no pause is active or scheduled
	ActivePauseId *string `json:"active_pause_id,omitempty"`
	// BillingAnchor is the reference point that aligns future billing cycle dates. It sets the day of week for week intervals, the day of month for month and year intervals, and the month of year for year intervals. The timestamp is in UTC format.
	BillingAnchor *string `json:"billing_anchor,omitempty"`
	BillingCadence *TypesBillingCadence `json:"billing_cadence,omitempty"`
	BillingPeriod *TypesBillingPeriod `json:"billing_period,omitempty"`
	// BillingPeriodCount is the total number units of the billing period.
	BillingPeriodCount *int32 `json:"billing_period_count,omitempty"`
	// CancelAt is the date the subscription will be canceled
	CancelAt *string `json:"cancel_at,omitempty"`
	// CancelAtPeriodEnd is whether the subscription was canceled at the end of the current period
	CancelAtPeriodEnd *bool `json:"cancel_at_period_end,omitempty"`
	// CanceledAt is the date the subscription was canceled
	CancelledAt *string `json:"cancelled_at,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	CreatedBy *string `json:"created_by,omitempty"`
	// Currency is the currency of the subscription in lowercase 3 digit ISO codes
	Currency *string `json:"currency,omitempty"`
	// CurrentPeriodEnd is the end of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
	CurrentPeriodEnd *string `json:"current_period_end,omitempty"`
	// CurrentPeriodStart is the end of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
	CurrentPeriodStart *string `json:"current_period_start,omitempty"`
	Customer *DtoCustomerResponse `json:"customer,omitempty"`
	// CustomerID is the identifier for the customer in our system
	CustomerId *string `json:"customer_id,omitempty"`
	// EndDate is the end date of the subscription
	EndDate *string `json:"end_date,omitempty"`
	// EnvironmentID is the environment identifier for the subscription
	EnvironmentId *string `json:"environment_id,omitempty"`
	// ID is the unique identifier for the subscription
	Id *string `json:"id,omitempty"`
	LineItems []SubscriptionSubscriptionLineItem `json:"line_items,omitempty"`
	// LookupKey is the key used to lookup the subscription in our system
	LookupKey *string `json:"lookup_key,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	PauseStatus *TypesPauseStatus `json:"pause_status,omitempty"`
	Pauses []SubscriptionSubscriptionPause `json:"pauses,omitempty"`
	Plan *DtoPlanResponse `json:"plan,omitempty"`
	// PlanID is the identifier for the plan in our system
	PlanId *string `json:"plan_id,omitempty"`
	// StartDate is the start date of the subscription
	StartDate *string `json:"start_date,omitempty"`
	Status *TypesStatus `json:"status,omitempty"`
	SubscriptionStatus *TypesSubscriptionStatus `json:"subscription_status,omitempty"`
	TenantId *string `json:"tenant_id,omitempty"`
	// TrialEnd is the end date of the trial period
	TrialEnd *string `json:"trial_end,omitempty"`
	// TrialStart is the start date of the trial period
	TrialStart *string `json:"trial_start,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	UpdatedBy *string `json:"updated_by,omitempty"`
	// Version is used for optimistic locking
	Version *int32 `json:"version,omitempty"`
}

// NewDtoSubscriptionResponse instantiates a new DtoSubscriptionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoSubscriptionResponse() *DtoSubscriptionResponse {
	this := DtoSubscriptionResponse{}
	return &this
}

// NewDtoSubscriptionResponseWithDefaults instantiates a new DtoSubscriptionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoSubscriptionResponseWithDefaults() *DtoSubscriptionResponse {
	this := DtoSubscriptionResponse{}
	return &this
}

// GetActivePauseId returns the ActivePauseId field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetActivePauseId() string {
	if o == nil || IsNil(o.ActivePauseId) {
		var ret string
		return ret
	}
	return *o.ActivePauseId
}

// GetActivePauseIdOk returns a tuple with the ActivePauseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetActivePauseIdOk() (*string, bool) {
	if o == nil || IsNil(o.ActivePauseId) {
		return nil, false
	}
	return o.ActivePauseId, true
}

// HasActivePauseId returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasActivePauseId() bool {
	if o != nil && !IsNil(o.ActivePauseId) {
		return true
	}

	return false
}

// SetActivePauseId gets a reference to the given string and assigns it to the ActivePauseId field.
func (o *DtoSubscriptionResponse) SetActivePauseId(v string) {
	o.ActivePauseId = &v
}

// GetBillingAnchor returns the BillingAnchor field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetBillingAnchor() string {
	if o == nil || IsNil(o.BillingAnchor) {
		var ret string
		return ret
	}
	return *o.BillingAnchor
}

// GetBillingAnchorOk returns a tuple with the BillingAnchor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetBillingAnchorOk() (*string, bool) {
	if o == nil || IsNil(o.BillingAnchor) {
		return nil, false
	}
	return o.BillingAnchor, true
}

// HasBillingAnchor returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasBillingAnchor() bool {
	if o != nil && !IsNil(o.BillingAnchor) {
		return true
	}

	return false
}

// SetBillingAnchor gets a reference to the given string and assigns it to the BillingAnchor field.
func (o *DtoSubscriptionResponse) SetBillingAnchor(v string) {
	o.BillingAnchor = &v
}

// GetBillingCadence returns the BillingCadence field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetBillingCadence() TypesBillingCadence {
	if o == nil || IsNil(o.BillingCadence) {
		var ret TypesBillingCadence
		return ret
	}
	return *o.BillingCadence
}

// GetBillingCadenceOk returns a tuple with the BillingCadence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetBillingCadenceOk() (*TypesBillingCadence, bool) {
	if o == nil || IsNil(o.BillingCadence) {
		return nil, false
	}
	return o.BillingCadence, true
}

// HasBillingCadence returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasBillingCadence() bool {
	if o != nil && !IsNil(o.BillingCadence) {
		return true
	}

	return false
}

// SetBillingCadence gets a reference to the given TypesBillingCadence and assigns it to the BillingCadence field.
func (o *DtoSubscriptionResponse) SetBillingCadence(v TypesBillingCadence) {
	o.BillingCadence = &v
}

// GetBillingPeriod returns the BillingPeriod field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetBillingPeriod() TypesBillingPeriod {
	if o == nil || IsNil(o.BillingPeriod) {
		var ret TypesBillingPeriod
		return ret
	}
	return *o.BillingPeriod
}

// GetBillingPeriodOk returns a tuple with the BillingPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetBillingPeriodOk() (*TypesBillingPeriod, bool) {
	if o == nil || IsNil(o.BillingPeriod) {
		return nil, false
	}
	return o.BillingPeriod, true
}

// HasBillingPeriod returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasBillingPeriod() bool {
	if o != nil && !IsNil(o.BillingPeriod) {
		return true
	}

	return false
}

// SetBillingPeriod gets a reference to the given TypesBillingPeriod and assigns it to the BillingPeriod field.
func (o *DtoSubscriptionResponse) SetBillingPeriod(v TypesBillingPeriod) {
	o.BillingPeriod = &v
}

// GetBillingPeriodCount returns the BillingPeriodCount field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetBillingPeriodCount() int32 {
	if o == nil || IsNil(o.BillingPeriodCount) {
		var ret int32
		return ret
	}
	return *o.BillingPeriodCount
}

// GetBillingPeriodCountOk returns a tuple with the BillingPeriodCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetBillingPeriodCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BillingPeriodCount) {
		return nil, false
	}
	return o.BillingPeriodCount, true
}

// HasBillingPeriodCount returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasBillingPeriodCount() bool {
	if o != nil && !IsNil(o.BillingPeriodCount) {
		return true
	}

	return false
}

// SetBillingPeriodCount gets a reference to the given int32 and assigns it to the BillingPeriodCount field.
func (o *DtoSubscriptionResponse) SetBillingPeriodCount(v int32) {
	o.BillingPeriodCount = &v
}

// GetCancelAt returns the CancelAt field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetCancelAt() string {
	if o == nil || IsNil(o.CancelAt) {
		var ret string
		return ret
	}
	return *o.CancelAt
}

// GetCancelAtOk returns a tuple with the CancelAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetCancelAtOk() (*string, bool) {
	if o == nil || IsNil(o.CancelAt) {
		return nil, false
	}
	return o.CancelAt, true
}

// HasCancelAt returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasCancelAt() bool {
	if o != nil && !IsNil(o.CancelAt) {
		return true
	}

	return false
}

// SetCancelAt gets a reference to the given string and assigns it to the CancelAt field.
func (o *DtoSubscriptionResponse) SetCancelAt(v string) {
	o.CancelAt = &v
}

// GetCancelAtPeriodEnd returns the CancelAtPeriodEnd field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetCancelAtPeriodEnd() bool {
	if o == nil || IsNil(o.CancelAtPeriodEnd) {
		var ret bool
		return ret
	}
	return *o.CancelAtPeriodEnd
}

// GetCancelAtPeriodEndOk returns a tuple with the CancelAtPeriodEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetCancelAtPeriodEndOk() (*bool, bool) {
	if o == nil || IsNil(o.CancelAtPeriodEnd) {
		return nil, false
	}
	return o.CancelAtPeriodEnd, true
}

// HasCancelAtPeriodEnd returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasCancelAtPeriodEnd() bool {
	if o != nil && !IsNil(o.CancelAtPeriodEnd) {
		return true
	}

	return false
}

// SetCancelAtPeriodEnd gets a reference to the given bool and assigns it to the CancelAtPeriodEnd field.
func (o *DtoSubscriptionResponse) SetCancelAtPeriodEnd(v bool) {
	o.CancelAtPeriodEnd = &v
}

// GetCancelledAt returns the CancelledAt field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetCancelledAt() string {
	if o == nil || IsNil(o.CancelledAt) {
		var ret string
		return ret
	}
	return *o.CancelledAt
}

// GetCancelledAtOk returns a tuple with the CancelledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetCancelledAtOk() (*string, bool) {
	if o == nil || IsNil(o.CancelledAt) {
		return nil, false
	}
	return o.CancelledAt, true
}

// HasCancelledAt returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasCancelledAt() bool {
	if o != nil && !IsNil(o.CancelledAt) {
		return true
	}

	return false
}

// SetCancelledAt gets a reference to the given string and assigns it to the CancelledAt field.
func (o *DtoSubscriptionResponse) SetCancelledAt(v string) {
	o.CancelledAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *DtoSubscriptionResponse) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *DtoSubscriptionResponse) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *DtoSubscriptionResponse) SetCurrency(v string) {
	o.Currency = &v
}

// GetCurrentPeriodEnd returns the CurrentPeriodEnd field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetCurrentPeriodEnd() string {
	if o == nil || IsNil(o.CurrentPeriodEnd) {
		var ret string
		return ret
	}
	return *o.CurrentPeriodEnd
}

// GetCurrentPeriodEndOk returns a tuple with the CurrentPeriodEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetCurrentPeriodEndOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentPeriodEnd) {
		return nil, false
	}
	return o.CurrentPeriodEnd, true
}

// HasCurrentPeriodEnd returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasCurrentPeriodEnd() bool {
	if o != nil && !IsNil(o.CurrentPeriodEnd) {
		return true
	}

	return false
}

// SetCurrentPeriodEnd gets a reference to the given string and assigns it to the CurrentPeriodEnd field.
func (o *DtoSubscriptionResponse) SetCurrentPeriodEnd(v string) {
	o.CurrentPeriodEnd = &v
}

// GetCurrentPeriodStart returns the CurrentPeriodStart field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetCurrentPeriodStart() string {
	if o == nil || IsNil(o.CurrentPeriodStart) {
		var ret string
		return ret
	}
	return *o.CurrentPeriodStart
}

// GetCurrentPeriodStartOk returns a tuple with the CurrentPeriodStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetCurrentPeriodStartOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentPeriodStart) {
		return nil, false
	}
	return o.CurrentPeriodStart, true
}

// HasCurrentPeriodStart returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasCurrentPeriodStart() bool {
	if o != nil && !IsNil(o.CurrentPeriodStart) {
		return true
	}

	return false
}

// SetCurrentPeriodStart gets a reference to the given string and assigns it to the CurrentPeriodStart field.
func (o *DtoSubscriptionResponse) SetCurrentPeriodStart(v string) {
	o.CurrentPeriodStart = &v
}

// GetCustomer returns the Customer field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetCustomer() DtoCustomerResponse {
	if o == nil || IsNil(o.Customer) {
		var ret DtoCustomerResponse
		return ret
	}
	return *o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetCustomerOk() (*DtoCustomerResponse, bool) {
	if o == nil || IsNil(o.Customer) {
		return nil, false
	}
	return o.Customer, true
}

// HasCustomer returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasCustomer() bool {
	if o != nil && !IsNil(o.Customer) {
		return true
	}

	return false
}

// SetCustomer gets a reference to the given DtoCustomerResponse and assigns it to the Customer field.
func (o *DtoSubscriptionResponse) SetCustomer(v DtoCustomerResponse) {
	o.Customer = &v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *DtoSubscriptionResponse) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *DtoSubscriptionResponse) SetEndDate(v string) {
	o.EndDate = &v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId) {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentId) {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasEnvironmentId() bool {
	if o != nil && !IsNil(o.EnvironmentId) {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *DtoSubscriptionResponse) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DtoSubscriptionResponse) SetId(v string) {
	o.Id = &v
}

// GetLineItems returns the LineItems field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetLineItems() []SubscriptionSubscriptionLineItem {
	if o == nil || IsNil(o.LineItems) {
		var ret []SubscriptionSubscriptionLineItem
		return ret
	}
	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetLineItemsOk() ([]SubscriptionSubscriptionLineItem, bool) {
	if o == nil || IsNil(o.LineItems) {
		return nil, false
	}
	return o.LineItems, true
}

// HasLineItems returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasLineItems() bool {
	if o != nil && !IsNil(o.LineItems) {
		return true
	}

	return false
}

// SetLineItems gets a reference to the given []SubscriptionSubscriptionLineItem and assigns it to the LineItems field.
func (o *DtoSubscriptionResponse) SetLineItems(v []SubscriptionSubscriptionLineItem) {
	o.LineItems = v
}

// GetLookupKey returns the LookupKey field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetLookupKey() string {
	if o == nil || IsNil(o.LookupKey) {
		var ret string
		return ret
	}
	return *o.LookupKey
}

// GetLookupKeyOk returns a tuple with the LookupKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetLookupKeyOk() (*string, bool) {
	if o == nil || IsNil(o.LookupKey) {
		return nil, false
	}
	return o.LookupKey, true
}

// HasLookupKey returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasLookupKey() bool {
	if o != nil && !IsNil(o.LookupKey) {
		return true
	}

	return false
}

// SetLookupKey gets a reference to the given string and assigns it to the LookupKey field.
func (o *DtoSubscriptionResponse) SetLookupKey(v string) {
	o.LookupKey = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *DtoSubscriptionResponse) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetPauseStatus returns the PauseStatus field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetPauseStatus() TypesPauseStatus {
	if o == nil || IsNil(o.PauseStatus) {
		var ret TypesPauseStatus
		return ret
	}
	return *o.PauseStatus
}

// GetPauseStatusOk returns a tuple with the PauseStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetPauseStatusOk() (*TypesPauseStatus, bool) {
	if o == nil || IsNil(o.PauseStatus) {
		return nil, false
	}
	return o.PauseStatus, true
}

// HasPauseStatus returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasPauseStatus() bool {
	if o != nil && !IsNil(o.PauseStatus) {
		return true
	}

	return false
}

// SetPauseStatus gets a reference to the given TypesPauseStatus and assigns it to the PauseStatus field.
func (o *DtoSubscriptionResponse) SetPauseStatus(v TypesPauseStatus) {
	o.PauseStatus = &v
}

// GetPauses returns the Pauses field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetPauses() []SubscriptionSubscriptionPause {
	if o == nil || IsNil(o.Pauses) {
		var ret []SubscriptionSubscriptionPause
		return ret
	}
	return o.Pauses
}

// GetPausesOk returns a tuple with the Pauses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetPausesOk() ([]SubscriptionSubscriptionPause, bool) {
	if o == nil || IsNil(o.Pauses) {
		return nil, false
	}
	return o.Pauses, true
}

// HasPauses returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasPauses() bool {
	if o != nil && !IsNil(o.Pauses) {
		return true
	}

	return false
}

// SetPauses gets a reference to the given []SubscriptionSubscriptionPause and assigns it to the Pauses field.
func (o *DtoSubscriptionResponse) SetPauses(v []SubscriptionSubscriptionPause) {
	o.Pauses = v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetPlan() DtoPlanResponse {
	if o == nil || IsNil(o.Plan) {
		var ret DtoPlanResponse
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetPlanOk() (*DtoPlanResponse, bool) {
	if o == nil || IsNil(o.Plan) {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasPlan() bool {
	if o != nil && !IsNil(o.Plan) {
		return true
	}

	return false
}

// SetPlan gets a reference to the given DtoPlanResponse and assigns it to the Plan field.
func (o *DtoSubscriptionResponse) SetPlan(v DtoPlanResponse) {
	o.Plan = &v
}

// GetPlanId returns the PlanId field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetPlanId() string {
	if o == nil || IsNil(o.PlanId) {
		var ret string
		return ret
	}
	return *o.PlanId
}

// GetPlanIdOk returns a tuple with the PlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetPlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.PlanId) {
		return nil, false
	}
	return o.PlanId, true
}

// HasPlanId returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasPlanId() bool {
	if o != nil && !IsNil(o.PlanId) {
		return true
	}

	return false
}

// SetPlanId gets a reference to the given string and assigns it to the PlanId field.
func (o *DtoSubscriptionResponse) SetPlanId(v string) {
	o.PlanId = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *DtoSubscriptionResponse) SetStartDate(v string) {
	o.StartDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetStatus() TypesStatus {
	if o == nil || IsNil(o.Status) {
		var ret TypesStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetStatusOk() (*TypesStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TypesStatus and assigns it to the Status field.
func (o *DtoSubscriptionResponse) SetStatus(v TypesStatus) {
	o.Status = &v
}

// GetSubscriptionStatus returns the SubscriptionStatus field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetSubscriptionStatus() TypesSubscriptionStatus {
	if o == nil || IsNil(o.SubscriptionStatus) {
		var ret TypesSubscriptionStatus
		return ret
	}
	return *o.SubscriptionStatus
}

// GetSubscriptionStatusOk returns a tuple with the SubscriptionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetSubscriptionStatusOk() (*TypesSubscriptionStatus, bool) {
	if o == nil || IsNil(o.SubscriptionStatus) {
		return nil, false
	}
	return o.SubscriptionStatus, true
}

// HasSubscriptionStatus returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasSubscriptionStatus() bool {
	if o != nil && !IsNil(o.SubscriptionStatus) {
		return true
	}

	return false
}

// SetSubscriptionStatus gets a reference to the given TypesSubscriptionStatus and assigns it to the SubscriptionStatus field.
func (o *DtoSubscriptionResponse) SetSubscriptionStatus(v TypesSubscriptionStatus) {
	o.SubscriptionStatus = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *DtoSubscriptionResponse) SetTenantId(v string) {
	o.TenantId = &v
}

// GetTrialEnd returns the TrialEnd field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetTrialEnd() string {
	if o == nil || IsNil(o.TrialEnd) {
		var ret string
		return ret
	}
	return *o.TrialEnd
}

// GetTrialEndOk returns a tuple with the TrialEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetTrialEndOk() (*string, bool) {
	if o == nil || IsNil(o.TrialEnd) {
		return nil, false
	}
	return o.TrialEnd, true
}

// HasTrialEnd returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasTrialEnd() bool {
	if o != nil && !IsNil(o.TrialEnd) {
		return true
	}

	return false
}

// SetTrialEnd gets a reference to the given string and assigns it to the TrialEnd field.
func (o *DtoSubscriptionResponse) SetTrialEnd(v string) {
	o.TrialEnd = &v
}

// GetTrialStart returns the TrialStart field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetTrialStart() string {
	if o == nil || IsNil(o.TrialStart) {
		var ret string
		return ret
	}
	return *o.TrialStart
}

// GetTrialStartOk returns a tuple with the TrialStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetTrialStartOk() (*string, bool) {
	if o == nil || IsNil(o.TrialStart) {
		return nil, false
	}
	return o.TrialStart, true
}

// HasTrialStart returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasTrialStart() bool {
	if o != nil && !IsNil(o.TrialStart) {
		return true
	}

	return false
}

// SetTrialStart gets a reference to the given string and assigns it to the TrialStart field.
func (o *DtoSubscriptionResponse) SetTrialStart(v string) {
	o.TrialStart = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *DtoSubscriptionResponse) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *DtoSubscriptionResponse) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DtoSubscriptionResponse) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionResponse) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DtoSubscriptionResponse) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *DtoSubscriptionResponse) SetVersion(v int32) {
	o.Version = &v
}

func (o DtoSubscriptionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoSubscriptionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivePauseId) {
		toSerialize["active_pause_id"] = o.ActivePauseId
	}
	if !IsNil(o.BillingAnchor) {
		toSerialize["billing_anchor"] = o.BillingAnchor
	}
	if !IsNil(o.BillingCadence) {
		toSerialize["billing_cadence"] = o.BillingCadence
	}
	if !IsNil(o.BillingPeriod) {
		toSerialize["billing_period"] = o.BillingPeriod
	}
	if !IsNil(o.BillingPeriodCount) {
		toSerialize["billing_period_count"] = o.BillingPeriodCount
	}
	if !IsNil(o.CancelAt) {
		toSerialize["cancel_at"] = o.CancelAt
	}
	if !IsNil(o.CancelAtPeriodEnd) {
		toSerialize["cancel_at_period_end"] = o.CancelAtPeriodEnd
	}
	if !IsNil(o.CancelledAt) {
		toSerialize["cancelled_at"] = o.CancelledAt
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.CurrentPeriodEnd) {
		toSerialize["current_period_end"] = o.CurrentPeriodEnd
	}
	if !IsNil(o.CurrentPeriodStart) {
		toSerialize["current_period_start"] = o.CurrentPeriodStart
	}
	if !IsNil(o.Customer) {
		toSerialize["customer"] = o.Customer
	}
	if !IsNil(o.CustomerId) {
		toSerialize["customer_id"] = o.CustomerId
	}
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	if !IsNil(o.EnvironmentId) {
		toSerialize["environment_id"] = o.EnvironmentId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LineItems) {
		toSerialize["line_items"] = o.LineItems
	}
	if !IsNil(o.LookupKey) {
		toSerialize["lookup_key"] = o.LookupKey
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.PauseStatus) {
		toSerialize["pause_status"] = o.PauseStatus
	}
	if !IsNil(o.Pauses) {
		toSerialize["pauses"] = o.Pauses
	}
	if !IsNil(o.Plan) {
		toSerialize["plan"] = o.Plan
	}
	if !IsNil(o.PlanId) {
		toSerialize["plan_id"] = o.PlanId
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SubscriptionStatus) {
		toSerialize["subscription_status"] = o.SubscriptionStatus
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenant_id"] = o.TenantId
	}
	if !IsNil(o.TrialEnd) {
		toSerialize["trial_end"] = o.TrialEnd
	}
	if !IsNil(o.TrialStart) {
		toSerialize["trial_start"] = o.TrialStart
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableDtoSubscriptionResponse struct {
	value *DtoSubscriptionResponse
	isSet bool
}

func (v NullableDtoSubscriptionResponse) Get() *DtoSubscriptionResponse {
	return v.value
}

func (v *NullableDtoSubscriptionResponse) Set(val *DtoSubscriptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoSubscriptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoSubscriptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoSubscriptionResponse(val *DtoSubscriptionResponse) *NullableDtoSubscriptionResponse {
	return &NullableDtoSubscriptionResponse{value: val, isSet: true}
}

func (v NullableDtoSubscriptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoSubscriptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


