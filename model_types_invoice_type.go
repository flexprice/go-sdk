/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"fmt"
)

// TypesInvoiceType the model 'TypesInvoiceType'
type TypesInvoiceType string

// List of types.InvoiceType
const (
	TYPESINVOICETYPE_InvoiceTypeSubscription TypesInvoiceType = "SUBSCRIPTION"
	TYPESINVOICETYPE_InvoiceTypeOneOff TypesInvoiceType = "ONE_OFF"
	TYPESINVOICETYPE_InvoiceTypeCredit TypesInvoiceType = "CREDIT"
)

// All allowed values of TypesInvoiceType enum
var AllowedTypesInvoiceTypeEnumValues = []TypesInvoiceType{
	"SUBSCRIPTION",
	"ONE_OFF",
	"CREDIT",
}

func (v *TypesInvoiceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesInvoiceType(value)
	for _, existing := range AllowedTypesInvoiceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesInvoiceType", value)
}

// NewTypesInvoiceTypeFromValue returns a pointer to a valid TypesInvoiceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesInvoiceTypeFromValue(v string) (*TypesInvoiceType, error) {
	ev := TypesInvoiceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesInvoiceType: valid values are %v", v, AllowedTypesInvoiceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesInvoiceType) IsValid() bool {
	for _, existing := range AllowedTypesInvoiceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.InvoiceType value
func (v TypesInvoiceType) Ptr() *TypesInvoiceType {
	return &v
}

type NullableTypesInvoiceType struct {
	value *TypesInvoiceType
	isSet bool
}

func (v NullableTypesInvoiceType) Get() *TypesInvoiceType {
	return v.value
}

func (v *NullableTypesInvoiceType) Set(val *TypesInvoiceType) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesInvoiceType) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesInvoiceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesInvoiceType(val *TypesInvoiceType) *NullableTypesInvoiceType {
	return &NullableTypesInvoiceType{value: val, isSet: true}
}

func (v NullableTypesInvoiceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesInvoiceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

