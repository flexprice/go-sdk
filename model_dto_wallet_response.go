/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoWalletResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoWalletResponse{}

// DtoWalletResponse struct for DtoWalletResponse
type DtoWalletResponse struct {
	AutoTopupAmount *float32 `json:"auto_topup_amount,omitempty"`
	AutoTopupMinBalance *float32 `json:"auto_topup_min_balance,omitempty"`
	AutoTopupTrigger *TypesAutoTopupTrigger `json:"auto_topup_trigger,omitempty"`
	Balance *float32 `json:"balance,omitempty"`
	Config *TypesWalletConfig `json:"config,omitempty"`
	ConversionRate *float32 `json:"conversion_rate,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	CreditBalance *float32 `json:"credit_balance,omitempty"`
	Currency *string `json:"currency,omitempty"`
	CustomerId *string `json:"customer_id,omitempty"`
	Description *string `json:"description,omitempty"`
	Id *string `json:"id,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	Name *string `json:"name,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	WalletStatus *TypesWalletStatus `json:"wallet_status,omitempty"`
	WalletType *TypesWalletType `json:"wallet_type,omitempty"`
}

// NewDtoWalletResponse instantiates a new DtoWalletResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoWalletResponse() *DtoWalletResponse {
	this := DtoWalletResponse{}
	return &this
}

// NewDtoWalletResponseWithDefaults instantiates a new DtoWalletResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoWalletResponseWithDefaults() *DtoWalletResponse {
	this := DtoWalletResponse{}
	return &this
}

// GetAutoTopupAmount returns the AutoTopupAmount field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetAutoTopupAmount() float32 {
	if o == nil || IsNil(o.AutoTopupAmount) {
		var ret float32
		return ret
	}
	return *o.AutoTopupAmount
}

// GetAutoTopupAmountOk returns a tuple with the AutoTopupAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetAutoTopupAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.AutoTopupAmount) {
		return nil, false
	}
	return o.AutoTopupAmount, true
}

// HasAutoTopupAmount returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasAutoTopupAmount() bool {
	if o != nil && !IsNil(o.AutoTopupAmount) {
		return true
	}

	return false
}

// SetAutoTopupAmount gets a reference to the given float32 and assigns it to the AutoTopupAmount field.
func (o *DtoWalletResponse) SetAutoTopupAmount(v float32) {
	o.AutoTopupAmount = &v
}

// GetAutoTopupMinBalance returns the AutoTopupMinBalance field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetAutoTopupMinBalance() float32 {
	if o == nil || IsNil(o.AutoTopupMinBalance) {
		var ret float32
		return ret
	}
	return *o.AutoTopupMinBalance
}

// GetAutoTopupMinBalanceOk returns a tuple with the AutoTopupMinBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetAutoTopupMinBalanceOk() (*float32, bool) {
	if o == nil || IsNil(o.AutoTopupMinBalance) {
		return nil, false
	}
	return o.AutoTopupMinBalance, true
}

// HasAutoTopupMinBalance returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasAutoTopupMinBalance() bool {
	if o != nil && !IsNil(o.AutoTopupMinBalance) {
		return true
	}

	return false
}

// SetAutoTopupMinBalance gets a reference to the given float32 and assigns it to the AutoTopupMinBalance field.
func (o *DtoWalletResponse) SetAutoTopupMinBalance(v float32) {
	o.AutoTopupMinBalance = &v
}

// GetAutoTopupTrigger returns the AutoTopupTrigger field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetAutoTopupTrigger() TypesAutoTopupTrigger {
	if o == nil || IsNil(o.AutoTopupTrigger) {
		var ret TypesAutoTopupTrigger
		return ret
	}
	return *o.AutoTopupTrigger
}

// GetAutoTopupTriggerOk returns a tuple with the AutoTopupTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetAutoTopupTriggerOk() (*TypesAutoTopupTrigger, bool) {
	if o == nil || IsNil(o.AutoTopupTrigger) {
		return nil, false
	}
	return o.AutoTopupTrigger, true
}

// HasAutoTopupTrigger returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasAutoTopupTrigger() bool {
	if o != nil && !IsNil(o.AutoTopupTrigger) {
		return true
	}

	return false
}

// SetAutoTopupTrigger gets a reference to the given TypesAutoTopupTrigger and assigns it to the AutoTopupTrigger field.
func (o *DtoWalletResponse) SetAutoTopupTrigger(v TypesAutoTopupTrigger) {
	o.AutoTopupTrigger = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetBalance() float32 {
	if o == nil || IsNil(o.Balance) {
		var ret float32
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetBalanceOk() (*float32, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given float32 and assigns it to the Balance field.
func (o *DtoWalletResponse) SetBalance(v float32) {
	o.Balance = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetConfig() TypesWalletConfig {
	if o == nil || IsNil(o.Config) {
		var ret TypesWalletConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetConfigOk() (*TypesWalletConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given TypesWalletConfig and assigns it to the Config field.
func (o *DtoWalletResponse) SetConfig(v TypesWalletConfig) {
	o.Config = &v
}

// GetConversionRate returns the ConversionRate field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetConversionRate() float32 {
	if o == nil || IsNil(o.ConversionRate) {
		var ret float32
		return ret
	}
	return *o.ConversionRate
}

// GetConversionRateOk returns a tuple with the ConversionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetConversionRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ConversionRate) {
		return nil, false
	}
	return o.ConversionRate, true
}

// HasConversionRate returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasConversionRate() bool {
	if o != nil && !IsNil(o.ConversionRate) {
		return true
	}

	return false
}

// SetConversionRate gets a reference to the given float32 and assigns it to the ConversionRate field.
func (o *DtoWalletResponse) SetConversionRate(v float32) {
	o.ConversionRate = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *DtoWalletResponse) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreditBalance returns the CreditBalance field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetCreditBalance() float32 {
	if o == nil || IsNil(o.CreditBalance) {
		var ret float32
		return ret
	}
	return *o.CreditBalance
}

// GetCreditBalanceOk returns a tuple with the CreditBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetCreditBalanceOk() (*float32, bool) {
	if o == nil || IsNil(o.CreditBalance) {
		return nil, false
	}
	return o.CreditBalance, true
}

// HasCreditBalance returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasCreditBalance() bool {
	if o != nil && !IsNil(o.CreditBalance) {
		return true
	}

	return false
}

// SetCreditBalance gets a reference to the given float32 and assigns it to the CreditBalance field.
func (o *DtoWalletResponse) SetCreditBalance(v float32) {
	o.CreditBalance = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *DtoWalletResponse) SetCurrency(v string) {
	o.Currency = &v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *DtoWalletResponse) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DtoWalletResponse) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DtoWalletResponse) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *DtoWalletResponse) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtoWalletResponse) SetName(v string) {
	o.Name = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *DtoWalletResponse) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetWalletStatus returns the WalletStatus field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetWalletStatus() TypesWalletStatus {
	if o == nil || IsNil(o.WalletStatus) {
		var ret TypesWalletStatus
		return ret
	}
	return *o.WalletStatus
}

// GetWalletStatusOk returns a tuple with the WalletStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetWalletStatusOk() (*TypesWalletStatus, bool) {
	if o == nil || IsNil(o.WalletStatus) {
		return nil, false
	}
	return o.WalletStatus, true
}

// HasWalletStatus returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasWalletStatus() bool {
	if o != nil && !IsNil(o.WalletStatus) {
		return true
	}

	return false
}

// SetWalletStatus gets a reference to the given TypesWalletStatus and assigns it to the WalletStatus field.
func (o *DtoWalletResponse) SetWalletStatus(v TypesWalletStatus) {
	o.WalletStatus = &v
}

// GetWalletType returns the WalletType field value if set, zero value otherwise.
func (o *DtoWalletResponse) GetWalletType() TypesWalletType {
	if o == nil || IsNil(o.WalletType) {
		var ret TypesWalletType
		return ret
	}
	return *o.WalletType
}

// GetWalletTypeOk returns a tuple with the WalletType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoWalletResponse) GetWalletTypeOk() (*TypesWalletType, bool) {
	if o == nil || IsNil(o.WalletType) {
		return nil, false
	}
	return o.WalletType, true
}

// HasWalletType returns a boolean if a field has been set.
func (o *DtoWalletResponse) HasWalletType() bool {
	if o != nil && !IsNil(o.WalletType) {
		return true
	}

	return false
}

// SetWalletType gets a reference to the given TypesWalletType and assigns it to the WalletType field.
func (o *DtoWalletResponse) SetWalletType(v TypesWalletType) {
	o.WalletType = &v
}

func (o DtoWalletResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoWalletResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoTopupAmount) {
		toSerialize["auto_topup_amount"] = o.AutoTopupAmount
	}
	if !IsNil(o.AutoTopupMinBalance) {
		toSerialize["auto_topup_min_balance"] = o.AutoTopupMinBalance
	}
	if !IsNil(o.AutoTopupTrigger) {
		toSerialize["auto_topup_trigger"] = o.AutoTopupTrigger
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.ConversionRate) {
		toSerialize["conversion_rate"] = o.ConversionRate
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.CreditBalance) {
		toSerialize["credit_balance"] = o.CreditBalance
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.CustomerId) {
		toSerialize["customer_id"] = o.CustomerId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.WalletStatus) {
		toSerialize["wallet_status"] = o.WalletStatus
	}
	if !IsNil(o.WalletType) {
		toSerialize["wallet_type"] = o.WalletType
	}
	return toSerialize, nil
}

type NullableDtoWalletResponse struct {
	value *DtoWalletResponse
	isSet bool
}

func (v NullableDtoWalletResponse) Get() *DtoWalletResponse {
	return v.value
}

func (v *NullableDtoWalletResponse) Set(val *DtoWalletResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoWalletResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoWalletResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoWalletResponse(val *DtoWalletResponse) *NullableDtoWalletResponse {
	return &NullableDtoWalletResponse{value: val, isSet: true}
}

func (v NullableDtoWalletResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoWalletResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


