/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoUsageAnalyticItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoUsageAnalyticItem{}

// DtoUsageAnalyticItem struct for DtoUsageAnalyticItem
type DtoUsageAnalyticItem struct {
	AggregationType *TypesAggregationType `json:"aggregation_type,omitempty"`
	Currency *string `json:"currency,omitempty"`
	EventName *string `json:"event_name,omitempty"`
	FeatureId *string `json:"feature_id,omitempty"`
	Name *string `json:"name,omitempty"`
	Points []DtoUsageAnalyticPoint `json:"points,omitempty"`
	Source *string `json:"source,omitempty"`
	TotalCost *float32 `json:"total_cost,omitempty"`
	TotalUsage *float32 `json:"total_usage,omitempty"`
	Unit *string `json:"unit,omitempty"`
	UnitPlural *string `json:"unit_plural,omitempty"`
}

// NewDtoUsageAnalyticItem instantiates a new DtoUsageAnalyticItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoUsageAnalyticItem() *DtoUsageAnalyticItem {
	this := DtoUsageAnalyticItem{}
	return &this
}

// NewDtoUsageAnalyticItemWithDefaults instantiates a new DtoUsageAnalyticItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoUsageAnalyticItemWithDefaults() *DtoUsageAnalyticItem {
	this := DtoUsageAnalyticItem{}
	return &this
}

// GetAggregationType returns the AggregationType field value if set, zero value otherwise.
func (o *DtoUsageAnalyticItem) GetAggregationType() TypesAggregationType {
	if o == nil || IsNil(o.AggregationType) {
		var ret TypesAggregationType
		return ret
	}
	return *o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUsageAnalyticItem) GetAggregationTypeOk() (*TypesAggregationType, bool) {
	if o == nil || IsNil(o.AggregationType) {
		return nil, false
	}
	return o.AggregationType, true
}

// HasAggregationType returns a boolean if a field has been set.
func (o *DtoUsageAnalyticItem) HasAggregationType() bool {
	if o != nil && !IsNil(o.AggregationType) {
		return true
	}

	return false
}

// SetAggregationType gets a reference to the given TypesAggregationType and assigns it to the AggregationType field.
func (o *DtoUsageAnalyticItem) SetAggregationType(v TypesAggregationType) {
	o.AggregationType = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *DtoUsageAnalyticItem) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUsageAnalyticItem) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *DtoUsageAnalyticItem) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *DtoUsageAnalyticItem) SetCurrency(v string) {
	o.Currency = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *DtoUsageAnalyticItem) GetEventName() string {
	if o == nil || IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUsageAnalyticItem) GetEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *DtoUsageAnalyticItem) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *DtoUsageAnalyticItem) SetEventName(v string) {
	o.EventName = &v
}

// GetFeatureId returns the FeatureId field value if set, zero value otherwise.
func (o *DtoUsageAnalyticItem) GetFeatureId() string {
	if o == nil || IsNil(o.FeatureId) {
		var ret string
		return ret
	}
	return *o.FeatureId
}

// GetFeatureIdOk returns a tuple with the FeatureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUsageAnalyticItem) GetFeatureIdOk() (*string, bool) {
	if o == nil || IsNil(o.FeatureId) {
		return nil, false
	}
	return o.FeatureId, true
}

// HasFeatureId returns a boolean if a field has been set.
func (o *DtoUsageAnalyticItem) HasFeatureId() bool {
	if o != nil && !IsNil(o.FeatureId) {
		return true
	}

	return false
}

// SetFeatureId gets a reference to the given string and assigns it to the FeatureId field.
func (o *DtoUsageAnalyticItem) SetFeatureId(v string) {
	o.FeatureId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtoUsageAnalyticItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUsageAnalyticItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtoUsageAnalyticItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtoUsageAnalyticItem) SetName(v string) {
	o.Name = &v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *DtoUsageAnalyticItem) GetPoints() []DtoUsageAnalyticPoint {
	if o == nil || IsNil(o.Points) {
		var ret []DtoUsageAnalyticPoint
		return ret
	}
	return o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUsageAnalyticItem) GetPointsOk() ([]DtoUsageAnalyticPoint, bool) {
	if o == nil || IsNil(o.Points) {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *DtoUsageAnalyticItem) HasPoints() bool {
	if o != nil && !IsNil(o.Points) {
		return true
	}

	return false
}

// SetPoints gets a reference to the given []DtoUsageAnalyticPoint and assigns it to the Points field.
func (o *DtoUsageAnalyticItem) SetPoints(v []DtoUsageAnalyticPoint) {
	o.Points = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *DtoUsageAnalyticItem) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUsageAnalyticItem) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *DtoUsageAnalyticItem) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *DtoUsageAnalyticItem) SetSource(v string) {
	o.Source = &v
}

// GetTotalCost returns the TotalCost field value if set, zero value otherwise.
func (o *DtoUsageAnalyticItem) GetTotalCost() float32 {
	if o == nil || IsNil(o.TotalCost) {
		var ret float32
		return ret
	}
	return *o.TotalCost
}

// GetTotalCostOk returns a tuple with the TotalCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUsageAnalyticItem) GetTotalCostOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalCost) {
		return nil, false
	}
	return o.TotalCost, true
}

// HasTotalCost returns a boolean if a field has been set.
func (o *DtoUsageAnalyticItem) HasTotalCost() bool {
	if o != nil && !IsNil(o.TotalCost) {
		return true
	}

	return false
}

// SetTotalCost gets a reference to the given float32 and assigns it to the TotalCost field.
func (o *DtoUsageAnalyticItem) SetTotalCost(v float32) {
	o.TotalCost = &v
}

// GetTotalUsage returns the TotalUsage field value if set, zero value otherwise.
func (o *DtoUsageAnalyticItem) GetTotalUsage() float32 {
	if o == nil || IsNil(o.TotalUsage) {
		var ret float32
		return ret
	}
	return *o.TotalUsage
}

// GetTotalUsageOk returns a tuple with the TotalUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUsageAnalyticItem) GetTotalUsageOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalUsage) {
		return nil, false
	}
	return o.TotalUsage, true
}

// HasTotalUsage returns a boolean if a field has been set.
func (o *DtoUsageAnalyticItem) HasTotalUsage() bool {
	if o != nil && !IsNil(o.TotalUsage) {
		return true
	}

	return false
}

// SetTotalUsage gets a reference to the given float32 and assigns it to the TotalUsage field.
func (o *DtoUsageAnalyticItem) SetTotalUsage(v float32) {
	o.TotalUsage = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *DtoUsageAnalyticItem) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUsageAnalyticItem) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *DtoUsageAnalyticItem) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *DtoUsageAnalyticItem) SetUnit(v string) {
	o.Unit = &v
}

// GetUnitPlural returns the UnitPlural field value if set, zero value otherwise.
func (o *DtoUsageAnalyticItem) GetUnitPlural() string {
	if o == nil || IsNil(o.UnitPlural) {
		var ret string
		return ret
	}
	return *o.UnitPlural
}

// GetUnitPluralOk returns a tuple with the UnitPlural field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUsageAnalyticItem) GetUnitPluralOk() (*string, bool) {
	if o == nil || IsNil(o.UnitPlural) {
		return nil, false
	}
	return o.UnitPlural, true
}

// HasUnitPlural returns a boolean if a field has been set.
func (o *DtoUsageAnalyticItem) HasUnitPlural() bool {
	if o != nil && !IsNil(o.UnitPlural) {
		return true
	}

	return false
}

// SetUnitPlural gets a reference to the given string and assigns it to the UnitPlural field.
func (o *DtoUsageAnalyticItem) SetUnitPlural(v string) {
	o.UnitPlural = &v
}

func (o DtoUsageAnalyticItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoUsageAnalyticItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AggregationType) {
		toSerialize["aggregation_type"] = o.AggregationType
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.EventName) {
		toSerialize["event_name"] = o.EventName
	}
	if !IsNil(o.FeatureId) {
		toSerialize["feature_id"] = o.FeatureId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Points) {
		toSerialize["points"] = o.Points
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.TotalCost) {
		toSerialize["total_cost"] = o.TotalCost
	}
	if !IsNil(o.TotalUsage) {
		toSerialize["total_usage"] = o.TotalUsage
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.UnitPlural) {
		toSerialize["unit_plural"] = o.UnitPlural
	}
	return toSerialize, nil
}

type NullableDtoUsageAnalyticItem struct {
	value *DtoUsageAnalyticItem
	isSet bool
}

func (v NullableDtoUsageAnalyticItem) Get() *DtoUsageAnalyticItem {
	return v.value
}

func (v *NullableDtoUsageAnalyticItem) Set(val *DtoUsageAnalyticItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoUsageAnalyticItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoUsageAnalyticItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoUsageAnalyticItem(val *DtoUsageAnalyticItem) *NullableDtoUsageAnalyticItem {
	return &NullableDtoUsageAnalyticItem{value: val, isSet: true}
}

func (v NullableDtoUsageAnalyticItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoUsageAnalyticItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


