/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"fmt"
)

// TypesTransactionStatus the model 'TypesTransactionStatus'
type TypesTransactionStatus string

// List of types.TransactionStatus
const (
	TYPESTRANSACTIONSTATUS_TransactionStatusPending TypesTransactionStatus = "pending"
	TYPESTRANSACTIONSTATUS_TransactionStatusCompleted TypesTransactionStatus = "completed"
	TYPESTRANSACTIONSTATUS_TransactionStatusFailed TypesTransactionStatus = "failed"
)

// All allowed values of TypesTransactionStatus enum
var AllowedTypesTransactionStatusEnumValues = []TypesTransactionStatus{
	"pending",
	"completed",
	"failed",
}

func (v *TypesTransactionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesTransactionStatus(value)
	for _, existing := range AllowedTypesTransactionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesTransactionStatus", value)
}

// NewTypesTransactionStatusFromValue returns a pointer to a valid TypesTransactionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesTransactionStatusFromValue(v string) (*TypesTransactionStatus, error) {
	ev := TypesTransactionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesTransactionStatus: valid values are %v", v, AllowedTypesTransactionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesTransactionStatus) IsValid() bool {
	for _, existing := range AllowedTypesTransactionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.TransactionStatus value
func (v TypesTransactionStatus) Ptr() *TypesTransactionStatus {
	return &v
}

type NullableTypesTransactionStatus struct {
	value *TypesTransactionStatus
	isSet bool
}

func (v NullableTypesTransactionStatus) Get() *TypesTransactionStatus {
	return v.value
}

func (v *NullableTypesTransactionStatus) Set(val *TypesTransactionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesTransactionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesTransactionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesTransactionStatus(val *TypesTransactionStatus) *NullableTypesTransactionStatus {
	return &NullableTypesTransactionStatus{value: val, isSet: true}
}

func (v NullableTypesTransactionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesTransactionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

