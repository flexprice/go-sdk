/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoTaskResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoTaskResponse{}

// DtoTaskResponse struct for DtoTaskResponse
type DtoTaskResponse struct {
	CompletedAt *string `json:"completed_at,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	CreatedBy *string `json:"created_by,omitempty"`
	EntityType *TypesEntityType `json:"entity_type,omitempty"`
	ErrorSummary *string `json:"error_summary,omitempty"`
	FailedAt *string `json:"failed_at,omitempty"`
	FailedRecords *int32 `json:"failed_records,omitempty"`
	FileName *string `json:"file_name,omitempty"`
	FileType *TypesFileType `json:"file_type,omitempty"`
	FileUrl *string `json:"file_url,omitempty"`
	Id *string `json:"id,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	ProcessedRecords *int32 `json:"processed_records,omitempty"`
	StartedAt *string `json:"started_at,omitempty"`
	Status *string `json:"status,omitempty"`
	SuccessfulRecords *int32 `json:"successful_records,omitempty"`
	TaskStatus *TypesTaskStatus `json:"task_status,omitempty"`
	TaskType *TypesTaskType `json:"task_type,omitempty"`
	TenantId *string `json:"tenant_id,omitempty"`
	TotalRecords *int32 `json:"total_records,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	UpdatedBy *string `json:"updated_by,omitempty"`
}

// NewDtoTaskResponse instantiates a new DtoTaskResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoTaskResponse() *DtoTaskResponse {
	this := DtoTaskResponse{}
	return &this
}

// NewDtoTaskResponseWithDefaults instantiates a new DtoTaskResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoTaskResponseWithDefaults() *DtoTaskResponse {
	this := DtoTaskResponse{}
	return &this
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetCompletedAt() string {
	if o == nil || IsNil(o.CompletedAt) {
		var ret string
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetCompletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given string and assigns it to the CompletedAt field.
func (o *DtoTaskResponse) SetCompletedAt(v string) {
	o.CompletedAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *DtoTaskResponse) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *DtoTaskResponse) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetEntityType() TypesEntityType {
	if o == nil || IsNil(o.EntityType) {
		var ret TypesEntityType
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetEntityTypeOk() (*TypesEntityType, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given TypesEntityType and assigns it to the EntityType field.
func (o *DtoTaskResponse) SetEntityType(v TypesEntityType) {
	o.EntityType = &v
}

// GetErrorSummary returns the ErrorSummary field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetErrorSummary() string {
	if o == nil || IsNil(o.ErrorSummary) {
		var ret string
		return ret
	}
	return *o.ErrorSummary
}

// GetErrorSummaryOk returns a tuple with the ErrorSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetErrorSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorSummary) {
		return nil, false
	}
	return o.ErrorSummary, true
}

// HasErrorSummary returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasErrorSummary() bool {
	if o != nil && !IsNil(o.ErrorSummary) {
		return true
	}

	return false
}

// SetErrorSummary gets a reference to the given string and assigns it to the ErrorSummary field.
func (o *DtoTaskResponse) SetErrorSummary(v string) {
	o.ErrorSummary = &v
}

// GetFailedAt returns the FailedAt field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetFailedAt() string {
	if o == nil || IsNil(o.FailedAt) {
		var ret string
		return ret
	}
	return *o.FailedAt
}

// GetFailedAtOk returns a tuple with the FailedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetFailedAtOk() (*string, bool) {
	if o == nil || IsNil(o.FailedAt) {
		return nil, false
	}
	return o.FailedAt, true
}

// HasFailedAt returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasFailedAt() bool {
	if o != nil && !IsNil(o.FailedAt) {
		return true
	}

	return false
}

// SetFailedAt gets a reference to the given string and assigns it to the FailedAt field.
func (o *DtoTaskResponse) SetFailedAt(v string) {
	o.FailedAt = &v
}

// GetFailedRecords returns the FailedRecords field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetFailedRecords() int32 {
	if o == nil || IsNil(o.FailedRecords) {
		var ret int32
		return ret
	}
	return *o.FailedRecords
}

// GetFailedRecordsOk returns a tuple with the FailedRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetFailedRecordsOk() (*int32, bool) {
	if o == nil || IsNil(o.FailedRecords) {
		return nil, false
	}
	return o.FailedRecords, true
}

// HasFailedRecords returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasFailedRecords() bool {
	if o != nil && !IsNil(o.FailedRecords) {
		return true
	}

	return false
}

// SetFailedRecords gets a reference to the given int32 and assigns it to the FailedRecords field.
func (o *DtoTaskResponse) SetFailedRecords(v int32) {
	o.FailedRecords = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *DtoTaskResponse) SetFileName(v string) {
	o.FileName = &v
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetFileType() TypesFileType {
	if o == nil || IsNil(o.FileType) {
		var ret TypesFileType
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetFileTypeOk() (*TypesFileType, bool) {
	if o == nil || IsNil(o.FileType) {
		return nil, false
	}
	return o.FileType, true
}

// HasFileType returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasFileType() bool {
	if o != nil && !IsNil(o.FileType) {
		return true
	}

	return false
}

// SetFileType gets a reference to the given TypesFileType and assigns it to the FileType field.
func (o *DtoTaskResponse) SetFileType(v TypesFileType) {
	o.FileType = &v
}

// GetFileUrl returns the FileUrl field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetFileUrl() string {
	if o == nil || IsNil(o.FileUrl) {
		var ret string
		return ret
	}
	return *o.FileUrl
}

// GetFileUrlOk returns a tuple with the FileUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetFileUrlOk() (*string, bool) {
	if o == nil || IsNil(o.FileUrl) {
		return nil, false
	}
	return o.FileUrl, true
}

// HasFileUrl returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasFileUrl() bool {
	if o != nil && !IsNil(o.FileUrl) {
		return true
	}

	return false
}

// SetFileUrl gets a reference to the given string and assigns it to the FileUrl field.
func (o *DtoTaskResponse) SetFileUrl(v string) {
	o.FileUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DtoTaskResponse) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *DtoTaskResponse) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetProcessedRecords returns the ProcessedRecords field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetProcessedRecords() int32 {
	if o == nil || IsNil(o.ProcessedRecords) {
		var ret int32
		return ret
	}
	return *o.ProcessedRecords
}

// GetProcessedRecordsOk returns a tuple with the ProcessedRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetProcessedRecordsOk() (*int32, bool) {
	if o == nil || IsNil(o.ProcessedRecords) {
		return nil, false
	}
	return o.ProcessedRecords, true
}

// HasProcessedRecords returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasProcessedRecords() bool {
	if o != nil && !IsNil(o.ProcessedRecords) {
		return true
	}

	return false
}

// SetProcessedRecords gets a reference to the given int32 and assigns it to the ProcessedRecords field.
func (o *DtoTaskResponse) SetProcessedRecords(v int32) {
	o.ProcessedRecords = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetStartedAt() string {
	if o == nil || IsNil(o.StartedAt) {
		var ret string
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetStartedAtOk() (*string, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given string and assigns it to the StartedAt field.
func (o *DtoTaskResponse) SetStartedAt(v string) {
	o.StartedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DtoTaskResponse) SetStatus(v string) {
	o.Status = &v
}

// GetSuccessfulRecords returns the SuccessfulRecords field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetSuccessfulRecords() int32 {
	if o == nil || IsNil(o.SuccessfulRecords) {
		var ret int32
		return ret
	}
	return *o.SuccessfulRecords
}

// GetSuccessfulRecordsOk returns a tuple with the SuccessfulRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetSuccessfulRecordsOk() (*int32, bool) {
	if o == nil || IsNil(o.SuccessfulRecords) {
		return nil, false
	}
	return o.SuccessfulRecords, true
}

// HasSuccessfulRecords returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasSuccessfulRecords() bool {
	if o != nil && !IsNil(o.SuccessfulRecords) {
		return true
	}

	return false
}

// SetSuccessfulRecords gets a reference to the given int32 and assigns it to the SuccessfulRecords field.
func (o *DtoTaskResponse) SetSuccessfulRecords(v int32) {
	o.SuccessfulRecords = &v
}

// GetTaskStatus returns the TaskStatus field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetTaskStatus() TypesTaskStatus {
	if o == nil || IsNil(o.TaskStatus) {
		var ret TypesTaskStatus
		return ret
	}
	return *o.TaskStatus
}

// GetTaskStatusOk returns a tuple with the TaskStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetTaskStatusOk() (*TypesTaskStatus, bool) {
	if o == nil || IsNil(o.TaskStatus) {
		return nil, false
	}
	return o.TaskStatus, true
}

// HasTaskStatus returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasTaskStatus() bool {
	if o != nil && !IsNil(o.TaskStatus) {
		return true
	}

	return false
}

// SetTaskStatus gets a reference to the given TypesTaskStatus and assigns it to the TaskStatus field.
func (o *DtoTaskResponse) SetTaskStatus(v TypesTaskStatus) {
	o.TaskStatus = &v
}

// GetTaskType returns the TaskType field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetTaskType() TypesTaskType {
	if o == nil || IsNil(o.TaskType) {
		var ret TypesTaskType
		return ret
	}
	return *o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetTaskTypeOk() (*TypesTaskType, bool) {
	if o == nil || IsNil(o.TaskType) {
		return nil, false
	}
	return o.TaskType, true
}

// HasTaskType returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasTaskType() bool {
	if o != nil && !IsNil(o.TaskType) {
		return true
	}

	return false
}

// SetTaskType gets a reference to the given TypesTaskType and assigns it to the TaskType field.
func (o *DtoTaskResponse) SetTaskType(v TypesTaskType) {
	o.TaskType = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *DtoTaskResponse) SetTenantId(v string) {
	o.TenantId = &v
}

// GetTotalRecords returns the TotalRecords field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetTotalRecords() int32 {
	if o == nil || IsNil(o.TotalRecords) {
		var ret int32
		return ret
	}
	return *o.TotalRecords
}

// GetTotalRecordsOk returns a tuple with the TotalRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetTotalRecordsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalRecords) {
		return nil, false
	}
	return o.TotalRecords, true
}

// HasTotalRecords returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasTotalRecords() bool {
	if o != nil && !IsNil(o.TotalRecords) {
		return true
	}

	return false
}

// SetTotalRecords gets a reference to the given int32 and assigns it to the TotalRecords field.
func (o *DtoTaskResponse) SetTotalRecords(v int32) {
	o.TotalRecords = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *DtoTaskResponse) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *DtoTaskResponse) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTaskResponse) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *DtoTaskResponse) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *DtoTaskResponse) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

func (o DtoTaskResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoTaskResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompletedAt) {
		toSerialize["completed_at"] = o.CompletedAt
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !IsNil(o.EntityType) {
		toSerialize["entity_type"] = o.EntityType
	}
	if !IsNil(o.ErrorSummary) {
		toSerialize["error_summary"] = o.ErrorSummary
	}
	if !IsNil(o.FailedAt) {
		toSerialize["failed_at"] = o.FailedAt
	}
	if !IsNil(o.FailedRecords) {
		toSerialize["failed_records"] = o.FailedRecords
	}
	if !IsNil(o.FileName) {
		toSerialize["file_name"] = o.FileName
	}
	if !IsNil(o.FileType) {
		toSerialize["file_type"] = o.FileType
	}
	if !IsNil(o.FileUrl) {
		toSerialize["file_url"] = o.FileUrl
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.ProcessedRecords) {
		toSerialize["processed_records"] = o.ProcessedRecords
	}
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SuccessfulRecords) {
		toSerialize["successful_records"] = o.SuccessfulRecords
	}
	if !IsNil(o.TaskStatus) {
		toSerialize["task_status"] = o.TaskStatus
	}
	if !IsNil(o.TaskType) {
		toSerialize["task_type"] = o.TaskType
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenant_id"] = o.TenantId
	}
	if !IsNil(o.TotalRecords) {
		toSerialize["total_records"] = o.TotalRecords
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	return toSerialize, nil
}

type NullableDtoTaskResponse struct {
	value *DtoTaskResponse
	isSet bool
}

func (v NullableDtoTaskResponse) Get() *DtoTaskResponse {
	return v.value
}

func (v *NullableDtoTaskResponse) Set(val *DtoTaskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoTaskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoTaskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoTaskResponse(val *DtoTaskResponse) *NullableDtoTaskResponse {
	return &NullableDtoTaskResponse{value: val, isSet: true}
}

func (v NullableDtoTaskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoTaskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


