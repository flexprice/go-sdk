/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoListInvoicesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoListInvoicesResponse{}

// DtoListInvoicesResponse struct for DtoListInvoicesResponse
type DtoListInvoicesResponse struct {
	Items []DtoInvoiceResponse `json:"items,omitempty"`
	Pagination *TypesPaginationResponse `json:"pagination,omitempty"`
}

// NewDtoListInvoicesResponse instantiates a new DtoListInvoicesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoListInvoicesResponse() *DtoListInvoicesResponse {
	this := DtoListInvoicesResponse{}
	return &this
}

// NewDtoListInvoicesResponseWithDefaults instantiates a new DtoListInvoicesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoListInvoicesResponseWithDefaults() *DtoListInvoicesResponse {
	this := DtoListInvoicesResponse{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *DtoListInvoicesResponse) GetItems() []DtoInvoiceResponse {
	if o == nil || IsNil(o.Items) {
		var ret []DtoInvoiceResponse
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoListInvoicesResponse) GetItemsOk() ([]DtoInvoiceResponse, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *DtoListInvoicesResponse) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []DtoInvoiceResponse and assigns it to the Items field.
func (o *DtoListInvoicesResponse) SetItems(v []DtoInvoiceResponse) {
	o.Items = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *DtoListInvoicesResponse) GetPagination() TypesPaginationResponse {
	if o == nil || IsNil(o.Pagination) {
		var ret TypesPaginationResponse
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoListInvoicesResponse) GetPaginationOk() (*TypesPaginationResponse, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *DtoListInvoicesResponse) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given TypesPaginationResponse and assigns it to the Pagination field.
func (o *DtoListInvoicesResponse) SetPagination(v TypesPaginationResponse) {
	o.Pagination = &v
}

func (o DtoListInvoicesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoListInvoicesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	return toSerialize, nil
}

type NullableDtoListInvoicesResponse struct {
	value *DtoListInvoicesResponse
	isSet bool
}

func (v NullableDtoListInvoicesResponse) Get() *DtoListInvoicesResponse {
	return v.value
}

func (v *NullableDtoListInvoicesResponse) Set(val *DtoListInvoicesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoListInvoicesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoListInvoicesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoListInvoicesResponse(val *DtoListInvoicesResponse) *NullableDtoListInvoicesResponse {
	return &NullableDtoListInvoicesResponse{value: val, isSet: true}
}

func (v NullableDtoListInvoicesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoListInvoicesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


