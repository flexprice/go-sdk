/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"fmt"
)

// TypesPaymentStatus the model 'TypesPaymentStatus'
type TypesPaymentStatus string

// List of types.PaymentStatus
const (
	TYPESPAYMENTSTATUS_PaymentStatusPending TypesPaymentStatus = "PENDING"
	TYPESPAYMENTSTATUS_PaymentStatusProcessing TypesPaymentStatus = "PROCESSING"
	TYPESPAYMENTSTATUS_PaymentStatusSucceeded TypesPaymentStatus = "SUCCEEDED"
	TYPESPAYMENTSTATUS_PaymentStatusFailed TypesPaymentStatus = "FAILED"
	TYPESPAYMENTSTATUS_PaymentStatusRefunded TypesPaymentStatus = "REFUNDED"
	TYPESPAYMENTSTATUS_PaymentStatusPartiallyRefunded TypesPaymentStatus = "PARTIALLY_REFUNDED"
)

// All allowed values of TypesPaymentStatus enum
var AllowedTypesPaymentStatusEnumValues = []TypesPaymentStatus{
	"PENDING",
	"PROCESSING",
	"SUCCEEDED",
	"FAILED",
	"REFUNDED",
	"PARTIALLY_REFUNDED",
}

func (v *TypesPaymentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesPaymentStatus(value)
	for _, existing := range AllowedTypesPaymentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesPaymentStatus", value)
}

// NewTypesPaymentStatusFromValue returns a pointer to a valid TypesPaymentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesPaymentStatusFromValue(v string) (*TypesPaymentStatus, error) {
	ev := TypesPaymentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesPaymentStatus: valid values are %v", v, AllowedTypesPaymentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesPaymentStatus) IsValid() bool {
	for _, existing := range AllowedTypesPaymentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.PaymentStatus value
func (v TypesPaymentStatus) Ptr() *TypesPaymentStatus {
	return &v
}

type NullableTypesPaymentStatus struct {
	value *TypesPaymentStatus
	isSet bool
}

func (v NullableTypesPaymentStatus) Get() *TypesPaymentStatus {
	return v.value
}

func (v *NullableTypesPaymentStatus) Set(val *TypesPaymentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesPaymentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesPaymentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesPaymentStatus(val *TypesPaymentStatus) *NullableTypesPaymentStatus {
	return &NullableTypesPaymentStatus{value: val, isSet: true}
}

func (v NullableTypesPaymentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesPaymentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

