/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"fmt"
)

// TypesSubscriptionStatus the model 'TypesSubscriptionStatus'
type TypesSubscriptionStatus string

// List of types.SubscriptionStatus
const (
	TYPESSUBSCRIPTIONSTATUS_SubscriptionStatusActive TypesSubscriptionStatus = "active"
	TYPESSUBSCRIPTIONSTATUS_SubscriptionStatusPaused TypesSubscriptionStatus = "paused"
	TYPESSUBSCRIPTIONSTATUS_SubscriptionStatusCancelled TypesSubscriptionStatus = "cancelled"
	TYPESSUBSCRIPTIONSTATUS_SubscriptionStatusIncomplete TypesSubscriptionStatus = "incomplete"
	TYPESSUBSCRIPTIONSTATUS_SubscriptionStatusIncompleteExpired TypesSubscriptionStatus = "incomplete_expired"
	TYPESSUBSCRIPTIONSTATUS_SubscriptionStatusPastDue TypesSubscriptionStatus = "past_due"
	TYPESSUBSCRIPTIONSTATUS_SubscriptionStatusTrialing TypesSubscriptionStatus = "trialing"
	TYPESSUBSCRIPTIONSTATUS_SubscriptionStatusUnpaid TypesSubscriptionStatus = "unpaid"
)

// All allowed values of TypesSubscriptionStatus enum
var AllowedTypesSubscriptionStatusEnumValues = []TypesSubscriptionStatus{
	"active",
	"paused",
	"cancelled",
	"incomplete",
	"incomplete_expired",
	"past_due",
	"trialing",
	"unpaid",
}

func (v *TypesSubscriptionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesSubscriptionStatus(value)
	for _, existing := range AllowedTypesSubscriptionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesSubscriptionStatus", value)
}

// NewTypesSubscriptionStatusFromValue returns a pointer to a valid TypesSubscriptionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesSubscriptionStatusFromValue(v string) (*TypesSubscriptionStatus, error) {
	ev := TypesSubscriptionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesSubscriptionStatus: valid values are %v", v, AllowedTypesSubscriptionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesSubscriptionStatus) IsValid() bool {
	for _, existing := range AllowedTypesSubscriptionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.SubscriptionStatus value
func (v TypesSubscriptionStatus) Ptr() *TypesSubscriptionStatus {
	return &v
}

type NullableTypesSubscriptionStatus struct {
	value *TypesSubscriptionStatus
	isSet bool
}

func (v NullableTypesSubscriptionStatus) Get() *TypesSubscriptionStatus {
	return v.value
}

func (v *NullableTypesSubscriptionStatus) Set(val *TypesSubscriptionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesSubscriptionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesSubscriptionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesSubscriptionStatus(val *TypesSubscriptionStatus) *NullableTypesSubscriptionStatus {
	return &NullableTypesSubscriptionStatus{value: val, isSet: true}
}

func (v NullableTypesSubscriptionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesSubscriptionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

