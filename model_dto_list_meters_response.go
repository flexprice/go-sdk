/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoListMetersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoListMetersResponse{}

// DtoListMetersResponse struct for DtoListMetersResponse
type DtoListMetersResponse struct {
	Items []DtoMeterResponse `json:"items,omitempty"`
	Pagination *TypesPaginationResponse `json:"pagination,omitempty"`
}

// NewDtoListMetersResponse instantiates a new DtoListMetersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoListMetersResponse() *DtoListMetersResponse {
	this := DtoListMetersResponse{}
	return &this
}

// NewDtoListMetersResponseWithDefaults instantiates a new DtoListMetersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoListMetersResponseWithDefaults() *DtoListMetersResponse {
	this := DtoListMetersResponse{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *DtoListMetersResponse) GetItems() []DtoMeterResponse {
	if o == nil || IsNil(o.Items) {
		var ret []DtoMeterResponse
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoListMetersResponse) GetItemsOk() ([]DtoMeterResponse, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *DtoListMetersResponse) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []DtoMeterResponse and assigns it to the Items field.
func (o *DtoListMetersResponse) SetItems(v []DtoMeterResponse) {
	o.Items = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *DtoListMetersResponse) GetPagination() TypesPaginationResponse {
	if o == nil || IsNil(o.Pagination) {
		var ret TypesPaginationResponse
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoListMetersResponse) GetPaginationOk() (*TypesPaginationResponse, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *DtoListMetersResponse) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given TypesPaginationResponse and assigns it to the Pagination field.
func (o *DtoListMetersResponse) SetPagination(v TypesPaginationResponse) {
	o.Pagination = &v
}

func (o DtoListMetersResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoListMetersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	return toSerialize, nil
}

type NullableDtoListMetersResponse struct {
	value *DtoListMetersResponse
	isSet bool
}

func (v NullableDtoListMetersResponse) Get() *DtoListMetersResponse {
	return v.value
}

func (v *NullableDtoListMetersResponse) Set(val *DtoListMetersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoListMetersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoListMetersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoListMetersResponse(val *DtoListMetersResponse) *NullableDtoListMetersResponse {
	return &NullableDtoListMetersResponse{value: val, isSet: true}
}

func (v NullableDtoListMetersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoListMetersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


