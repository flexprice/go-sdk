/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoGetUsageAnalyticsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoGetUsageAnalyticsResponse{}

// DtoGetUsageAnalyticsResponse struct for DtoGetUsageAnalyticsResponse
type DtoGetUsageAnalyticsResponse struct {
	Currency *string `json:"currency,omitempty"`
	Items []DtoUsageAnalyticItem `json:"items,omitempty"`
	TotalCost *float32 `json:"total_cost,omitempty"`
}

// NewDtoGetUsageAnalyticsResponse instantiates a new DtoGetUsageAnalyticsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoGetUsageAnalyticsResponse() *DtoGetUsageAnalyticsResponse {
	this := DtoGetUsageAnalyticsResponse{}
	return &this
}

// NewDtoGetUsageAnalyticsResponseWithDefaults instantiates a new DtoGetUsageAnalyticsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoGetUsageAnalyticsResponseWithDefaults() *DtoGetUsageAnalyticsResponse {
	this := DtoGetUsageAnalyticsResponse{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *DtoGetUsageAnalyticsResponse) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageAnalyticsResponse) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *DtoGetUsageAnalyticsResponse) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *DtoGetUsageAnalyticsResponse) SetCurrency(v string) {
	o.Currency = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *DtoGetUsageAnalyticsResponse) GetItems() []DtoUsageAnalyticItem {
	if o == nil || IsNil(o.Items) {
		var ret []DtoUsageAnalyticItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageAnalyticsResponse) GetItemsOk() ([]DtoUsageAnalyticItem, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *DtoGetUsageAnalyticsResponse) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []DtoUsageAnalyticItem and assigns it to the Items field.
func (o *DtoGetUsageAnalyticsResponse) SetItems(v []DtoUsageAnalyticItem) {
	o.Items = v
}

// GetTotalCost returns the TotalCost field value if set, zero value otherwise.
func (o *DtoGetUsageAnalyticsResponse) GetTotalCost() float32 {
	if o == nil || IsNil(o.TotalCost) {
		var ret float32
		return ret
	}
	return *o.TotalCost
}

// GetTotalCostOk returns a tuple with the TotalCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageAnalyticsResponse) GetTotalCostOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalCost) {
		return nil, false
	}
	return o.TotalCost, true
}

// HasTotalCost returns a boolean if a field has been set.
func (o *DtoGetUsageAnalyticsResponse) HasTotalCost() bool {
	if o != nil && !IsNil(o.TotalCost) {
		return true
	}

	return false
}

// SetTotalCost gets a reference to the given float32 and assigns it to the TotalCost field.
func (o *DtoGetUsageAnalyticsResponse) SetTotalCost(v float32) {
	o.TotalCost = &v
}

func (o DtoGetUsageAnalyticsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoGetUsageAnalyticsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.TotalCost) {
		toSerialize["total_cost"] = o.TotalCost
	}
	return toSerialize, nil
}

type NullableDtoGetUsageAnalyticsResponse struct {
	value *DtoGetUsageAnalyticsResponse
	isSet bool
}

func (v NullableDtoGetUsageAnalyticsResponse) Get() *DtoGetUsageAnalyticsResponse {
	return v.value
}

func (v *NullableDtoGetUsageAnalyticsResponse) Set(val *DtoGetUsageAnalyticsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoGetUsageAnalyticsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoGetUsageAnalyticsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoGetUsageAnalyticsResponse(val *DtoGetUsageAnalyticsResponse) *NullableDtoGetUsageAnalyticsResponse {
	return &NullableDtoGetUsageAnalyticsResponse{value: val, isSet: true}
}

func (v NullableDtoGetUsageAnalyticsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoGetUsageAnalyticsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


