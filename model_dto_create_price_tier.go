/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DtoCreatePriceTier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoCreatePriceTier{}

// DtoCreatePriceTier struct for DtoCreatePriceTier
type DtoCreatePriceTier struct {
	FlatAmount *string `json:"flat_amount,omitempty"`
	UnitAmount string `json:"unit_amount"`
	UpTo *int32 `json:"up_to,omitempty"`
}

type _DtoCreatePriceTier DtoCreatePriceTier

// NewDtoCreatePriceTier instantiates a new DtoCreatePriceTier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoCreatePriceTier(unitAmount string) *DtoCreatePriceTier {
	this := DtoCreatePriceTier{}
	this.UnitAmount = unitAmount
	return &this
}

// NewDtoCreatePriceTierWithDefaults instantiates a new DtoCreatePriceTier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoCreatePriceTierWithDefaults() *DtoCreatePriceTier {
	this := DtoCreatePriceTier{}
	return &this
}

// GetFlatAmount returns the FlatAmount field value if set, zero value otherwise.
func (o *DtoCreatePriceTier) GetFlatAmount() string {
	if o == nil || IsNil(o.FlatAmount) {
		var ret string
		return ret
	}
	return *o.FlatAmount
}

// GetFlatAmountOk returns a tuple with the FlatAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCreatePriceTier) GetFlatAmountOk() (*string, bool) {
	if o == nil || IsNil(o.FlatAmount) {
		return nil, false
	}
	return o.FlatAmount, true
}

// HasFlatAmount returns a boolean if a field has been set.
func (o *DtoCreatePriceTier) HasFlatAmount() bool {
	if o != nil && !IsNil(o.FlatAmount) {
		return true
	}

	return false
}

// SetFlatAmount gets a reference to the given string and assigns it to the FlatAmount field.
func (o *DtoCreatePriceTier) SetFlatAmount(v string) {
	o.FlatAmount = &v
}

// GetUnitAmount returns the UnitAmount field value
func (o *DtoCreatePriceTier) GetUnitAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnitAmount
}

// GetUnitAmountOk returns a tuple with the UnitAmount field value
// and a boolean to check if the value has been set.
func (o *DtoCreatePriceTier) GetUnitAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitAmount, true
}

// SetUnitAmount sets field value
func (o *DtoCreatePriceTier) SetUnitAmount(v string) {
	o.UnitAmount = v
}

// GetUpTo returns the UpTo field value if set, zero value otherwise.
func (o *DtoCreatePriceTier) GetUpTo() int32 {
	if o == nil || IsNil(o.UpTo) {
		var ret int32
		return ret
	}
	return *o.UpTo
}

// GetUpToOk returns a tuple with the UpTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCreatePriceTier) GetUpToOk() (*int32, bool) {
	if o == nil || IsNil(o.UpTo) {
		return nil, false
	}
	return o.UpTo, true
}

// HasUpTo returns a boolean if a field has been set.
func (o *DtoCreatePriceTier) HasUpTo() bool {
	if o != nil && !IsNil(o.UpTo) {
		return true
	}

	return false
}

// SetUpTo gets a reference to the given int32 and assigns it to the UpTo field.
func (o *DtoCreatePriceTier) SetUpTo(v int32) {
	o.UpTo = &v
}

func (o DtoCreatePriceTier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoCreatePriceTier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FlatAmount) {
		toSerialize["flat_amount"] = o.FlatAmount
	}
	toSerialize["unit_amount"] = o.UnitAmount
	if !IsNil(o.UpTo) {
		toSerialize["up_to"] = o.UpTo
	}
	return toSerialize, nil
}

func (o *DtoCreatePriceTier) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unit_amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtoCreatePriceTier := _DtoCreatePriceTier{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtoCreatePriceTier)

	if err != nil {
		return err
	}

	*o = DtoCreatePriceTier(varDtoCreatePriceTier)

	return err
}

type NullableDtoCreatePriceTier struct {
	value *DtoCreatePriceTier
	isSet bool
}

func (v NullableDtoCreatePriceTier) Get() *DtoCreatePriceTier {
	return v.value
}

func (v *NullableDtoCreatePriceTier) Set(val *DtoCreatePriceTier) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoCreatePriceTier) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoCreatePriceTier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoCreatePriceTier(val *DtoCreatePriceTier) *NullableDtoCreatePriceTier {
	return &NullableDtoCreatePriceTier{value: val, isSet: true}
}

func (v NullableDtoCreatePriceTier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoCreatePriceTier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


