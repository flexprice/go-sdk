/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DtoTopUpWalletRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoTopUpWalletRequest{}

// DtoTopUpWalletRequest struct for DtoTopUpWalletRequest
type DtoTopUpWalletRequest struct {
	// amount is the amount in the currency of the wallet to be added NOTE: this is not the number of credits to add, but the amount in the currency amount = credits_to_add * conversion_rate if both amount and credits_to_add are provided, amount will be ignored ex if the wallet has a conversion_rate of 2 then adding an amount of 10 USD in the wallet wil add 5 credits in the wallet
	Amount *float32 `json:"amount,omitempty"`
	// credits_to_add is the number of credits to add to the wallet
	CreditsToAdd *float32 `json:"credits_to_add,omitempty"`
	// description to add any specific details about the transaction
	Description *string `json:"description,omitempty"`
	// expiry_date_utc is the expiry date in UTC timezone ex 2025-01-01 00:00:00 UTC
	ExpiryDateUtc *string `json:"expiry_date_utc,omitempty"`
	// idempotency_key is a unique key for the transaction
	IdempotencyKey string `json:"idempotency_key"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	TransactionReason TypesTransactionReason `json:"transaction_reason"`
}

type _DtoTopUpWalletRequest DtoTopUpWalletRequest

// NewDtoTopUpWalletRequest instantiates a new DtoTopUpWalletRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoTopUpWalletRequest(idempotencyKey string, transactionReason TypesTransactionReason) *DtoTopUpWalletRequest {
	this := DtoTopUpWalletRequest{}
	this.IdempotencyKey = idempotencyKey
	this.TransactionReason = transactionReason
	return &this
}

// NewDtoTopUpWalletRequestWithDefaults instantiates a new DtoTopUpWalletRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoTopUpWalletRequestWithDefaults() *DtoTopUpWalletRequest {
	this := DtoTopUpWalletRequest{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *DtoTopUpWalletRequest) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTopUpWalletRequest) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *DtoTopUpWalletRequest) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *DtoTopUpWalletRequest) SetAmount(v float32) {
	o.Amount = &v
}

// GetCreditsToAdd returns the CreditsToAdd field value if set, zero value otherwise.
func (o *DtoTopUpWalletRequest) GetCreditsToAdd() float32 {
	if o == nil || IsNil(o.CreditsToAdd) {
		var ret float32
		return ret
	}
	return *o.CreditsToAdd
}

// GetCreditsToAddOk returns a tuple with the CreditsToAdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTopUpWalletRequest) GetCreditsToAddOk() (*float32, bool) {
	if o == nil || IsNil(o.CreditsToAdd) {
		return nil, false
	}
	return o.CreditsToAdd, true
}

// HasCreditsToAdd returns a boolean if a field has been set.
func (o *DtoTopUpWalletRequest) HasCreditsToAdd() bool {
	if o != nil && !IsNil(o.CreditsToAdd) {
		return true
	}

	return false
}

// SetCreditsToAdd gets a reference to the given float32 and assigns it to the CreditsToAdd field.
func (o *DtoTopUpWalletRequest) SetCreditsToAdd(v float32) {
	o.CreditsToAdd = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DtoTopUpWalletRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTopUpWalletRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DtoTopUpWalletRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DtoTopUpWalletRequest) SetDescription(v string) {
	o.Description = &v
}

// GetExpiryDateUtc returns the ExpiryDateUtc field value if set, zero value otherwise.
func (o *DtoTopUpWalletRequest) GetExpiryDateUtc() string {
	if o == nil || IsNil(o.ExpiryDateUtc) {
		var ret string
		return ret
	}
	return *o.ExpiryDateUtc
}

// GetExpiryDateUtcOk returns a tuple with the ExpiryDateUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTopUpWalletRequest) GetExpiryDateUtcOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiryDateUtc) {
		return nil, false
	}
	return o.ExpiryDateUtc, true
}

// HasExpiryDateUtc returns a boolean if a field has been set.
func (o *DtoTopUpWalletRequest) HasExpiryDateUtc() bool {
	if o != nil && !IsNil(o.ExpiryDateUtc) {
		return true
	}

	return false
}

// SetExpiryDateUtc gets a reference to the given string and assigns it to the ExpiryDateUtc field.
func (o *DtoTopUpWalletRequest) SetExpiryDateUtc(v string) {
	o.ExpiryDateUtc = &v
}

// GetIdempotencyKey returns the IdempotencyKey field value
func (o *DtoTopUpWalletRequest) GetIdempotencyKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdempotencyKey
}

// GetIdempotencyKeyOk returns a tuple with the IdempotencyKey field value
// and a boolean to check if the value has been set.
func (o *DtoTopUpWalletRequest) GetIdempotencyKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdempotencyKey, true
}

// SetIdempotencyKey sets field value
func (o *DtoTopUpWalletRequest) SetIdempotencyKey(v string) {
	o.IdempotencyKey = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DtoTopUpWalletRequest) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTopUpWalletRequest) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DtoTopUpWalletRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *DtoTopUpWalletRequest) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetTransactionReason returns the TransactionReason field value
func (o *DtoTopUpWalletRequest) GetTransactionReason() TypesTransactionReason {
	if o == nil {
		var ret TypesTransactionReason
		return ret
	}

	return o.TransactionReason
}

// GetTransactionReasonOk returns a tuple with the TransactionReason field value
// and a boolean to check if the value has been set.
func (o *DtoTopUpWalletRequest) GetTransactionReasonOk() (*TypesTransactionReason, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionReason, true
}

// SetTransactionReason sets field value
func (o *DtoTopUpWalletRequest) SetTransactionReason(v TypesTransactionReason) {
	o.TransactionReason = v
}

func (o DtoTopUpWalletRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoTopUpWalletRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.CreditsToAdd) {
		toSerialize["credits_to_add"] = o.CreditsToAdd
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExpiryDateUtc) {
		toSerialize["expiry_date_utc"] = o.ExpiryDateUtc
	}
	toSerialize["idempotency_key"] = o.IdempotencyKey
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["transaction_reason"] = o.TransactionReason
	return toSerialize, nil
}

func (o *DtoTopUpWalletRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"idempotency_key",
		"transaction_reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtoTopUpWalletRequest := _DtoTopUpWalletRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtoTopUpWalletRequest)

	if err != nil {
		return err
	}

	*o = DtoTopUpWalletRequest(varDtoTopUpWalletRequest)

	return err
}

type NullableDtoTopUpWalletRequest struct {
	value *DtoTopUpWalletRequest
	isSet bool
}

func (v NullableDtoTopUpWalletRequest) Get() *DtoTopUpWalletRequest {
	return v.value
}

func (v *NullableDtoTopUpWalletRequest) Set(val *DtoTopUpWalletRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoTopUpWalletRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoTopUpWalletRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoTopUpWalletRequest(val *DtoTopUpWalletRequest) *NullableDtoTopUpWalletRequest {
	return &NullableDtoTopUpWalletRequest{value: val, isSet: true}
}

func (v NullableDtoTopUpWalletRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoTopUpWalletRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


