/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the TypesFilterCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesFilterCondition{}

// TypesFilterCondition struct for TypesFilterCondition
type TypesFilterCondition struct {
	DataType *TypesDataType `json:"data_type,omitempty"`
	Field *string `json:"field,omitempty"`
	Operator *TypesFilterOperatorType `json:"operator,omitempty"`
	Value *GithubComFlexpriceFlexpriceInternalTypesValue `json:"value,omitempty"`
}

// NewTypesFilterCondition instantiates a new TypesFilterCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesFilterCondition() *TypesFilterCondition {
	this := TypesFilterCondition{}
	return &this
}

// NewTypesFilterConditionWithDefaults instantiates a new TypesFilterCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesFilterConditionWithDefaults() *TypesFilterCondition {
	this := TypesFilterCondition{}
	return &this
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *TypesFilterCondition) GetDataType() TypesDataType {
	if o == nil || IsNil(o.DataType) {
		var ret TypesDataType
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFilterCondition) GetDataTypeOk() (*TypesDataType, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *TypesFilterCondition) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given TypesDataType and assigns it to the DataType field.
func (o *TypesFilterCondition) SetDataType(v TypesDataType) {
	o.DataType = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *TypesFilterCondition) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFilterCondition) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *TypesFilterCondition) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *TypesFilterCondition) SetField(v string) {
	o.Field = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *TypesFilterCondition) GetOperator() TypesFilterOperatorType {
	if o == nil || IsNil(o.Operator) {
		var ret TypesFilterOperatorType
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFilterCondition) GetOperatorOk() (*TypesFilterOperatorType, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *TypesFilterCondition) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given TypesFilterOperatorType and assigns it to the Operator field.
func (o *TypesFilterCondition) SetOperator(v TypesFilterOperatorType) {
	o.Operator = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TypesFilterCondition) GetValue() GithubComFlexpriceFlexpriceInternalTypesValue {
	if o == nil || IsNil(o.Value) {
		var ret GithubComFlexpriceFlexpriceInternalTypesValue
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFilterCondition) GetValueOk() (*GithubComFlexpriceFlexpriceInternalTypesValue, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TypesFilterCondition) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given GithubComFlexpriceFlexpriceInternalTypesValue and assigns it to the Value field.
func (o *TypesFilterCondition) SetValue(v GithubComFlexpriceFlexpriceInternalTypesValue) {
	o.Value = &v
}

func (o TypesFilterCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesFilterCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataType) {
		toSerialize["data_type"] = o.DataType
	}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableTypesFilterCondition struct {
	value *TypesFilterCondition
	isSet bool
}

func (v NullableTypesFilterCondition) Get() *TypesFilterCondition {
	return v.value
}

func (v *NullableTypesFilterCondition) Set(val *TypesFilterCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesFilterCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesFilterCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesFilterCondition(val *TypesFilterCondition) *NullableTypesFilterCondition {
	return &NullableTypesFilterCondition{value: val, isSet: true}
}

func (v NullableTypesFilterCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesFilterCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


