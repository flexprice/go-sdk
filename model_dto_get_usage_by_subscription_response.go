/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
)

// checks if the DtoGetUsageBySubscriptionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoGetUsageBySubscriptionResponse{}

// DtoGetUsageBySubscriptionResponse struct for DtoGetUsageBySubscriptionResponse
type DtoGetUsageBySubscriptionResponse struct {
	Amount *float32 `json:"amount,omitempty"`
	Charges []DtoSubscriptionUsageByMetersResponse `json:"charges,omitempty"`
	Currency *string `json:"currency,omitempty"`
	DisplayAmount *string `json:"display_amount,omitempty"`
	EndTime *string `json:"end_time,omitempty"`
	StartTime *string `json:"start_time,omitempty"`
}

// NewDtoGetUsageBySubscriptionResponse instantiates a new DtoGetUsageBySubscriptionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoGetUsageBySubscriptionResponse() *DtoGetUsageBySubscriptionResponse {
	this := DtoGetUsageBySubscriptionResponse{}
	return &this
}

// NewDtoGetUsageBySubscriptionResponseWithDefaults instantiates a new DtoGetUsageBySubscriptionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoGetUsageBySubscriptionResponseWithDefaults() *DtoGetUsageBySubscriptionResponse {
	this := DtoGetUsageBySubscriptionResponse{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *DtoGetUsageBySubscriptionResponse) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageBySubscriptionResponse) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *DtoGetUsageBySubscriptionResponse) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *DtoGetUsageBySubscriptionResponse) SetAmount(v float32) {
	o.Amount = &v
}

// GetCharges returns the Charges field value if set, zero value otherwise.
func (o *DtoGetUsageBySubscriptionResponse) GetCharges() []DtoSubscriptionUsageByMetersResponse {
	if o == nil || IsNil(o.Charges) {
		var ret []DtoSubscriptionUsageByMetersResponse
		return ret
	}
	return o.Charges
}

// GetChargesOk returns a tuple with the Charges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageBySubscriptionResponse) GetChargesOk() ([]DtoSubscriptionUsageByMetersResponse, bool) {
	if o == nil || IsNil(o.Charges) {
		return nil, false
	}
	return o.Charges, true
}

// HasCharges returns a boolean if a field has been set.
func (o *DtoGetUsageBySubscriptionResponse) HasCharges() bool {
	if o != nil && !IsNil(o.Charges) {
		return true
	}

	return false
}

// SetCharges gets a reference to the given []DtoSubscriptionUsageByMetersResponse and assigns it to the Charges field.
func (o *DtoGetUsageBySubscriptionResponse) SetCharges(v []DtoSubscriptionUsageByMetersResponse) {
	o.Charges = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *DtoGetUsageBySubscriptionResponse) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageBySubscriptionResponse) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *DtoGetUsageBySubscriptionResponse) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *DtoGetUsageBySubscriptionResponse) SetCurrency(v string) {
	o.Currency = &v
}

// GetDisplayAmount returns the DisplayAmount field value if set, zero value otherwise.
func (o *DtoGetUsageBySubscriptionResponse) GetDisplayAmount() string {
	if o == nil || IsNil(o.DisplayAmount) {
		var ret string
		return ret
	}
	return *o.DisplayAmount
}

// GetDisplayAmountOk returns a tuple with the DisplayAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageBySubscriptionResponse) GetDisplayAmountOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayAmount) {
		return nil, false
	}
	return o.DisplayAmount, true
}

// HasDisplayAmount returns a boolean if a field has been set.
func (o *DtoGetUsageBySubscriptionResponse) HasDisplayAmount() bool {
	if o != nil && !IsNil(o.DisplayAmount) {
		return true
	}

	return false
}

// SetDisplayAmount gets a reference to the given string and assigns it to the DisplayAmount field.
func (o *DtoGetUsageBySubscriptionResponse) SetDisplayAmount(v string) {
	o.DisplayAmount = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *DtoGetUsageBySubscriptionResponse) GetEndTime() string {
	if o == nil || IsNil(o.EndTime) {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageBySubscriptionResponse) GetEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *DtoGetUsageBySubscriptionResponse) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *DtoGetUsageBySubscriptionResponse) SetEndTime(v string) {
	o.EndTime = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *DtoGetUsageBySubscriptionResponse) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageBySubscriptionResponse) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *DtoGetUsageBySubscriptionResponse) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *DtoGetUsageBySubscriptionResponse) SetStartTime(v string) {
	o.StartTime = &v
}

func (o DtoGetUsageBySubscriptionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoGetUsageBySubscriptionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Charges) {
		toSerialize["charges"] = o.Charges
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.DisplayAmount) {
		toSerialize["display_amount"] = o.DisplayAmount
	}
	if !IsNil(o.EndTime) {
		toSerialize["end_time"] = o.EndTime
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	return toSerialize, nil
}

type NullableDtoGetUsageBySubscriptionResponse struct {
	value *DtoGetUsageBySubscriptionResponse
	isSet bool
}

func (v NullableDtoGetUsageBySubscriptionResponse) Get() *DtoGetUsageBySubscriptionResponse {
	return v.value
}

func (v *NullableDtoGetUsageBySubscriptionResponse) Set(val *DtoGetUsageBySubscriptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoGetUsageBySubscriptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoGetUsageBySubscriptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoGetUsageBySubscriptionResponse(val *DtoGetUsageBySubscriptionResponse) *NullableDtoGetUsageBySubscriptionResponse {
	return &NullableDtoGetUsageBySubscriptionResponse{value: val, isSet: true}
}

func (v NullableDtoGetUsageBySubscriptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoGetUsageBySubscriptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


