/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DtoIngestEventRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoIngestEventRequest{}

// DtoIngestEventRequest struct for DtoIngestEventRequest
type DtoIngestEventRequest struct {
	CustomerId *string `json:"customer_id,omitempty"`
	EventId *string `json:"event_id,omitempty"`
	EventName string `json:"event_name"`
	ExternalCustomerId string `json:"external_customer_id"`
	// Handled separately for dynamic columns
	Properties *map[string]string `json:"properties,omitempty"`
	Source *string `json:"source,omitempty"`
	// Handled separately due to parsing
	Timestamp *string `json:"timestamp,omitempty"`
}

type _DtoIngestEventRequest DtoIngestEventRequest

// NewDtoIngestEventRequest instantiates a new DtoIngestEventRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoIngestEventRequest(eventName string, externalCustomerId string) *DtoIngestEventRequest {
	this := DtoIngestEventRequest{}
	this.EventName = eventName
	this.ExternalCustomerId = externalCustomerId
	return &this
}

// NewDtoIngestEventRequestWithDefaults instantiates a new DtoIngestEventRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoIngestEventRequestWithDefaults() *DtoIngestEventRequest {
	this := DtoIngestEventRequest{}
	return &this
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *DtoIngestEventRequest) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoIngestEventRequest) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *DtoIngestEventRequest) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *DtoIngestEventRequest) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *DtoIngestEventRequest) GetEventId() string {
	if o == nil || IsNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoIngestEventRequest) GetEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *DtoIngestEventRequest) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *DtoIngestEventRequest) SetEventId(v string) {
	o.EventId = &v
}

// GetEventName returns the EventName field value
func (o *DtoIngestEventRequest) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *DtoIngestEventRequest) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *DtoIngestEventRequest) SetEventName(v string) {
	o.EventName = v
}

// GetExternalCustomerId returns the ExternalCustomerId field value
func (o *DtoIngestEventRequest) GetExternalCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalCustomerId
}

// GetExternalCustomerIdOk returns a tuple with the ExternalCustomerId field value
// and a boolean to check if the value has been set.
func (o *DtoIngestEventRequest) GetExternalCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalCustomerId, true
}

// SetExternalCustomerId sets field value
func (o *DtoIngestEventRequest) SetExternalCustomerId(v string) {
	o.ExternalCustomerId = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *DtoIngestEventRequest) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoIngestEventRequest) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *DtoIngestEventRequest) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *DtoIngestEventRequest) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *DtoIngestEventRequest) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoIngestEventRequest) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *DtoIngestEventRequest) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *DtoIngestEventRequest) SetSource(v string) {
	o.Source = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *DtoIngestEventRequest) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoIngestEventRequest) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *DtoIngestEventRequest) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *DtoIngestEventRequest) SetTimestamp(v string) {
	o.Timestamp = &v
}

func (o DtoIngestEventRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoIngestEventRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomerId) {
		toSerialize["customer_id"] = o.CustomerId
	}
	if !IsNil(o.EventId) {
		toSerialize["event_id"] = o.EventId
	}
	toSerialize["event_name"] = o.EventName
	toSerialize["external_customer_id"] = o.ExternalCustomerId
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

func (o *DtoIngestEventRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_name",
		"external_customer_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtoIngestEventRequest := _DtoIngestEventRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtoIngestEventRequest)

	if err != nil {
		return err
	}

	*o = DtoIngestEventRequest(varDtoIngestEventRequest)

	return err
}

type NullableDtoIngestEventRequest struct {
	value *DtoIngestEventRequest
	isSet bool
}

func (v NullableDtoIngestEventRequest) Get() *DtoIngestEventRequest {
	return v.value
}

func (v *NullableDtoIngestEventRequest) Set(val *DtoIngestEventRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoIngestEventRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoIngestEventRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoIngestEventRequest(val *DtoIngestEventRequest) *NullableDtoIngestEventRequest {
	return &NullableDtoIngestEventRequest{value: val, isSet: true}
}

func (v NullableDtoIngestEventRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoIngestEventRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


