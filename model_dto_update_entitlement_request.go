/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoUpdateEntitlementRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoUpdateEntitlementRequest{}

// DtoUpdateEntitlementRequest struct for DtoUpdateEntitlementRequest
type DtoUpdateEntitlementRequest struct {
	IsEnabled *bool `json:"is_enabled,omitempty"`
	IsSoftLimit *bool `json:"is_soft_limit,omitempty"`
	StaticValue *string `json:"static_value,omitempty"`
	UsageLimit *int32 `json:"usage_limit,omitempty"`
	UsageResetPeriod *TypesBillingPeriod `json:"usage_reset_period,omitempty"`
}

// NewDtoUpdateEntitlementRequest instantiates a new DtoUpdateEntitlementRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoUpdateEntitlementRequest() *DtoUpdateEntitlementRequest {
	this := DtoUpdateEntitlementRequest{}
	return &this
}

// NewDtoUpdateEntitlementRequestWithDefaults instantiates a new DtoUpdateEntitlementRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoUpdateEntitlementRequestWithDefaults() *DtoUpdateEntitlementRequest {
	this := DtoUpdateEntitlementRequest{}
	return &this
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *DtoUpdateEntitlementRequest) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdateEntitlementRequest) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *DtoUpdateEntitlementRequest) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *DtoUpdateEntitlementRequest) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetIsSoftLimit returns the IsSoftLimit field value if set, zero value otherwise.
func (o *DtoUpdateEntitlementRequest) GetIsSoftLimit() bool {
	if o == nil || IsNil(o.IsSoftLimit) {
		var ret bool
		return ret
	}
	return *o.IsSoftLimit
}

// GetIsSoftLimitOk returns a tuple with the IsSoftLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdateEntitlementRequest) GetIsSoftLimitOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSoftLimit) {
		return nil, false
	}
	return o.IsSoftLimit, true
}

// HasIsSoftLimit returns a boolean if a field has been set.
func (o *DtoUpdateEntitlementRequest) HasIsSoftLimit() bool {
	if o != nil && !IsNil(o.IsSoftLimit) {
		return true
	}

	return false
}

// SetIsSoftLimit gets a reference to the given bool and assigns it to the IsSoftLimit field.
func (o *DtoUpdateEntitlementRequest) SetIsSoftLimit(v bool) {
	o.IsSoftLimit = &v
}

// GetStaticValue returns the StaticValue field value if set, zero value otherwise.
func (o *DtoUpdateEntitlementRequest) GetStaticValue() string {
	if o == nil || IsNil(o.StaticValue) {
		var ret string
		return ret
	}
	return *o.StaticValue
}

// GetStaticValueOk returns a tuple with the StaticValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdateEntitlementRequest) GetStaticValueOk() (*string, bool) {
	if o == nil || IsNil(o.StaticValue) {
		return nil, false
	}
	return o.StaticValue, true
}

// HasStaticValue returns a boolean if a field has been set.
func (o *DtoUpdateEntitlementRequest) HasStaticValue() bool {
	if o != nil && !IsNil(o.StaticValue) {
		return true
	}

	return false
}

// SetStaticValue gets a reference to the given string and assigns it to the StaticValue field.
func (o *DtoUpdateEntitlementRequest) SetStaticValue(v string) {
	o.StaticValue = &v
}

// GetUsageLimit returns the UsageLimit field value if set, zero value otherwise.
func (o *DtoUpdateEntitlementRequest) GetUsageLimit() int32 {
	if o == nil || IsNil(o.UsageLimit) {
		var ret int32
		return ret
	}
	return *o.UsageLimit
}

// GetUsageLimitOk returns a tuple with the UsageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdateEntitlementRequest) GetUsageLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.UsageLimit) {
		return nil, false
	}
	return o.UsageLimit, true
}

// HasUsageLimit returns a boolean if a field has been set.
func (o *DtoUpdateEntitlementRequest) HasUsageLimit() bool {
	if o != nil && !IsNil(o.UsageLimit) {
		return true
	}

	return false
}

// SetUsageLimit gets a reference to the given int32 and assigns it to the UsageLimit field.
func (o *DtoUpdateEntitlementRequest) SetUsageLimit(v int32) {
	o.UsageLimit = &v
}

// GetUsageResetPeriod returns the UsageResetPeriod field value if set, zero value otherwise.
func (o *DtoUpdateEntitlementRequest) GetUsageResetPeriod() TypesBillingPeriod {
	if o == nil || IsNil(o.UsageResetPeriod) {
		var ret TypesBillingPeriod
		return ret
	}
	return *o.UsageResetPeriod
}

// GetUsageResetPeriodOk returns a tuple with the UsageResetPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdateEntitlementRequest) GetUsageResetPeriodOk() (*TypesBillingPeriod, bool) {
	if o == nil || IsNil(o.UsageResetPeriod) {
		return nil, false
	}
	return o.UsageResetPeriod, true
}

// HasUsageResetPeriod returns a boolean if a field has been set.
func (o *DtoUpdateEntitlementRequest) HasUsageResetPeriod() bool {
	if o != nil && !IsNil(o.UsageResetPeriod) {
		return true
	}

	return false
}

// SetUsageResetPeriod gets a reference to the given TypesBillingPeriod and assigns it to the UsageResetPeriod field.
func (o *DtoUpdateEntitlementRequest) SetUsageResetPeriod(v TypesBillingPeriod) {
	o.UsageResetPeriod = &v
}

func (o DtoUpdateEntitlementRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoUpdateEntitlementRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsEnabled) {
		toSerialize["is_enabled"] = o.IsEnabled
	}
	if !IsNil(o.IsSoftLimit) {
		toSerialize["is_soft_limit"] = o.IsSoftLimit
	}
	if !IsNil(o.StaticValue) {
		toSerialize["static_value"] = o.StaticValue
	}
	if !IsNil(o.UsageLimit) {
		toSerialize["usage_limit"] = o.UsageLimit
	}
	if !IsNil(o.UsageResetPeriod) {
		toSerialize["usage_reset_period"] = o.UsageResetPeriod
	}
	return toSerialize, nil
}

type NullableDtoUpdateEntitlementRequest struct {
	value *DtoUpdateEntitlementRequest
	isSet bool
}

func (v NullableDtoUpdateEntitlementRequest) Get() *DtoUpdateEntitlementRequest {
	return v.value
}

func (v *NullableDtoUpdateEntitlementRequest) Set(val *DtoUpdateEntitlementRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoUpdateEntitlementRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoUpdateEntitlementRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoUpdateEntitlementRequest(val *DtoUpdateEntitlementRequest) *NullableDtoUpdateEntitlementRequest {
	return &NullableDtoUpdateEntitlementRequest{value: val, isSet: true}
}

func (v NullableDtoUpdateEntitlementRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoUpdateEntitlementRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


