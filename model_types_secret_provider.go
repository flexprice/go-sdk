/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"fmt"
)

// TypesSecretProvider the model 'TypesSecretProvider'
type TypesSecretProvider string

// List of types.SecretProvider
const (
	TYPESSECRETPROVIDER_SecretProviderFlexPrice TypesSecretProvider = "flexprice"
	TYPESSECRETPROVIDER_SecretProviderStripe TypesSecretProvider = "stripe"
	TYPESSECRETPROVIDER_SecretProviderRazorpay TypesSecretProvider = "razorpay"
)

// All allowed values of TypesSecretProvider enum
var AllowedTypesSecretProviderEnumValues = []TypesSecretProvider{
	"flexprice",
	"stripe",
	"razorpay",
}

func (v *TypesSecretProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesSecretProvider(value)
	for _, existing := range AllowedTypesSecretProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesSecretProvider", value)
}

// NewTypesSecretProviderFromValue returns a pointer to a valid TypesSecretProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesSecretProviderFromValue(v string) (*TypesSecretProvider, error) {
	ev := TypesSecretProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesSecretProvider: valid values are %v", v, AllowedTypesSecretProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesSecretProvider) IsValid() bool {
	for _, existing := range AllowedTypesSecretProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.SecretProvider value
func (v TypesSecretProvider) Ptr() *TypesSecretProvider {
	return &v
}

type NullableTypesSecretProvider struct {
	value *TypesSecretProvider
	isSet bool
}

func (v NullableTypesSecretProvider) Get() *TypesSecretProvider {
	return v.value
}

func (v *NullableTypesSecretProvider) Set(val *TypesSecretProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesSecretProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesSecretProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesSecretProvider(val *TypesSecretProvider) *NullableTypesSecretProvider {
	return &NullableTypesSecretProvider{value: val, isSet: true}
}

func (v NullableTypesSecretProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesSecretProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

