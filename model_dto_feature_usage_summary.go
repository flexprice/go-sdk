/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoFeatureUsageSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoFeatureUsageSummary{}

// DtoFeatureUsageSummary struct for DtoFeatureUsageSummary
type DtoFeatureUsageSummary struct {
	CurrentUsage *float32 `json:"current_usage,omitempty"`
	Feature *DtoFeatureResponse `json:"feature,omitempty"`
	IsEnabled *bool `json:"is_enabled,omitempty"`
	IsSoftLimit *bool `json:"is_soft_limit,omitempty"`
	Sources []DtoEntitlementSource `json:"sources,omitempty"`
	TotalLimit *int32 `json:"total_limit,omitempty"`
	UsagePercent *float32 `json:"usage_percent,omitempty"`
}

// NewDtoFeatureUsageSummary instantiates a new DtoFeatureUsageSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoFeatureUsageSummary() *DtoFeatureUsageSummary {
	this := DtoFeatureUsageSummary{}
	return &this
}

// NewDtoFeatureUsageSummaryWithDefaults instantiates a new DtoFeatureUsageSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoFeatureUsageSummaryWithDefaults() *DtoFeatureUsageSummary {
	this := DtoFeatureUsageSummary{}
	return &this
}

// GetCurrentUsage returns the CurrentUsage field value if set, zero value otherwise.
func (o *DtoFeatureUsageSummary) GetCurrentUsage() float32 {
	if o == nil || IsNil(o.CurrentUsage) {
		var ret float32
		return ret
	}
	return *o.CurrentUsage
}

// GetCurrentUsageOk returns a tuple with the CurrentUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureUsageSummary) GetCurrentUsageOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentUsage) {
		return nil, false
	}
	return o.CurrentUsage, true
}

// HasCurrentUsage returns a boolean if a field has been set.
func (o *DtoFeatureUsageSummary) HasCurrentUsage() bool {
	if o != nil && !IsNil(o.CurrentUsage) {
		return true
	}

	return false
}

// SetCurrentUsage gets a reference to the given float32 and assigns it to the CurrentUsage field.
func (o *DtoFeatureUsageSummary) SetCurrentUsage(v float32) {
	o.CurrentUsage = &v
}

// GetFeature returns the Feature field value if set, zero value otherwise.
func (o *DtoFeatureUsageSummary) GetFeature() DtoFeatureResponse {
	if o == nil || IsNil(o.Feature) {
		var ret DtoFeatureResponse
		return ret
	}
	return *o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureUsageSummary) GetFeatureOk() (*DtoFeatureResponse, bool) {
	if o == nil || IsNil(o.Feature) {
		return nil, false
	}
	return o.Feature, true
}

// HasFeature returns a boolean if a field has been set.
func (o *DtoFeatureUsageSummary) HasFeature() bool {
	if o != nil && !IsNil(o.Feature) {
		return true
	}

	return false
}

// SetFeature gets a reference to the given DtoFeatureResponse and assigns it to the Feature field.
func (o *DtoFeatureUsageSummary) SetFeature(v DtoFeatureResponse) {
	o.Feature = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *DtoFeatureUsageSummary) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureUsageSummary) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *DtoFeatureUsageSummary) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *DtoFeatureUsageSummary) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetIsSoftLimit returns the IsSoftLimit field value if set, zero value otherwise.
func (o *DtoFeatureUsageSummary) GetIsSoftLimit() bool {
	if o == nil || IsNil(o.IsSoftLimit) {
		var ret bool
		return ret
	}
	return *o.IsSoftLimit
}

// GetIsSoftLimitOk returns a tuple with the IsSoftLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureUsageSummary) GetIsSoftLimitOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSoftLimit) {
		return nil, false
	}
	return o.IsSoftLimit, true
}

// HasIsSoftLimit returns a boolean if a field has been set.
func (o *DtoFeatureUsageSummary) HasIsSoftLimit() bool {
	if o != nil && !IsNil(o.IsSoftLimit) {
		return true
	}

	return false
}

// SetIsSoftLimit gets a reference to the given bool and assigns it to the IsSoftLimit field.
func (o *DtoFeatureUsageSummary) SetIsSoftLimit(v bool) {
	o.IsSoftLimit = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *DtoFeatureUsageSummary) GetSources() []DtoEntitlementSource {
	if o == nil || IsNil(o.Sources) {
		var ret []DtoEntitlementSource
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureUsageSummary) GetSourcesOk() ([]DtoEntitlementSource, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *DtoFeatureUsageSummary) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []DtoEntitlementSource and assigns it to the Sources field.
func (o *DtoFeatureUsageSummary) SetSources(v []DtoEntitlementSource) {
	o.Sources = v
}

// GetTotalLimit returns the TotalLimit field value if set, zero value otherwise.
func (o *DtoFeatureUsageSummary) GetTotalLimit() int32 {
	if o == nil || IsNil(o.TotalLimit) {
		var ret int32
		return ret
	}
	return *o.TotalLimit
}

// GetTotalLimitOk returns a tuple with the TotalLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureUsageSummary) GetTotalLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalLimit) {
		return nil, false
	}
	return o.TotalLimit, true
}

// HasTotalLimit returns a boolean if a field has been set.
func (o *DtoFeatureUsageSummary) HasTotalLimit() bool {
	if o != nil && !IsNil(o.TotalLimit) {
		return true
	}

	return false
}

// SetTotalLimit gets a reference to the given int32 and assigns it to the TotalLimit field.
func (o *DtoFeatureUsageSummary) SetTotalLimit(v int32) {
	o.TotalLimit = &v
}

// GetUsagePercent returns the UsagePercent field value if set, zero value otherwise.
func (o *DtoFeatureUsageSummary) GetUsagePercent() float32 {
	if o == nil || IsNil(o.UsagePercent) {
		var ret float32
		return ret
	}
	return *o.UsagePercent
}

// GetUsagePercentOk returns a tuple with the UsagePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureUsageSummary) GetUsagePercentOk() (*float32, bool) {
	if o == nil || IsNil(o.UsagePercent) {
		return nil, false
	}
	return o.UsagePercent, true
}

// HasUsagePercent returns a boolean if a field has been set.
func (o *DtoFeatureUsageSummary) HasUsagePercent() bool {
	if o != nil && !IsNil(o.UsagePercent) {
		return true
	}

	return false
}

// SetUsagePercent gets a reference to the given float32 and assigns it to the UsagePercent field.
func (o *DtoFeatureUsageSummary) SetUsagePercent(v float32) {
	o.UsagePercent = &v
}

func (o DtoFeatureUsageSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoFeatureUsageSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentUsage) {
		toSerialize["current_usage"] = o.CurrentUsage
	}
	if !IsNil(o.Feature) {
		toSerialize["feature"] = o.Feature
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["is_enabled"] = o.IsEnabled
	}
	if !IsNil(o.IsSoftLimit) {
		toSerialize["is_soft_limit"] = o.IsSoftLimit
	}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	if !IsNil(o.TotalLimit) {
		toSerialize["total_limit"] = o.TotalLimit
	}
	if !IsNil(o.UsagePercent) {
		toSerialize["usage_percent"] = o.UsagePercent
	}
	return toSerialize, nil
}

type NullableDtoFeatureUsageSummary struct {
	value *DtoFeatureUsageSummary
	isSet bool
}

func (v NullableDtoFeatureUsageSummary) Get() *DtoFeatureUsageSummary {
	return v.value
}

func (v *NullableDtoFeatureUsageSummary) Set(val *DtoFeatureUsageSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoFeatureUsageSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoFeatureUsageSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoFeatureUsageSummary(val *DtoFeatureUsageSummary) *NullableDtoFeatureUsageSummary {
	return &NullableDtoFeatureUsageSummary{value: val, isSet: true}
}

func (v NullableDtoFeatureUsageSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoFeatureUsageSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


