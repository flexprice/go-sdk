/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
)

// checks if the DtoGetUsageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoGetUsageResponse{}

// DtoGetUsageResponse struct for DtoGetUsageResponse
type DtoGetUsageResponse struct {
	EventName *string `json:"event_name,omitempty"`
	Results []DtoUsageResult `json:"results,omitempty"`
	Type *TypesAggregationType `json:"type,omitempty"`
	Value *float32 `json:"value,omitempty"`
}

// NewDtoGetUsageResponse instantiates a new DtoGetUsageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoGetUsageResponse() *DtoGetUsageResponse {
	this := DtoGetUsageResponse{}
	return &this
}

// NewDtoGetUsageResponseWithDefaults instantiates a new DtoGetUsageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoGetUsageResponseWithDefaults() *DtoGetUsageResponse {
	this := DtoGetUsageResponse{}
	return &this
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *DtoGetUsageResponse) GetEventName() string {
	if o == nil || IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageResponse) GetEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *DtoGetUsageResponse) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *DtoGetUsageResponse) SetEventName(v string) {
	o.EventName = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *DtoGetUsageResponse) GetResults() []DtoUsageResult {
	if o == nil || IsNil(o.Results) {
		var ret []DtoUsageResult
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageResponse) GetResultsOk() ([]DtoUsageResult, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *DtoGetUsageResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []DtoUsageResult and assigns it to the Results field.
func (o *DtoGetUsageResponse) SetResults(v []DtoUsageResult) {
	o.Results = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DtoGetUsageResponse) GetType() TypesAggregationType {
	if o == nil || IsNil(o.Type) {
		var ret TypesAggregationType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageResponse) GetTypeOk() (*TypesAggregationType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DtoGetUsageResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given TypesAggregationType and assigns it to the Type field.
func (o *DtoGetUsageResponse) SetType(v TypesAggregationType) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DtoGetUsageResponse) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageResponse) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DtoGetUsageResponse) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *DtoGetUsageResponse) SetValue(v float32) {
	o.Value = &v
}

func (o DtoGetUsageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoGetUsageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventName) {
		toSerialize["event_name"] = o.EventName
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableDtoGetUsageResponse struct {
	value *DtoGetUsageResponse
	isSet bool
}

func (v NullableDtoGetUsageResponse) Get() *DtoGetUsageResponse {
	return v.value
}

func (v *NullableDtoGetUsageResponse) Set(val *DtoGetUsageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoGetUsageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoGetUsageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoGetUsageResponse(val *DtoGetUsageResponse) *NullableDtoGetUsageResponse {
	return &NullableDtoGetUsageResponse{value: val, isSet: true}
}

func (v NullableDtoGetUsageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoGetUsageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


