/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoAggregatedEntitlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoAggregatedEntitlement{}

// DtoAggregatedEntitlement struct for DtoAggregatedEntitlement
type DtoAggregatedEntitlement struct {
	IsEnabled *bool `json:"is_enabled,omitempty"`
	IsSoftLimit *bool `json:"is_soft_limit,omitempty"`
	// For static/SLA features
	StaticValues []string `json:"static_values,omitempty"`
	UsageLimit *int32 `json:"usage_limit,omitempty"`
	UsageResetPeriod *TypesBillingPeriod `json:"usage_reset_period,omitempty"`
}

// NewDtoAggregatedEntitlement instantiates a new DtoAggregatedEntitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoAggregatedEntitlement() *DtoAggregatedEntitlement {
	this := DtoAggregatedEntitlement{}
	return &this
}

// NewDtoAggregatedEntitlementWithDefaults instantiates a new DtoAggregatedEntitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoAggregatedEntitlementWithDefaults() *DtoAggregatedEntitlement {
	this := DtoAggregatedEntitlement{}
	return &this
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *DtoAggregatedEntitlement) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAggregatedEntitlement) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *DtoAggregatedEntitlement) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *DtoAggregatedEntitlement) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetIsSoftLimit returns the IsSoftLimit field value if set, zero value otherwise.
func (o *DtoAggregatedEntitlement) GetIsSoftLimit() bool {
	if o == nil || IsNil(o.IsSoftLimit) {
		var ret bool
		return ret
	}
	return *o.IsSoftLimit
}

// GetIsSoftLimitOk returns a tuple with the IsSoftLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAggregatedEntitlement) GetIsSoftLimitOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSoftLimit) {
		return nil, false
	}
	return o.IsSoftLimit, true
}

// HasIsSoftLimit returns a boolean if a field has been set.
func (o *DtoAggregatedEntitlement) HasIsSoftLimit() bool {
	if o != nil && !IsNil(o.IsSoftLimit) {
		return true
	}

	return false
}

// SetIsSoftLimit gets a reference to the given bool and assigns it to the IsSoftLimit field.
func (o *DtoAggregatedEntitlement) SetIsSoftLimit(v bool) {
	o.IsSoftLimit = &v
}

// GetStaticValues returns the StaticValues field value if set, zero value otherwise.
func (o *DtoAggregatedEntitlement) GetStaticValues() []string {
	if o == nil || IsNil(o.StaticValues) {
		var ret []string
		return ret
	}
	return o.StaticValues
}

// GetStaticValuesOk returns a tuple with the StaticValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAggregatedEntitlement) GetStaticValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.StaticValues) {
		return nil, false
	}
	return o.StaticValues, true
}

// HasStaticValues returns a boolean if a field has been set.
func (o *DtoAggregatedEntitlement) HasStaticValues() bool {
	if o != nil && !IsNil(o.StaticValues) {
		return true
	}

	return false
}

// SetStaticValues gets a reference to the given []string and assigns it to the StaticValues field.
func (o *DtoAggregatedEntitlement) SetStaticValues(v []string) {
	o.StaticValues = v
}

// GetUsageLimit returns the UsageLimit field value if set, zero value otherwise.
func (o *DtoAggregatedEntitlement) GetUsageLimit() int32 {
	if o == nil || IsNil(o.UsageLimit) {
		var ret int32
		return ret
	}
	return *o.UsageLimit
}

// GetUsageLimitOk returns a tuple with the UsageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAggregatedEntitlement) GetUsageLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.UsageLimit) {
		return nil, false
	}
	return o.UsageLimit, true
}

// HasUsageLimit returns a boolean if a field has been set.
func (o *DtoAggregatedEntitlement) HasUsageLimit() bool {
	if o != nil && !IsNil(o.UsageLimit) {
		return true
	}

	return false
}

// SetUsageLimit gets a reference to the given int32 and assigns it to the UsageLimit field.
func (o *DtoAggregatedEntitlement) SetUsageLimit(v int32) {
	o.UsageLimit = &v
}

// GetUsageResetPeriod returns the UsageResetPeriod field value if set, zero value otherwise.
func (o *DtoAggregatedEntitlement) GetUsageResetPeriod() TypesBillingPeriod {
	if o == nil || IsNil(o.UsageResetPeriod) {
		var ret TypesBillingPeriod
		return ret
	}
	return *o.UsageResetPeriod
}

// GetUsageResetPeriodOk returns a tuple with the UsageResetPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAggregatedEntitlement) GetUsageResetPeriodOk() (*TypesBillingPeriod, bool) {
	if o == nil || IsNil(o.UsageResetPeriod) {
		return nil, false
	}
	return o.UsageResetPeriod, true
}

// HasUsageResetPeriod returns a boolean if a field has been set.
func (o *DtoAggregatedEntitlement) HasUsageResetPeriod() bool {
	if o != nil && !IsNil(o.UsageResetPeriod) {
		return true
	}

	return false
}

// SetUsageResetPeriod gets a reference to the given TypesBillingPeriod and assigns it to the UsageResetPeriod field.
func (o *DtoAggregatedEntitlement) SetUsageResetPeriod(v TypesBillingPeriod) {
	o.UsageResetPeriod = &v
}

func (o DtoAggregatedEntitlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoAggregatedEntitlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsEnabled) {
		toSerialize["is_enabled"] = o.IsEnabled
	}
	if !IsNil(o.IsSoftLimit) {
		toSerialize["is_soft_limit"] = o.IsSoftLimit
	}
	if !IsNil(o.StaticValues) {
		toSerialize["static_values"] = o.StaticValues
	}
	if !IsNil(o.UsageLimit) {
		toSerialize["usage_limit"] = o.UsageLimit
	}
	if !IsNil(o.UsageResetPeriod) {
		toSerialize["usage_reset_period"] = o.UsageResetPeriod
	}
	return toSerialize, nil
}

type NullableDtoAggregatedEntitlement struct {
	value *DtoAggregatedEntitlement
	isSet bool
}

func (v NullableDtoAggregatedEntitlement) Get() *DtoAggregatedEntitlement {
	return v.value
}

func (v *NullableDtoAggregatedEntitlement) Set(val *DtoAggregatedEntitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoAggregatedEntitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoAggregatedEntitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoAggregatedEntitlement(val *DtoAggregatedEntitlement) *NullableDtoAggregatedEntitlement {
	return &NullableDtoAggregatedEntitlement{value: val, isSet: true}
}

func (v NullableDtoAggregatedEntitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoAggregatedEntitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


