/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"fmt"
)

// TypesAggregationType the model 'TypesAggregationType'
type TypesAggregationType string

// List of types.AggregationType
const (
	TYPESAGGREGATIONTYPE_AggregationCount TypesAggregationType = "COUNT"
	TYPESAGGREGATIONTYPE_AggregationSum TypesAggregationType = "SUM"
	TYPESAGGREGATIONTYPE_AggregationAvg TypesAggregationType = "AVG"
	TYPESAGGREGATIONTYPE_AggregationCountUnique TypesAggregationType = "COUNT_UNIQUE"
)

// All allowed values of TypesAggregationType enum
var AllowedTypesAggregationTypeEnumValues = []TypesAggregationType{
	"COUNT",
	"SUM",
	"AVG",
	"COUNT_UNIQUE",
}

func (v *TypesAggregationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesAggregationType(value)
	for _, existing := range AllowedTypesAggregationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesAggregationType", value)
}

// NewTypesAggregationTypeFromValue returns a pointer to a valid TypesAggregationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesAggregationTypeFromValue(v string) (*TypesAggregationType, error) {
	ev := TypesAggregationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesAggregationType: valid values are %v", v, AllowedTypesAggregationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesAggregationType) IsValid() bool {
	for _, existing := range AllowedTypesAggregationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.AggregationType value
func (v TypesAggregationType) Ptr() *TypesAggregationType {
	return &v
}

type NullableTypesAggregationType struct {
	value *TypesAggregationType
	isSet bool
}

func (v NullableTypesAggregationType) Get() *TypesAggregationType {
	return v.value
}

func (v *NullableTypesAggregationType) Set(val *TypesAggregationType) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesAggregationType) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesAggregationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesAggregationType(val *TypesAggregationType) *NullableTypesAggregationType {
	return &NullableTypesAggregationType{value: val, isSet: true}
}

func (v NullableTypesAggregationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesAggregationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

