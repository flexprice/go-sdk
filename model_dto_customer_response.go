/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoCustomerResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoCustomerResponse{}

// DtoCustomerResponse struct for DtoCustomerResponse
type DtoCustomerResponse struct {
	// AddressCity is the city of the customer's address
	AddressCity *string `json:"address_city,omitempty"`
	// AddressCountry is the country of the customer's address (ISO 3166-1 alpha-2)
	AddressCountry *string `json:"address_country,omitempty"`
	// AddressLine1 is the first line of the customer's address
	AddressLine1 *string `json:"address_line1,omitempty"`
	// AddressLine2 is the second line of the customer's address
	AddressLine2 *string `json:"address_line2,omitempty"`
	// AddressPostalCode is the postal code of the customer's address
	AddressPostalCode *string `json:"address_postal_code,omitempty"`
	// AddressState is the state of the customer's address
	AddressState *string `json:"address_state,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	CreatedBy *string `json:"created_by,omitempty"`
	// Email is the email of the customer
	Email *string `json:"email,omitempty"`
	// EnvironmentID is the environment identifier for the customer
	EnvironmentId *string `json:"environment_id,omitempty"`
	// ExternalID is the external identifier for the customer
	ExternalId *string `json:"external_id,omitempty"`
	// ID is the unique identifier for the customer
	Id *string `json:"id,omitempty"`
	// Metadata
	Metadata *map[string]string `json:"metadata,omitempty"`
	// Name is the name of the customer
	Name *string `json:"name,omitempty"`
	Status *TypesStatus `json:"status,omitempty"`
	TenantId *string `json:"tenant_id,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	UpdatedBy *string `json:"updated_by,omitempty"`
}

// NewDtoCustomerResponse instantiates a new DtoCustomerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoCustomerResponse() *DtoCustomerResponse {
	this := DtoCustomerResponse{}
	return &this
}

// NewDtoCustomerResponseWithDefaults instantiates a new DtoCustomerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoCustomerResponseWithDefaults() *DtoCustomerResponse {
	this := DtoCustomerResponse{}
	return &this
}

// GetAddressCity returns the AddressCity field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetAddressCity() string {
	if o == nil || IsNil(o.AddressCity) {
		var ret string
		return ret
	}
	return *o.AddressCity
}

// GetAddressCityOk returns a tuple with the AddressCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetAddressCityOk() (*string, bool) {
	if o == nil || IsNil(o.AddressCity) {
		return nil, false
	}
	return o.AddressCity, true
}

// HasAddressCity returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasAddressCity() bool {
	if o != nil && !IsNil(o.AddressCity) {
		return true
	}

	return false
}

// SetAddressCity gets a reference to the given string and assigns it to the AddressCity field.
func (o *DtoCustomerResponse) SetAddressCity(v string) {
	o.AddressCity = &v
}

// GetAddressCountry returns the AddressCountry field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetAddressCountry() string {
	if o == nil || IsNil(o.AddressCountry) {
		var ret string
		return ret
	}
	return *o.AddressCountry
}

// GetAddressCountryOk returns a tuple with the AddressCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetAddressCountryOk() (*string, bool) {
	if o == nil || IsNil(o.AddressCountry) {
		return nil, false
	}
	return o.AddressCountry, true
}

// HasAddressCountry returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasAddressCountry() bool {
	if o != nil && !IsNil(o.AddressCountry) {
		return true
	}

	return false
}

// SetAddressCountry gets a reference to the given string and assigns it to the AddressCountry field.
func (o *DtoCustomerResponse) SetAddressCountry(v string) {
	o.AddressCountry = &v
}

// GetAddressLine1 returns the AddressLine1 field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetAddressLine1() string {
	if o == nil || IsNil(o.AddressLine1) {
		var ret string
		return ret
	}
	return *o.AddressLine1
}

// GetAddressLine1Ok returns a tuple with the AddressLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetAddressLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.AddressLine1) {
		return nil, false
	}
	return o.AddressLine1, true
}

// HasAddressLine1 returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasAddressLine1() bool {
	if o != nil && !IsNil(o.AddressLine1) {
		return true
	}

	return false
}

// SetAddressLine1 gets a reference to the given string and assigns it to the AddressLine1 field.
func (o *DtoCustomerResponse) SetAddressLine1(v string) {
	o.AddressLine1 = &v
}

// GetAddressLine2 returns the AddressLine2 field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetAddressLine2() string {
	if o == nil || IsNil(o.AddressLine2) {
		var ret string
		return ret
	}
	return *o.AddressLine2
}

// GetAddressLine2Ok returns a tuple with the AddressLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetAddressLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.AddressLine2) {
		return nil, false
	}
	return o.AddressLine2, true
}

// HasAddressLine2 returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasAddressLine2() bool {
	if o != nil && !IsNil(o.AddressLine2) {
		return true
	}

	return false
}

// SetAddressLine2 gets a reference to the given string and assigns it to the AddressLine2 field.
func (o *DtoCustomerResponse) SetAddressLine2(v string) {
	o.AddressLine2 = &v
}

// GetAddressPostalCode returns the AddressPostalCode field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetAddressPostalCode() string {
	if o == nil || IsNil(o.AddressPostalCode) {
		var ret string
		return ret
	}
	return *o.AddressPostalCode
}

// GetAddressPostalCodeOk returns a tuple with the AddressPostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetAddressPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AddressPostalCode) {
		return nil, false
	}
	return o.AddressPostalCode, true
}

// HasAddressPostalCode returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasAddressPostalCode() bool {
	if o != nil && !IsNil(o.AddressPostalCode) {
		return true
	}

	return false
}

// SetAddressPostalCode gets a reference to the given string and assigns it to the AddressPostalCode field.
func (o *DtoCustomerResponse) SetAddressPostalCode(v string) {
	o.AddressPostalCode = &v
}

// GetAddressState returns the AddressState field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetAddressState() string {
	if o == nil || IsNil(o.AddressState) {
		var ret string
		return ret
	}
	return *o.AddressState
}

// GetAddressStateOk returns a tuple with the AddressState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetAddressStateOk() (*string, bool) {
	if o == nil || IsNil(o.AddressState) {
		return nil, false
	}
	return o.AddressState, true
}

// HasAddressState returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasAddressState() bool {
	if o != nil && !IsNil(o.AddressState) {
		return true
	}

	return false
}

// SetAddressState gets a reference to the given string and assigns it to the AddressState field.
func (o *DtoCustomerResponse) SetAddressState(v string) {
	o.AddressState = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *DtoCustomerResponse) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *DtoCustomerResponse) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *DtoCustomerResponse) SetEmail(v string) {
	o.Email = &v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId) {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentId) {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasEnvironmentId() bool {
	if o != nil && !IsNil(o.EnvironmentId) {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *DtoCustomerResponse) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *DtoCustomerResponse) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DtoCustomerResponse) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *DtoCustomerResponse) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtoCustomerResponse) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetStatus() TypesStatus {
	if o == nil || IsNil(o.Status) {
		var ret TypesStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetStatusOk() (*TypesStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TypesStatus and assigns it to the Status field.
func (o *DtoCustomerResponse) SetStatus(v TypesStatus) {
	o.Status = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *DtoCustomerResponse) SetTenantId(v string) {
	o.TenantId = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *DtoCustomerResponse) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *DtoCustomerResponse) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCustomerResponse) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *DtoCustomerResponse) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *DtoCustomerResponse) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

func (o DtoCustomerResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoCustomerResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddressCity) {
		toSerialize["address_city"] = o.AddressCity
	}
	if !IsNil(o.AddressCountry) {
		toSerialize["address_country"] = o.AddressCountry
	}
	if !IsNil(o.AddressLine1) {
		toSerialize["address_line1"] = o.AddressLine1
	}
	if !IsNil(o.AddressLine2) {
		toSerialize["address_line2"] = o.AddressLine2
	}
	if !IsNil(o.AddressPostalCode) {
		toSerialize["address_postal_code"] = o.AddressPostalCode
	}
	if !IsNil(o.AddressState) {
		toSerialize["address_state"] = o.AddressState
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EnvironmentId) {
		toSerialize["environment_id"] = o.EnvironmentId
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenant_id"] = o.TenantId
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	return toSerialize, nil
}

type NullableDtoCustomerResponse struct {
	value *DtoCustomerResponse
	isSet bool
}

func (v NullableDtoCustomerResponse) Get() *DtoCustomerResponse {
	return v.value
}

func (v *NullableDtoCustomerResponse) Set(val *DtoCustomerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoCustomerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoCustomerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoCustomerResponse(val *DtoCustomerResponse) *NullableDtoCustomerResponse {
	return &NullableDtoCustomerResponse{value: val, isSet: true}
}

func (v NullableDtoCustomerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoCustomerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


