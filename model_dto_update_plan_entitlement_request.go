/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DtoUpdatePlanEntitlementRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoUpdatePlanEntitlementRequest{}

// DtoUpdatePlanEntitlementRequest struct for DtoUpdatePlanEntitlementRequest
type DtoUpdatePlanEntitlementRequest struct {
	FeatureId string `json:"feature_id"`
	FeatureType TypesFeatureType `json:"feature_type"`
	// The ID of the entitlement to update (present if the entitlement is being updated)
	Id *string `json:"id,omitempty"`
	IsEnabled *bool `json:"is_enabled,omitempty"`
	IsSoftLimit *bool `json:"is_soft_limit,omitempty"`
	PlanId *string `json:"plan_id,omitempty"`
	StaticValue *string `json:"static_value,omitempty"`
	UsageLimit *int32 `json:"usage_limit,omitempty"`
	UsageResetPeriod *TypesBillingPeriod `json:"usage_reset_period,omitempty"`
}

type _DtoUpdatePlanEntitlementRequest DtoUpdatePlanEntitlementRequest

// NewDtoUpdatePlanEntitlementRequest instantiates a new DtoUpdatePlanEntitlementRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoUpdatePlanEntitlementRequest(featureId string, featureType TypesFeatureType) *DtoUpdatePlanEntitlementRequest {
	this := DtoUpdatePlanEntitlementRequest{}
	this.FeatureId = featureId
	this.FeatureType = featureType
	return &this
}

// NewDtoUpdatePlanEntitlementRequestWithDefaults instantiates a new DtoUpdatePlanEntitlementRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoUpdatePlanEntitlementRequestWithDefaults() *DtoUpdatePlanEntitlementRequest {
	this := DtoUpdatePlanEntitlementRequest{}
	return &this
}

// GetFeatureId returns the FeatureId field value
func (o *DtoUpdatePlanEntitlementRequest) GetFeatureId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeatureId
}

// GetFeatureIdOk returns a tuple with the FeatureId field value
// and a boolean to check if the value has been set.
func (o *DtoUpdatePlanEntitlementRequest) GetFeatureIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeatureId, true
}

// SetFeatureId sets field value
func (o *DtoUpdatePlanEntitlementRequest) SetFeatureId(v string) {
	o.FeatureId = v
}

// GetFeatureType returns the FeatureType field value
func (o *DtoUpdatePlanEntitlementRequest) GetFeatureType() TypesFeatureType {
	if o == nil {
		var ret TypesFeatureType
		return ret
	}

	return o.FeatureType
}

// GetFeatureTypeOk returns a tuple with the FeatureType field value
// and a boolean to check if the value has been set.
func (o *DtoUpdatePlanEntitlementRequest) GetFeatureTypeOk() (*TypesFeatureType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeatureType, true
}

// SetFeatureType sets field value
func (o *DtoUpdatePlanEntitlementRequest) SetFeatureType(v TypesFeatureType) {
	o.FeatureType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DtoUpdatePlanEntitlementRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdatePlanEntitlementRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DtoUpdatePlanEntitlementRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DtoUpdatePlanEntitlementRequest) SetId(v string) {
	o.Id = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *DtoUpdatePlanEntitlementRequest) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdatePlanEntitlementRequest) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *DtoUpdatePlanEntitlementRequest) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *DtoUpdatePlanEntitlementRequest) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetIsSoftLimit returns the IsSoftLimit field value if set, zero value otherwise.
func (o *DtoUpdatePlanEntitlementRequest) GetIsSoftLimit() bool {
	if o == nil || IsNil(o.IsSoftLimit) {
		var ret bool
		return ret
	}
	return *o.IsSoftLimit
}

// GetIsSoftLimitOk returns a tuple with the IsSoftLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdatePlanEntitlementRequest) GetIsSoftLimitOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSoftLimit) {
		return nil, false
	}
	return o.IsSoftLimit, true
}

// HasIsSoftLimit returns a boolean if a field has been set.
func (o *DtoUpdatePlanEntitlementRequest) HasIsSoftLimit() bool {
	if o != nil && !IsNil(o.IsSoftLimit) {
		return true
	}

	return false
}

// SetIsSoftLimit gets a reference to the given bool and assigns it to the IsSoftLimit field.
func (o *DtoUpdatePlanEntitlementRequest) SetIsSoftLimit(v bool) {
	o.IsSoftLimit = &v
}

// GetPlanId returns the PlanId field value if set, zero value otherwise.
func (o *DtoUpdatePlanEntitlementRequest) GetPlanId() string {
	if o == nil || IsNil(o.PlanId) {
		var ret string
		return ret
	}
	return *o.PlanId
}

// GetPlanIdOk returns a tuple with the PlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdatePlanEntitlementRequest) GetPlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.PlanId) {
		return nil, false
	}
	return o.PlanId, true
}

// HasPlanId returns a boolean if a field has been set.
func (o *DtoUpdatePlanEntitlementRequest) HasPlanId() bool {
	if o != nil && !IsNil(o.PlanId) {
		return true
	}

	return false
}

// SetPlanId gets a reference to the given string and assigns it to the PlanId field.
func (o *DtoUpdatePlanEntitlementRequest) SetPlanId(v string) {
	o.PlanId = &v
}

// GetStaticValue returns the StaticValue field value if set, zero value otherwise.
func (o *DtoUpdatePlanEntitlementRequest) GetStaticValue() string {
	if o == nil || IsNil(o.StaticValue) {
		var ret string
		return ret
	}
	return *o.StaticValue
}

// GetStaticValueOk returns a tuple with the StaticValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdatePlanEntitlementRequest) GetStaticValueOk() (*string, bool) {
	if o == nil || IsNil(o.StaticValue) {
		return nil, false
	}
	return o.StaticValue, true
}

// HasStaticValue returns a boolean if a field has been set.
func (o *DtoUpdatePlanEntitlementRequest) HasStaticValue() bool {
	if o != nil && !IsNil(o.StaticValue) {
		return true
	}

	return false
}

// SetStaticValue gets a reference to the given string and assigns it to the StaticValue field.
func (o *DtoUpdatePlanEntitlementRequest) SetStaticValue(v string) {
	o.StaticValue = &v
}

// GetUsageLimit returns the UsageLimit field value if set, zero value otherwise.
func (o *DtoUpdatePlanEntitlementRequest) GetUsageLimit() int32 {
	if o == nil || IsNil(o.UsageLimit) {
		var ret int32
		return ret
	}
	return *o.UsageLimit
}

// GetUsageLimitOk returns a tuple with the UsageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdatePlanEntitlementRequest) GetUsageLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.UsageLimit) {
		return nil, false
	}
	return o.UsageLimit, true
}

// HasUsageLimit returns a boolean if a field has been set.
func (o *DtoUpdatePlanEntitlementRequest) HasUsageLimit() bool {
	if o != nil && !IsNil(o.UsageLimit) {
		return true
	}

	return false
}

// SetUsageLimit gets a reference to the given int32 and assigns it to the UsageLimit field.
func (o *DtoUpdatePlanEntitlementRequest) SetUsageLimit(v int32) {
	o.UsageLimit = &v
}

// GetUsageResetPeriod returns the UsageResetPeriod field value if set, zero value otherwise.
func (o *DtoUpdatePlanEntitlementRequest) GetUsageResetPeriod() TypesBillingPeriod {
	if o == nil || IsNil(o.UsageResetPeriod) {
		var ret TypesBillingPeriod
		return ret
	}
	return *o.UsageResetPeriod
}

// GetUsageResetPeriodOk returns a tuple with the UsageResetPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdatePlanEntitlementRequest) GetUsageResetPeriodOk() (*TypesBillingPeriod, bool) {
	if o == nil || IsNil(o.UsageResetPeriod) {
		return nil, false
	}
	return o.UsageResetPeriod, true
}

// HasUsageResetPeriod returns a boolean if a field has been set.
func (o *DtoUpdatePlanEntitlementRequest) HasUsageResetPeriod() bool {
	if o != nil && !IsNil(o.UsageResetPeriod) {
		return true
	}

	return false
}

// SetUsageResetPeriod gets a reference to the given TypesBillingPeriod and assigns it to the UsageResetPeriod field.
func (o *DtoUpdatePlanEntitlementRequest) SetUsageResetPeriod(v TypesBillingPeriod) {
	o.UsageResetPeriod = &v
}

func (o DtoUpdatePlanEntitlementRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoUpdatePlanEntitlementRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["feature_id"] = o.FeatureId
	toSerialize["feature_type"] = o.FeatureType
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["is_enabled"] = o.IsEnabled
	}
	if !IsNil(o.IsSoftLimit) {
		toSerialize["is_soft_limit"] = o.IsSoftLimit
	}
	if !IsNil(o.PlanId) {
		toSerialize["plan_id"] = o.PlanId
	}
	if !IsNil(o.StaticValue) {
		toSerialize["static_value"] = o.StaticValue
	}
	if !IsNil(o.UsageLimit) {
		toSerialize["usage_limit"] = o.UsageLimit
	}
	if !IsNil(o.UsageResetPeriod) {
		toSerialize["usage_reset_period"] = o.UsageResetPeriod
	}
	return toSerialize, nil
}

func (o *DtoUpdatePlanEntitlementRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"feature_id",
		"feature_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtoUpdatePlanEntitlementRequest := _DtoUpdatePlanEntitlementRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtoUpdatePlanEntitlementRequest)

	if err != nil {
		return err
	}

	*o = DtoUpdatePlanEntitlementRequest(varDtoUpdatePlanEntitlementRequest)

	return err
}

type NullableDtoUpdatePlanEntitlementRequest struct {
	value *DtoUpdatePlanEntitlementRequest
	isSet bool
}

func (v NullableDtoUpdatePlanEntitlementRequest) Get() *DtoUpdatePlanEntitlementRequest {
	return v.value
}

func (v *NullableDtoUpdatePlanEntitlementRequest) Set(val *DtoUpdatePlanEntitlementRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoUpdatePlanEntitlementRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoUpdatePlanEntitlementRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoUpdatePlanEntitlementRequest(val *DtoUpdatePlanEntitlementRequest) *NullableDtoUpdatePlanEntitlementRequest {
	return &NullableDtoUpdatePlanEntitlementRequest{value: val, isSet: true}
}

func (v NullableDtoUpdatePlanEntitlementRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoUpdatePlanEntitlementRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


