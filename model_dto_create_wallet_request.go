/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DtoCreateWalletRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoCreateWalletRequest{}

// DtoCreateWalletRequest struct for DtoCreateWalletRequest
type DtoCreateWalletRequest struct {
	AutoTopupAmount *float32 `json:"auto_topup_amount,omitempty"`
	AutoTopupMinBalance *float32 `json:"auto_topup_min_balance,omitempty"`
	AutoTopupTrigger *TypesAutoTopupTrigger `json:"auto_topup_trigger,omitempty"`
	Config *TypesWalletConfig `json:"config,omitempty"`
	ConversionRate *float32 `json:"conversion_rate,omitempty"`
	Currency string `json:"currency"`
	CustomerId string `json:"customer_id"`
	Description *string `json:"description,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	Name *string `json:"name,omitempty"`
	WalletType *TypesWalletType `json:"wallet_type,omitempty"`
}

type _DtoCreateWalletRequest DtoCreateWalletRequest

// NewDtoCreateWalletRequest instantiates a new DtoCreateWalletRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoCreateWalletRequest(currency string, customerId string) *DtoCreateWalletRequest {
	this := DtoCreateWalletRequest{}
	this.Currency = currency
	this.CustomerId = customerId
	return &this
}

// NewDtoCreateWalletRequestWithDefaults instantiates a new DtoCreateWalletRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoCreateWalletRequestWithDefaults() *DtoCreateWalletRequest {
	this := DtoCreateWalletRequest{}
	return &this
}

// GetAutoTopupAmount returns the AutoTopupAmount field value if set, zero value otherwise.
func (o *DtoCreateWalletRequest) GetAutoTopupAmount() float32 {
	if o == nil || IsNil(o.AutoTopupAmount) {
		var ret float32
		return ret
	}
	return *o.AutoTopupAmount
}

// GetAutoTopupAmountOk returns a tuple with the AutoTopupAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCreateWalletRequest) GetAutoTopupAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.AutoTopupAmount) {
		return nil, false
	}
	return o.AutoTopupAmount, true
}

// HasAutoTopupAmount returns a boolean if a field has been set.
func (o *DtoCreateWalletRequest) HasAutoTopupAmount() bool {
	if o != nil && !IsNil(o.AutoTopupAmount) {
		return true
	}

	return false
}

// SetAutoTopupAmount gets a reference to the given float32 and assigns it to the AutoTopupAmount field.
func (o *DtoCreateWalletRequest) SetAutoTopupAmount(v float32) {
	o.AutoTopupAmount = &v
}

// GetAutoTopupMinBalance returns the AutoTopupMinBalance field value if set, zero value otherwise.
func (o *DtoCreateWalletRequest) GetAutoTopupMinBalance() float32 {
	if o == nil || IsNil(o.AutoTopupMinBalance) {
		var ret float32
		return ret
	}
	return *o.AutoTopupMinBalance
}

// GetAutoTopupMinBalanceOk returns a tuple with the AutoTopupMinBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCreateWalletRequest) GetAutoTopupMinBalanceOk() (*float32, bool) {
	if o == nil || IsNil(o.AutoTopupMinBalance) {
		return nil, false
	}
	return o.AutoTopupMinBalance, true
}

// HasAutoTopupMinBalance returns a boolean if a field has been set.
func (o *DtoCreateWalletRequest) HasAutoTopupMinBalance() bool {
	if o != nil && !IsNil(o.AutoTopupMinBalance) {
		return true
	}

	return false
}

// SetAutoTopupMinBalance gets a reference to the given float32 and assigns it to the AutoTopupMinBalance field.
func (o *DtoCreateWalletRequest) SetAutoTopupMinBalance(v float32) {
	o.AutoTopupMinBalance = &v
}

// GetAutoTopupTrigger returns the AutoTopupTrigger field value if set, zero value otherwise.
func (o *DtoCreateWalletRequest) GetAutoTopupTrigger() TypesAutoTopupTrigger {
	if o == nil || IsNil(o.AutoTopupTrigger) {
		var ret TypesAutoTopupTrigger
		return ret
	}
	return *o.AutoTopupTrigger
}

// GetAutoTopupTriggerOk returns a tuple with the AutoTopupTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCreateWalletRequest) GetAutoTopupTriggerOk() (*TypesAutoTopupTrigger, bool) {
	if o == nil || IsNil(o.AutoTopupTrigger) {
		return nil, false
	}
	return o.AutoTopupTrigger, true
}

// HasAutoTopupTrigger returns a boolean if a field has been set.
func (o *DtoCreateWalletRequest) HasAutoTopupTrigger() bool {
	if o != nil && !IsNil(o.AutoTopupTrigger) {
		return true
	}

	return false
}

// SetAutoTopupTrigger gets a reference to the given TypesAutoTopupTrigger and assigns it to the AutoTopupTrigger field.
func (o *DtoCreateWalletRequest) SetAutoTopupTrigger(v TypesAutoTopupTrigger) {
	o.AutoTopupTrigger = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *DtoCreateWalletRequest) GetConfig() TypesWalletConfig {
	if o == nil || IsNil(o.Config) {
		var ret TypesWalletConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCreateWalletRequest) GetConfigOk() (*TypesWalletConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *DtoCreateWalletRequest) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given TypesWalletConfig and assigns it to the Config field.
func (o *DtoCreateWalletRequest) SetConfig(v TypesWalletConfig) {
	o.Config = &v
}

// GetConversionRate returns the ConversionRate field value if set, zero value otherwise.
func (o *DtoCreateWalletRequest) GetConversionRate() float32 {
	if o == nil || IsNil(o.ConversionRate) {
		var ret float32
		return ret
	}
	return *o.ConversionRate
}

// GetConversionRateOk returns a tuple with the ConversionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCreateWalletRequest) GetConversionRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ConversionRate) {
		return nil, false
	}
	return o.ConversionRate, true
}

// HasConversionRate returns a boolean if a field has been set.
func (o *DtoCreateWalletRequest) HasConversionRate() bool {
	if o != nil && !IsNil(o.ConversionRate) {
		return true
	}

	return false
}

// SetConversionRate gets a reference to the given float32 and assigns it to the ConversionRate field.
func (o *DtoCreateWalletRequest) SetConversionRate(v float32) {
	o.ConversionRate = &v
}

// GetCurrency returns the Currency field value
func (o *DtoCreateWalletRequest) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *DtoCreateWalletRequest) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *DtoCreateWalletRequest) SetCurrency(v string) {
	o.Currency = v
}

// GetCustomerId returns the CustomerId field value
func (o *DtoCreateWalletRequest) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *DtoCreateWalletRequest) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *DtoCreateWalletRequest) SetCustomerId(v string) {
	o.CustomerId = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DtoCreateWalletRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCreateWalletRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DtoCreateWalletRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DtoCreateWalletRequest) SetDescription(v string) {
	o.Description = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DtoCreateWalletRequest) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCreateWalletRequest) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DtoCreateWalletRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *DtoCreateWalletRequest) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtoCreateWalletRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCreateWalletRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtoCreateWalletRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtoCreateWalletRequest) SetName(v string) {
	o.Name = &v
}

// GetWalletType returns the WalletType field value if set, zero value otherwise.
func (o *DtoCreateWalletRequest) GetWalletType() TypesWalletType {
	if o == nil || IsNil(o.WalletType) {
		var ret TypesWalletType
		return ret
	}
	return *o.WalletType
}

// GetWalletTypeOk returns a tuple with the WalletType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCreateWalletRequest) GetWalletTypeOk() (*TypesWalletType, bool) {
	if o == nil || IsNil(o.WalletType) {
		return nil, false
	}
	return o.WalletType, true
}

// HasWalletType returns a boolean if a field has been set.
func (o *DtoCreateWalletRequest) HasWalletType() bool {
	if o != nil && !IsNil(o.WalletType) {
		return true
	}

	return false
}

// SetWalletType gets a reference to the given TypesWalletType and assigns it to the WalletType field.
func (o *DtoCreateWalletRequest) SetWalletType(v TypesWalletType) {
	o.WalletType = &v
}

func (o DtoCreateWalletRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoCreateWalletRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoTopupAmount) {
		toSerialize["auto_topup_amount"] = o.AutoTopupAmount
	}
	if !IsNil(o.AutoTopupMinBalance) {
		toSerialize["auto_topup_min_balance"] = o.AutoTopupMinBalance
	}
	if !IsNil(o.AutoTopupTrigger) {
		toSerialize["auto_topup_trigger"] = o.AutoTopupTrigger
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.ConversionRate) {
		toSerialize["conversion_rate"] = o.ConversionRate
	}
	toSerialize["currency"] = o.Currency
	toSerialize["customer_id"] = o.CustomerId
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.WalletType) {
		toSerialize["wallet_type"] = o.WalletType
	}
	return toSerialize, nil
}

func (o *DtoCreateWalletRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currency",
		"customer_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtoCreateWalletRequest := _DtoCreateWalletRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtoCreateWalletRequest)

	if err != nil {
		return err
	}

	*o = DtoCreateWalletRequest(varDtoCreateWalletRequest)

	return err
}

type NullableDtoCreateWalletRequest struct {
	value *DtoCreateWalletRequest
	isSet bool
}

func (v NullableDtoCreateWalletRequest) Get() *DtoCreateWalletRequest {
	return v.value
}

func (v *NullableDtoCreateWalletRequest) Set(val *DtoCreateWalletRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoCreateWalletRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoCreateWalletRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoCreateWalletRequest(val *DtoCreateWalletRequest) *NullableDtoCreateWalletRequest {
	return &NullableDtoCreateWalletRequest{value: val, isSet: true}
}

func (v NullableDtoCreateWalletRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoCreateWalletRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


