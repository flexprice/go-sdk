/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"fmt"
)

// TypesWalletConfigPriceType the model 'TypesWalletConfigPriceType'
type TypesWalletConfigPriceType string

// List of types.WalletConfigPriceType
const (
	TYPESWALLETCONFIGPRICETYPE_WalletConfigPriceTypeAll TypesWalletConfigPriceType = "ALL"
	TYPESWALLETCONFIGPRICETYPE_WalletConfigPriceTypeUsage TypesWalletConfigPriceType = "USAGE"
	TYPESWALLETCONFIGPRICETYPE_WalletConfigPriceTypeFixed TypesWalletConfigPriceType = "FIXED"
)

// All allowed values of TypesWalletConfigPriceType enum
var AllowedTypesWalletConfigPriceTypeEnumValues = []TypesWalletConfigPriceType{
	"ALL",
	"USAGE",
	"FIXED",
}

func (v *TypesWalletConfigPriceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesWalletConfigPriceType(value)
	for _, existing := range AllowedTypesWalletConfigPriceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesWalletConfigPriceType", value)
}

// NewTypesWalletConfigPriceTypeFromValue returns a pointer to a valid TypesWalletConfigPriceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesWalletConfigPriceTypeFromValue(v string) (*TypesWalletConfigPriceType, error) {
	ev := TypesWalletConfigPriceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesWalletConfigPriceType: valid values are %v", v, AllowedTypesWalletConfigPriceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesWalletConfigPriceType) IsValid() bool {
	for _, existing := range AllowedTypesWalletConfigPriceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.WalletConfigPriceType value
func (v TypesWalletConfigPriceType) Ptr() *TypesWalletConfigPriceType {
	return &v
}

type NullableTypesWalletConfigPriceType struct {
	value *TypesWalletConfigPriceType
	isSet bool
}

func (v NullableTypesWalletConfigPriceType) Get() *TypesWalletConfigPriceType {
	return v.value
}

func (v *NullableTypesWalletConfigPriceType) Set(val *TypesWalletConfigPriceType) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesWalletConfigPriceType) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesWalletConfigPriceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesWalletConfigPriceType(val *TypesWalletConfigPriceType) *NullableTypesWalletConfigPriceType {
	return &NullableTypesWalletConfigPriceType{value: val, isSet: true}
}

func (v NullableTypesWalletConfigPriceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesWalletConfigPriceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

