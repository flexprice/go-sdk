/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoGetEventsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoGetEventsResponse{}

// DtoGetEventsResponse struct for DtoGetEventsResponse
type DtoGetEventsResponse struct {
	Events []DtoEvent `json:"events,omitempty"`
	HasMore *bool `json:"has_more,omitempty"`
	IterFirstKey *string `json:"iter_first_key,omitempty"`
	IterLastKey *string `json:"iter_last_key,omitempty"`
}

// NewDtoGetEventsResponse instantiates a new DtoGetEventsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoGetEventsResponse() *DtoGetEventsResponse {
	this := DtoGetEventsResponse{}
	return &this
}

// NewDtoGetEventsResponseWithDefaults instantiates a new DtoGetEventsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoGetEventsResponseWithDefaults() *DtoGetEventsResponse {
	this := DtoGetEventsResponse{}
	return &this
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *DtoGetEventsResponse) GetEvents() []DtoEvent {
	if o == nil || IsNil(o.Events) {
		var ret []DtoEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetEventsResponse) GetEventsOk() ([]DtoEvent, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *DtoGetEventsResponse) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []DtoEvent and assigns it to the Events field.
func (o *DtoGetEventsResponse) SetEvents(v []DtoEvent) {
	o.Events = v
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *DtoGetEventsResponse) GetHasMore() bool {
	if o == nil || IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetEventsResponse) GetHasMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *DtoGetEventsResponse) HasHasMore() bool {
	if o != nil && !IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *DtoGetEventsResponse) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetIterFirstKey returns the IterFirstKey field value if set, zero value otherwise.
func (o *DtoGetEventsResponse) GetIterFirstKey() string {
	if o == nil || IsNil(o.IterFirstKey) {
		var ret string
		return ret
	}
	return *o.IterFirstKey
}

// GetIterFirstKeyOk returns a tuple with the IterFirstKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetEventsResponse) GetIterFirstKeyOk() (*string, bool) {
	if o == nil || IsNil(o.IterFirstKey) {
		return nil, false
	}
	return o.IterFirstKey, true
}

// HasIterFirstKey returns a boolean if a field has been set.
func (o *DtoGetEventsResponse) HasIterFirstKey() bool {
	if o != nil && !IsNil(o.IterFirstKey) {
		return true
	}

	return false
}

// SetIterFirstKey gets a reference to the given string and assigns it to the IterFirstKey field.
func (o *DtoGetEventsResponse) SetIterFirstKey(v string) {
	o.IterFirstKey = &v
}

// GetIterLastKey returns the IterLastKey field value if set, zero value otherwise.
func (o *DtoGetEventsResponse) GetIterLastKey() string {
	if o == nil || IsNil(o.IterLastKey) {
		var ret string
		return ret
	}
	return *o.IterLastKey
}

// GetIterLastKeyOk returns a tuple with the IterLastKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetEventsResponse) GetIterLastKeyOk() (*string, bool) {
	if o == nil || IsNil(o.IterLastKey) {
		return nil, false
	}
	return o.IterLastKey, true
}

// HasIterLastKey returns a boolean if a field has been set.
func (o *DtoGetEventsResponse) HasIterLastKey() bool {
	if o != nil && !IsNil(o.IterLastKey) {
		return true
	}

	return false
}

// SetIterLastKey gets a reference to the given string and assigns it to the IterLastKey field.
func (o *DtoGetEventsResponse) SetIterLastKey(v string) {
	o.IterLastKey = &v
}

func (o DtoGetEventsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoGetEventsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.HasMore) {
		toSerialize["has_more"] = o.HasMore
	}
	if !IsNil(o.IterFirstKey) {
		toSerialize["iter_first_key"] = o.IterFirstKey
	}
	if !IsNil(o.IterLastKey) {
		toSerialize["iter_last_key"] = o.IterLastKey
	}
	return toSerialize, nil
}

type NullableDtoGetEventsResponse struct {
	value *DtoGetEventsResponse
	isSet bool
}

func (v NullableDtoGetEventsResponse) Get() *DtoGetEventsResponse {
	return v.value
}

func (v *NullableDtoGetEventsResponse) Set(val *DtoGetEventsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoGetEventsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoGetEventsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoGetEventsResponse(val *DtoGetEventsResponse) *NullableDtoGetEventsResponse {
	return &NullableDtoGetEventsResponse{value: val, isSet: true}
}

func (v NullableDtoGetEventsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoGetEventsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


