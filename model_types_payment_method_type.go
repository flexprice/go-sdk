/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"fmt"
)

// TypesPaymentMethodType the model 'TypesPaymentMethodType'
type TypesPaymentMethodType string

// List of types.PaymentMethodType
const (
	TYPESPAYMENTMETHODTYPE_PaymentMethodTypeCard TypesPaymentMethodType = "CARD"
	TYPESPAYMENTMETHODTYPE_PaymentMethodTypeACH TypesPaymentMethodType = "ACH"
	TYPESPAYMENTMETHODTYPE_PaymentMethodTypeOffline TypesPaymentMethodType = "OFFLINE"
	TYPESPAYMENTMETHODTYPE_PaymentMethodTypeCredits TypesPaymentMethodType = "CREDITS"
)

// All allowed values of TypesPaymentMethodType enum
var AllowedTypesPaymentMethodTypeEnumValues = []TypesPaymentMethodType{
	"CARD",
	"ACH",
	"OFFLINE",
	"CREDITS",
}

func (v *TypesPaymentMethodType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesPaymentMethodType(value)
	for _, existing := range AllowedTypesPaymentMethodTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesPaymentMethodType", value)
}

// NewTypesPaymentMethodTypeFromValue returns a pointer to a valid TypesPaymentMethodType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesPaymentMethodTypeFromValue(v string) (*TypesPaymentMethodType, error) {
	ev := TypesPaymentMethodType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesPaymentMethodType: valid values are %v", v, AllowedTypesPaymentMethodTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesPaymentMethodType) IsValid() bool {
	for _, existing := range AllowedTypesPaymentMethodTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.PaymentMethodType value
func (v TypesPaymentMethodType) Ptr() *TypesPaymentMethodType {
	return &v
}

type NullableTypesPaymentMethodType struct {
	value *TypesPaymentMethodType
	isSet bool
}

func (v NullableTypesPaymentMethodType) Get() *TypesPaymentMethodType {
	return v.value
}

func (v *NullableTypesPaymentMethodType) Set(val *TypesPaymentMethodType) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesPaymentMethodType) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesPaymentMethodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesPaymentMethodType(val *TypesPaymentMethodType) *NullableTypesPaymentMethodType {
	return &NullableTypesPaymentMethodType{value: val, isSet: true}
}

func (v NullableTypesPaymentMethodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesPaymentMethodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

