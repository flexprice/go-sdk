/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DtoGetUsageByMeterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoGetUsageByMeterRequest{}

// DtoGetUsageByMeterRequest struct for DtoGetUsageByMeterRequest
type DtoGetUsageByMeterRequest struct {
	CustomerId *string `json:"customer_id,omitempty"`
	EndTime *string `json:"end_time,omitempty"`
	ExternalCustomerId *string `json:"external_customer_id,omitempty"`
	Filters *map[string][]string `json:"filters,omitempty"`
	MeterId string `json:"meter_id"`
	StartTime *string `json:"start_time,omitempty"`
	WindowSize *TypesWindowSize `json:"window_size,omitempty"`
}

type _DtoGetUsageByMeterRequest DtoGetUsageByMeterRequest

// NewDtoGetUsageByMeterRequest instantiates a new DtoGetUsageByMeterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoGetUsageByMeterRequest(meterId string) *DtoGetUsageByMeterRequest {
	this := DtoGetUsageByMeterRequest{}
	this.MeterId = meterId
	return &this
}

// NewDtoGetUsageByMeterRequestWithDefaults instantiates a new DtoGetUsageByMeterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoGetUsageByMeterRequestWithDefaults() *DtoGetUsageByMeterRequest {
	this := DtoGetUsageByMeterRequest{}
	return &this
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *DtoGetUsageByMeterRequest) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageByMeterRequest) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *DtoGetUsageByMeterRequest) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *DtoGetUsageByMeterRequest) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *DtoGetUsageByMeterRequest) GetEndTime() string {
	if o == nil || IsNil(o.EndTime) {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageByMeterRequest) GetEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *DtoGetUsageByMeterRequest) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *DtoGetUsageByMeterRequest) SetEndTime(v string) {
	o.EndTime = &v
}

// GetExternalCustomerId returns the ExternalCustomerId field value if set, zero value otherwise.
func (o *DtoGetUsageByMeterRequest) GetExternalCustomerId() string {
	if o == nil || IsNil(o.ExternalCustomerId) {
		var ret string
		return ret
	}
	return *o.ExternalCustomerId
}

// GetExternalCustomerIdOk returns a tuple with the ExternalCustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageByMeterRequest) GetExternalCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalCustomerId) {
		return nil, false
	}
	return o.ExternalCustomerId, true
}

// HasExternalCustomerId returns a boolean if a field has been set.
func (o *DtoGetUsageByMeterRequest) HasExternalCustomerId() bool {
	if o != nil && !IsNil(o.ExternalCustomerId) {
		return true
	}

	return false
}

// SetExternalCustomerId gets a reference to the given string and assigns it to the ExternalCustomerId field.
func (o *DtoGetUsageByMeterRequest) SetExternalCustomerId(v string) {
	o.ExternalCustomerId = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *DtoGetUsageByMeterRequest) GetFilters() map[string][]string {
	if o == nil || IsNil(o.Filters) {
		var ret map[string][]string
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageByMeterRequest) GetFiltersOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *DtoGetUsageByMeterRequest) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given map[string][]string and assigns it to the Filters field.
func (o *DtoGetUsageByMeterRequest) SetFilters(v map[string][]string) {
	o.Filters = &v
}

// GetMeterId returns the MeterId field value
func (o *DtoGetUsageByMeterRequest) GetMeterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeterId
}

// GetMeterIdOk returns a tuple with the MeterId field value
// and a boolean to check if the value has been set.
func (o *DtoGetUsageByMeterRequest) GetMeterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeterId, true
}

// SetMeterId sets field value
func (o *DtoGetUsageByMeterRequest) SetMeterId(v string) {
	o.MeterId = v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *DtoGetUsageByMeterRequest) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageByMeterRequest) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *DtoGetUsageByMeterRequest) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *DtoGetUsageByMeterRequest) SetStartTime(v string) {
	o.StartTime = &v
}

// GetWindowSize returns the WindowSize field value if set, zero value otherwise.
func (o *DtoGetUsageByMeterRequest) GetWindowSize() TypesWindowSize {
	if o == nil || IsNil(o.WindowSize) {
		var ret TypesWindowSize
		return ret
	}
	return *o.WindowSize
}

// GetWindowSizeOk returns a tuple with the WindowSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageByMeterRequest) GetWindowSizeOk() (*TypesWindowSize, bool) {
	if o == nil || IsNil(o.WindowSize) {
		return nil, false
	}
	return o.WindowSize, true
}

// HasWindowSize returns a boolean if a field has been set.
func (o *DtoGetUsageByMeterRequest) HasWindowSize() bool {
	if o != nil && !IsNil(o.WindowSize) {
		return true
	}

	return false
}

// SetWindowSize gets a reference to the given TypesWindowSize and assigns it to the WindowSize field.
func (o *DtoGetUsageByMeterRequest) SetWindowSize(v TypesWindowSize) {
	o.WindowSize = &v
}

func (o DtoGetUsageByMeterRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoGetUsageByMeterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomerId) {
		toSerialize["customer_id"] = o.CustomerId
	}
	if !IsNil(o.EndTime) {
		toSerialize["end_time"] = o.EndTime
	}
	if !IsNil(o.ExternalCustomerId) {
		toSerialize["external_customer_id"] = o.ExternalCustomerId
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	toSerialize["meter_id"] = o.MeterId
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.WindowSize) {
		toSerialize["window_size"] = o.WindowSize
	}
	return toSerialize, nil
}

func (o *DtoGetUsageByMeterRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"meter_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtoGetUsageByMeterRequest := _DtoGetUsageByMeterRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtoGetUsageByMeterRequest)

	if err != nil {
		return err
	}

	*o = DtoGetUsageByMeterRequest(varDtoGetUsageByMeterRequest)

	return err
}

type NullableDtoGetUsageByMeterRequest struct {
	value *DtoGetUsageByMeterRequest
	isSet bool
}

func (v NullableDtoGetUsageByMeterRequest) Get() *DtoGetUsageByMeterRequest {
	return v.value
}

func (v *NullableDtoGetUsageByMeterRequest) Set(val *DtoGetUsageByMeterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoGetUsageByMeterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoGetUsageByMeterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoGetUsageByMeterRequest(val *DtoGetUsageByMeterRequest) *NullableDtoGetUsageByMeterRequest {
	return &NullableDtoGetUsageByMeterRequest{value: val, isSet: true}
}

func (v NullableDtoGetUsageByMeterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoGetUsageByMeterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


