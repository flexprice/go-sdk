/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"fmt"
)

// TypesDataType the model 'TypesDataType'
type TypesDataType string

// List of types.DataType
const (
	TYPESDATATYPE_DataTypeString TypesDataType = "string"
	TYPESDATATYPE_DataTypeNumber TypesDataType = "number"
	TYPESDATATYPE_DataTypeDate TypesDataType = "date"
	TYPESDATATYPE_DataTypeArray TypesDataType = "array"
)

// All allowed values of TypesDataType enum
var AllowedTypesDataTypeEnumValues = []TypesDataType{
	"string",
	"number",
	"date",
	"array",
}

func (v *TypesDataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesDataType(value)
	for _, existing := range AllowedTypesDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesDataType", value)
}

// NewTypesDataTypeFromValue returns a pointer to a valid TypesDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesDataTypeFromValue(v string) (*TypesDataType, error) {
	ev := TypesDataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesDataType: valid values are %v", v, AllowedTypesDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesDataType) IsValid() bool {
	for _, existing := range AllowedTypesDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.DataType value
func (v TypesDataType) Ptr() *TypesDataType {
	return &v
}

type NullableTypesDataType struct {
	value *TypesDataType
	isSet bool
}

func (v NullableTypesDataType) Get() *TypesDataType {
	return v.value
}

func (v *NullableTypesDataType) Set(val *TypesDataType) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesDataType) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesDataType(val *TypesDataType) *NullableTypesDataType {
	return &NullableTypesDataType{value: val, isSet: true}
}

func (v NullableTypesDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

