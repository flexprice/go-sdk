/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"fmt"
)

// TypesPriceType the model 'TypesPriceType'
type TypesPriceType string

// List of types.PriceType
const (
	TYPESPRICETYPE_PRICE_TYPE_USAGE TypesPriceType = "USAGE"
	TYPESPRICETYPE_PRICE_TYPE_FIXED TypesPriceType = "FIXED"
)

// All allowed values of TypesPriceType enum
var AllowedTypesPriceTypeEnumValues = []TypesPriceType{
	"USAGE",
	"FIXED",
}

func (v *TypesPriceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesPriceType(value)
	for _, existing := range AllowedTypesPriceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesPriceType", value)
}

// NewTypesPriceTypeFromValue returns a pointer to a valid TypesPriceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesPriceTypeFromValue(v string) (*TypesPriceType, error) {
	ev := TypesPriceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesPriceType: valid values are %v", v, AllowedTypesPriceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesPriceType) IsValid() bool {
	for _, existing := range AllowedTypesPriceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.PriceType value
func (v TypesPriceType) Ptr() *TypesPriceType {
	return &v
}

type NullableTypesPriceType struct {
	value *TypesPriceType
	isSet bool
}

func (v NullableTypesPriceType) Get() *TypesPriceType {
	return v.value
}

func (v *NullableTypesPriceType) Set(val *TypesPriceType) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesPriceType) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesPriceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesPriceType(val *TypesPriceType) *NullableTypesPriceType {
	return &NullableTypesPriceType{value: val, isSet: true}
}

func (v NullableTypesPriceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesPriceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

