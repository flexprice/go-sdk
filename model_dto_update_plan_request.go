/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
)

// checks if the DtoUpdatePlanRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoUpdatePlanRequest{}

// DtoUpdatePlanRequest struct for DtoUpdatePlanRequest
type DtoUpdatePlanRequest struct {
	Description *string `json:"description,omitempty"`
	Entitlements []DtoUpdatePlanEntitlementRequest `json:"entitlements,omitempty"`
	LookupKey *string `json:"lookup_key,omitempty"`
	Name *string `json:"name,omitempty"`
	Prices []DtoUpdatePlanPriceRequest `json:"prices,omitempty"`
}

// NewDtoUpdatePlanRequest instantiates a new DtoUpdatePlanRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoUpdatePlanRequest() *DtoUpdatePlanRequest {
	this := DtoUpdatePlanRequest{}
	return &this
}

// NewDtoUpdatePlanRequestWithDefaults instantiates a new DtoUpdatePlanRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoUpdatePlanRequestWithDefaults() *DtoUpdatePlanRequest {
	this := DtoUpdatePlanRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DtoUpdatePlanRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdatePlanRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DtoUpdatePlanRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DtoUpdatePlanRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEntitlements returns the Entitlements field value if set, zero value otherwise.
func (o *DtoUpdatePlanRequest) GetEntitlements() []DtoUpdatePlanEntitlementRequest {
	if o == nil || IsNil(o.Entitlements) {
		var ret []DtoUpdatePlanEntitlementRequest
		return ret
	}
	return o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdatePlanRequest) GetEntitlementsOk() ([]DtoUpdatePlanEntitlementRequest, bool) {
	if o == nil || IsNil(o.Entitlements) {
		return nil, false
	}
	return o.Entitlements, true
}

// HasEntitlements returns a boolean if a field has been set.
func (o *DtoUpdatePlanRequest) HasEntitlements() bool {
	if o != nil && !IsNil(o.Entitlements) {
		return true
	}

	return false
}

// SetEntitlements gets a reference to the given []DtoUpdatePlanEntitlementRequest and assigns it to the Entitlements field.
func (o *DtoUpdatePlanRequest) SetEntitlements(v []DtoUpdatePlanEntitlementRequest) {
	o.Entitlements = v
}

// GetLookupKey returns the LookupKey field value if set, zero value otherwise.
func (o *DtoUpdatePlanRequest) GetLookupKey() string {
	if o == nil || IsNil(o.LookupKey) {
		var ret string
		return ret
	}
	return *o.LookupKey
}

// GetLookupKeyOk returns a tuple with the LookupKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdatePlanRequest) GetLookupKeyOk() (*string, bool) {
	if o == nil || IsNil(o.LookupKey) {
		return nil, false
	}
	return o.LookupKey, true
}

// HasLookupKey returns a boolean if a field has been set.
func (o *DtoUpdatePlanRequest) HasLookupKey() bool {
	if o != nil && !IsNil(o.LookupKey) {
		return true
	}

	return false
}

// SetLookupKey gets a reference to the given string and assigns it to the LookupKey field.
func (o *DtoUpdatePlanRequest) SetLookupKey(v string) {
	o.LookupKey = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtoUpdatePlanRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdatePlanRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtoUpdatePlanRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtoUpdatePlanRequest) SetName(v string) {
	o.Name = &v
}

// GetPrices returns the Prices field value if set, zero value otherwise.
func (o *DtoUpdatePlanRequest) GetPrices() []DtoUpdatePlanPriceRequest {
	if o == nil || IsNil(o.Prices) {
		var ret []DtoUpdatePlanPriceRequest
		return ret
	}
	return o.Prices
}

// GetPricesOk returns a tuple with the Prices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdatePlanRequest) GetPricesOk() ([]DtoUpdatePlanPriceRequest, bool) {
	if o == nil || IsNil(o.Prices) {
		return nil, false
	}
	return o.Prices, true
}

// HasPrices returns a boolean if a field has been set.
func (o *DtoUpdatePlanRequest) HasPrices() bool {
	if o != nil && !IsNil(o.Prices) {
		return true
	}

	return false
}

// SetPrices gets a reference to the given []DtoUpdatePlanPriceRequest and assigns it to the Prices field.
func (o *DtoUpdatePlanRequest) SetPrices(v []DtoUpdatePlanPriceRequest) {
	o.Prices = v
}

func (o DtoUpdatePlanRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoUpdatePlanRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Entitlements) {
		toSerialize["entitlements"] = o.Entitlements
	}
	if !IsNil(o.LookupKey) {
		toSerialize["lookup_key"] = o.LookupKey
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Prices) {
		toSerialize["prices"] = o.Prices
	}
	return toSerialize, nil
}

type NullableDtoUpdatePlanRequest struct {
	value *DtoUpdatePlanRequest
	isSet bool
}

func (v NullableDtoUpdatePlanRequest) Get() *DtoUpdatePlanRequest {
	return v.value
}

func (v *NullableDtoUpdatePlanRequest) Set(val *DtoUpdatePlanRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoUpdatePlanRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoUpdatePlanRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoUpdatePlanRequest(val *DtoUpdatePlanRequest) *NullableDtoUpdatePlanRequest {
	return &NullableDtoUpdatePlanRequest{value: val, isSet: true}
}

func (v NullableDtoUpdatePlanRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoUpdatePlanRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


