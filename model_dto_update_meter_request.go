/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoUpdateMeterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoUpdateMeterRequest{}

// DtoUpdateMeterRequest struct for DtoUpdateMeterRequest
type DtoUpdateMeterRequest struct {
	Filters []MeterFilter `json:"filters,omitempty"`
}

// NewDtoUpdateMeterRequest instantiates a new DtoUpdateMeterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoUpdateMeterRequest() *DtoUpdateMeterRequest {
	this := DtoUpdateMeterRequest{}
	return &this
}

// NewDtoUpdateMeterRequestWithDefaults instantiates a new DtoUpdateMeterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoUpdateMeterRequestWithDefaults() *DtoUpdateMeterRequest {
	this := DtoUpdateMeterRequest{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *DtoUpdateMeterRequest) GetFilters() []MeterFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []MeterFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUpdateMeterRequest) GetFiltersOk() ([]MeterFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *DtoUpdateMeterRequest) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []MeterFilter and assigns it to the Filters field.
func (o *DtoUpdateMeterRequest) SetFilters(v []MeterFilter) {
	o.Filters = v
}

func (o DtoUpdateMeterRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoUpdateMeterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return toSerialize, nil
}

type NullableDtoUpdateMeterRequest struct {
	value *DtoUpdateMeterRequest
	isSet bool
}

func (v NullableDtoUpdateMeterRequest) Get() *DtoUpdateMeterRequest {
	return v.value
}

func (v *NullableDtoUpdateMeterRequest) Set(val *DtoUpdateMeterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoUpdateMeterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoUpdateMeterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoUpdateMeterRequest(val *DtoUpdateMeterRequest) *NullableDtoUpdateMeterRequest {
	return &NullableDtoUpdateMeterRequest{value: val, isSet: true}
}

func (v NullableDtoUpdateMeterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoUpdateMeterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


