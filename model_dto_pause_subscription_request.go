/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DtoPauseSubscriptionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoPauseSubscriptionRequest{}

// DtoPauseSubscriptionRequest struct for DtoPauseSubscriptionRequest
type DtoPauseSubscriptionRequest struct {
	DryRun *bool `json:"dry_run,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	PauseDays *int32 `json:"pause_days,omitempty"`
	PauseEnd *string `json:"pause_end,omitempty"`
	PauseMode TypesPauseMode `json:"pause_mode"`
	PauseStart *string `json:"pause_start,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

type _DtoPauseSubscriptionRequest DtoPauseSubscriptionRequest

// NewDtoPauseSubscriptionRequest instantiates a new DtoPauseSubscriptionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoPauseSubscriptionRequest(pauseMode TypesPauseMode) *DtoPauseSubscriptionRequest {
	this := DtoPauseSubscriptionRequest{}
	this.PauseMode = pauseMode
	return &this
}

// NewDtoPauseSubscriptionRequestWithDefaults instantiates a new DtoPauseSubscriptionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoPauseSubscriptionRequestWithDefaults() *DtoPauseSubscriptionRequest {
	this := DtoPauseSubscriptionRequest{}
	return &this
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *DtoPauseSubscriptionRequest) GetDryRun() bool {
	if o == nil || IsNil(o.DryRun) {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoPauseSubscriptionRequest) GetDryRunOk() (*bool, bool) {
	if o == nil || IsNil(o.DryRun) {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *DtoPauseSubscriptionRequest) HasDryRun() bool {
	if o != nil && !IsNil(o.DryRun) {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *DtoPauseSubscriptionRequest) SetDryRun(v bool) {
	o.DryRun = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DtoPauseSubscriptionRequest) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoPauseSubscriptionRequest) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DtoPauseSubscriptionRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *DtoPauseSubscriptionRequest) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetPauseDays returns the PauseDays field value if set, zero value otherwise.
func (o *DtoPauseSubscriptionRequest) GetPauseDays() int32 {
	if o == nil || IsNil(o.PauseDays) {
		var ret int32
		return ret
	}
	return *o.PauseDays
}

// GetPauseDaysOk returns a tuple with the PauseDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoPauseSubscriptionRequest) GetPauseDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.PauseDays) {
		return nil, false
	}
	return o.PauseDays, true
}

// HasPauseDays returns a boolean if a field has been set.
func (o *DtoPauseSubscriptionRequest) HasPauseDays() bool {
	if o != nil && !IsNil(o.PauseDays) {
		return true
	}

	return false
}

// SetPauseDays gets a reference to the given int32 and assigns it to the PauseDays field.
func (o *DtoPauseSubscriptionRequest) SetPauseDays(v int32) {
	o.PauseDays = &v
}

// GetPauseEnd returns the PauseEnd field value if set, zero value otherwise.
func (o *DtoPauseSubscriptionRequest) GetPauseEnd() string {
	if o == nil || IsNil(o.PauseEnd) {
		var ret string
		return ret
	}
	return *o.PauseEnd
}

// GetPauseEndOk returns a tuple with the PauseEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoPauseSubscriptionRequest) GetPauseEndOk() (*string, bool) {
	if o == nil || IsNil(o.PauseEnd) {
		return nil, false
	}
	return o.PauseEnd, true
}

// HasPauseEnd returns a boolean if a field has been set.
func (o *DtoPauseSubscriptionRequest) HasPauseEnd() bool {
	if o != nil && !IsNil(o.PauseEnd) {
		return true
	}

	return false
}

// SetPauseEnd gets a reference to the given string and assigns it to the PauseEnd field.
func (o *DtoPauseSubscriptionRequest) SetPauseEnd(v string) {
	o.PauseEnd = &v
}

// GetPauseMode returns the PauseMode field value
func (o *DtoPauseSubscriptionRequest) GetPauseMode() TypesPauseMode {
	if o == nil {
		var ret TypesPauseMode
		return ret
	}

	return o.PauseMode
}

// GetPauseModeOk returns a tuple with the PauseMode field value
// and a boolean to check if the value has been set.
func (o *DtoPauseSubscriptionRequest) GetPauseModeOk() (*TypesPauseMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PauseMode, true
}

// SetPauseMode sets field value
func (o *DtoPauseSubscriptionRequest) SetPauseMode(v TypesPauseMode) {
	o.PauseMode = v
}

// GetPauseStart returns the PauseStart field value if set, zero value otherwise.
func (o *DtoPauseSubscriptionRequest) GetPauseStart() string {
	if o == nil || IsNil(o.PauseStart) {
		var ret string
		return ret
	}
	return *o.PauseStart
}

// GetPauseStartOk returns a tuple with the PauseStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoPauseSubscriptionRequest) GetPauseStartOk() (*string, bool) {
	if o == nil || IsNil(o.PauseStart) {
		return nil, false
	}
	return o.PauseStart, true
}

// HasPauseStart returns a boolean if a field has been set.
func (o *DtoPauseSubscriptionRequest) HasPauseStart() bool {
	if o != nil && !IsNil(o.PauseStart) {
		return true
	}

	return false
}

// SetPauseStart gets a reference to the given string and assigns it to the PauseStart field.
func (o *DtoPauseSubscriptionRequest) SetPauseStart(v string) {
	o.PauseStart = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *DtoPauseSubscriptionRequest) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoPauseSubscriptionRequest) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *DtoPauseSubscriptionRequest) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *DtoPauseSubscriptionRequest) SetReason(v string) {
	o.Reason = &v
}

func (o DtoPauseSubscriptionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoPauseSubscriptionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DryRun) {
		toSerialize["dry_run"] = o.DryRun
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.PauseDays) {
		toSerialize["pause_days"] = o.PauseDays
	}
	if !IsNil(o.PauseEnd) {
		toSerialize["pause_end"] = o.PauseEnd
	}
	toSerialize["pause_mode"] = o.PauseMode
	if !IsNil(o.PauseStart) {
		toSerialize["pause_start"] = o.PauseStart
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

func (o *DtoPauseSubscriptionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pause_mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtoPauseSubscriptionRequest := _DtoPauseSubscriptionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtoPauseSubscriptionRequest)

	if err != nil {
		return err
	}

	*o = DtoPauseSubscriptionRequest(varDtoPauseSubscriptionRequest)

	return err
}

type NullableDtoPauseSubscriptionRequest struct {
	value *DtoPauseSubscriptionRequest
	isSet bool
}

func (v NullableDtoPauseSubscriptionRequest) Get() *DtoPauseSubscriptionRequest {
	return v.value
}

func (v *NullableDtoPauseSubscriptionRequest) Set(val *DtoPauseSubscriptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoPauseSubscriptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoPauseSubscriptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoPauseSubscriptionRequest(val *DtoPauseSubscriptionRequest) *NullableDtoPauseSubscriptionRequest {
	return &NullableDtoPauseSubscriptionRequest{value: val, isSet: true}
}

func (v NullableDtoPauseSubscriptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoPauseSubscriptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


