/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the PricePriceTier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PricePriceTier{}

// PricePriceTier struct for PricePriceTier
type PricePriceTier struct {
	// FlatAmount is the flat amount for the given tier and it is applied on top of the unit amount*quantity. It solves cases in banking like 2.7% + 5c
	FlatAmount *float32 `json:"flat_amount,omitempty"`
	// UnitAmount is the amount per unit for the given tier
	UnitAmount *float32 `json:"unit_amount,omitempty"`
	// Upto is the quantity up to which this tier applies. It is null for the last tier
	UpTo *int32 `json:"up_to,omitempty"`
}

// NewPricePriceTier instantiates a new PricePriceTier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPricePriceTier() *PricePriceTier {
	this := PricePriceTier{}
	return &this
}

// NewPricePriceTierWithDefaults instantiates a new PricePriceTier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPricePriceTierWithDefaults() *PricePriceTier {
	this := PricePriceTier{}
	return &this
}

// GetFlatAmount returns the FlatAmount field value if set, zero value otherwise.
func (o *PricePriceTier) GetFlatAmount() float32 {
	if o == nil || IsNil(o.FlatAmount) {
		var ret float32
		return ret
	}
	return *o.FlatAmount
}

// GetFlatAmountOk returns a tuple with the FlatAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricePriceTier) GetFlatAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.FlatAmount) {
		return nil, false
	}
	return o.FlatAmount, true
}

// HasFlatAmount returns a boolean if a field has been set.
func (o *PricePriceTier) HasFlatAmount() bool {
	if o != nil && !IsNil(o.FlatAmount) {
		return true
	}

	return false
}

// SetFlatAmount gets a reference to the given float32 and assigns it to the FlatAmount field.
func (o *PricePriceTier) SetFlatAmount(v float32) {
	o.FlatAmount = &v
}

// GetUnitAmount returns the UnitAmount field value if set, zero value otherwise.
func (o *PricePriceTier) GetUnitAmount() float32 {
	if o == nil || IsNil(o.UnitAmount) {
		var ret float32
		return ret
	}
	return *o.UnitAmount
}

// GetUnitAmountOk returns a tuple with the UnitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricePriceTier) GetUnitAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.UnitAmount) {
		return nil, false
	}
	return o.UnitAmount, true
}

// HasUnitAmount returns a boolean if a field has been set.
func (o *PricePriceTier) HasUnitAmount() bool {
	if o != nil && !IsNil(o.UnitAmount) {
		return true
	}

	return false
}

// SetUnitAmount gets a reference to the given float32 and assigns it to the UnitAmount field.
func (o *PricePriceTier) SetUnitAmount(v float32) {
	o.UnitAmount = &v
}

// GetUpTo returns the UpTo field value if set, zero value otherwise.
func (o *PricePriceTier) GetUpTo() int32 {
	if o == nil || IsNil(o.UpTo) {
		var ret int32
		return ret
	}
	return *o.UpTo
}

// GetUpToOk returns a tuple with the UpTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricePriceTier) GetUpToOk() (*int32, bool) {
	if o == nil || IsNil(o.UpTo) {
		return nil, false
	}
	return o.UpTo, true
}

// HasUpTo returns a boolean if a field has been set.
func (o *PricePriceTier) HasUpTo() bool {
	if o != nil && !IsNil(o.UpTo) {
		return true
	}

	return false
}

// SetUpTo gets a reference to the given int32 and assigns it to the UpTo field.
func (o *PricePriceTier) SetUpTo(v int32) {
	o.UpTo = &v
}

func (o PricePriceTier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PricePriceTier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FlatAmount) {
		toSerialize["flat_amount"] = o.FlatAmount
	}
	if !IsNil(o.UnitAmount) {
		toSerialize["unit_amount"] = o.UnitAmount
	}
	if !IsNil(o.UpTo) {
		toSerialize["up_to"] = o.UpTo
	}
	return toSerialize, nil
}

type NullablePricePriceTier struct {
	value *PricePriceTier
	isSet bool
}

func (v NullablePricePriceTier) Get() *PricePriceTier {
	return v.value
}

func (v *NullablePricePriceTier) Set(val *PricePriceTier) {
	v.value = val
	v.isSet = true
}

func (v NullablePricePriceTier) IsSet() bool {
	return v.isSet
}

func (v *NullablePricePriceTier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePricePriceTier(val *PricePriceTier) *NullablePricePriceTier {
	return &NullablePricePriceTier{value: val, isSet: true}
}

func (v NullablePricePriceTier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePricePriceTier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


