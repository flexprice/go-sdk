/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the TypesFeatureFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesFeatureFilter{}

// TypesFeatureFilter struct for TypesFeatureFilter
type TypesFeatureFilter struct {
	EndTime *string `json:"end_time,omitempty"`
	Expand *string `json:"expand,omitempty"`
	// Feature specific filters
	FeatureIds []string `json:"feature_ids,omitempty"`
	// filters allows complex filtering based on multiple fields
	Filters []TypesFilterCondition `json:"filters,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
	LookupKey *string `json:"lookup_key,omitempty"`
	MeterIds []string `json:"meter_ids,omitempty"`
	NameContains *string `json:"name_contains,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
	Order *string `json:"order,omitempty"`
	Sort []TypesSortCondition `json:"sort,omitempty"`
	StartTime *string `json:"start_time,omitempty"`
	Status *TypesStatus `json:"status,omitempty"`
}

// NewTypesFeatureFilter instantiates a new TypesFeatureFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesFeatureFilter() *TypesFeatureFilter {
	this := TypesFeatureFilter{}
	return &this
}

// NewTypesFeatureFilterWithDefaults instantiates a new TypesFeatureFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesFeatureFilterWithDefaults() *TypesFeatureFilter {
	this := TypesFeatureFilter{}
	return &this
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *TypesFeatureFilter) GetEndTime() string {
	if o == nil || IsNil(o.EndTime) {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFeatureFilter) GetEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *TypesFeatureFilter) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *TypesFeatureFilter) SetEndTime(v string) {
	o.EndTime = &v
}

// GetExpand returns the Expand field value if set, zero value otherwise.
func (o *TypesFeatureFilter) GetExpand() string {
	if o == nil || IsNil(o.Expand) {
		var ret string
		return ret
	}
	return *o.Expand
}

// GetExpandOk returns a tuple with the Expand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFeatureFilter) GetExpandOk() (*string, bool) {
	if o == nil || IsNil(o.Expand) {
		return nil, false
	}
	return o.Expand, true
}

// HasExpand returns a boolean if a field has been set.
func (o *TypesFeatureFilter) HasExpand() bool {
	if o != nil && !IsNil(o.Expand) {
		return true
	}

	return false
}

// SetExpand gets a reference to the given string and assigns it to the Expand field.
func (o *TypesFeatureFilter) SetExpand(v string) {
	o.Expand = &v
}

// GetFeatureIds returns the FeatureIds field value if set, zero value otherwise.
func (o *TypesFeatureFilter) GetFeatureIds() []string {
	if o == nil || IsNil(o.FeatureIds) {
		var ret []string
		return ret
	}
	return o.FeatureIds
}

// GetFeatureIdsOk returns a tuple with the FeatureIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFeatureFilter) GetFeatureIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FeatureIds) {
		return nil, false
	}
	return o.FeatureIds, true
}

// HasFeatureIds returns a boolean if a field has been set.
func (o *TypesFeatureFilter) HasFeatureIds() bool {
	if o != nil && !IsNil(o.FeatureIds) {
		return true
	}

	return false
}

// SetFeatureIds gets a reference to the given []string and assigns it to the FeatureIds field.
func (o *TypesFeatureFilter) SetFeatureIds(v []string) {
	o.FeatureIds = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *TypesFeatureFilter) GetFilters() []TypesFilterCondition {
	if o == nil || IsNil(o.Filters) {
		var ret []TypesFilterCondition
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFeatureFilter) GetFiltersOk() ([]TypesFilterCondition, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *TypesFeatureFilter) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []TypesFilterCondition and assigns it to the Filters field.
func (o *TypesFeatureFilter) SetFilters(v []TypesFilterCondition) {
	o.Filters = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *TypesFeatureFilter) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFeatureFilter) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *TypesFeatureFilter) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *TypesFeatureFilter) SetLimit(v int32) {
	o.Limit = &v
}

// GetLookupKey returns the LookupKey field value if set, zero value otherwise.
func (o *TypesFeatureFilter) GetLookupKey() string {
	if o == nil || IsNil(o.LookupKey) {
		var ret string
		return ret
	}
	return *o.LookupKey
}

// GetLookupKeyOk returns a tuple with the LookupKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFeatureFilter) GetLookupKeyOk() (*string, bool) {
	if o == nil || IsNil(o.LookupKey) {
		return nil, false
	}
	return o.LookupKey, true
}

// HasLookupKey returns a boolean if a field has been set.
func (o *TypesFeatureFilter) HasLookupKey() bool {
	if o != nil && !IsNil(o.LookupKey) {
		return true
	}

	return false
}

// SetLookupKey gets a reference to the given string and assigns it to the LookupKey field.
func (o *TypesFeatureFilter) SetLookupKey(v string) {
	o.LookupKey = &v
}

// GetMeterIds returns the MeterIds field value if set, zero value otherwise.
func (o *TypesFeatureFilter) GetMeterIds() []string {
	if o == nil || IsNil(o.MeterIds) {
		var ret []string
		return ret
	}
	return o.MeterIds
}

// GetMeterIdsOk returns a tuple with the MeterIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFeatureFilter) GetMeterIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.MeterIds) {
		return nil, false
	}
	return o.MeterIds, true
}

// HasMeterIds returns a boolean if a field has been set.
func (o *TypesFeatureFilter) HasMeterIds() bool {
	if o != nil && !IsNil(o.MeterIds) {
		return true
	}

	return false
}

// SetMeterIds gets a reference to the given []string and assigns it to the MeterIds field.
func (o *TypesFeatureFilter) SetMeterIds(v []string) {
	o.MeterIds = v
}

// GetNameContains returns the NameContains field value if set, zero value otherwise.
func (o *TypesFeatureFilter) GetNameContains() string {
	if o == nil || IsNil(o.NameContains) {
		var ret string
		return ret
	}
	return *o.NameContains
}

// GetNameContainsOk returns a tuple with the NameContains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFeatureFilter) GetNameContainsOk() (*string, bool) {
	if o == nil || IsNil(o.NameContains) {
		return nil, false
	}
	return o.NameContains, true
}

// HasNameContains returns a boolean if a field has been set.
func (o *TypesFeatureFilter) HasNameContains() bool {
	if o != nil && !IsNil(o.NameContains) {
		return true
	}

	return false
}

// SetNameContains gets a reference to the given string and assigns it to the NameContains field.
func (o *TypesFeatureFilter) SetNameContains(v string) {
	o.NameContains = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *TypesFeatureFilter) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFeatureFilter) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *TypesFeatureFilter) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *TypesFeatureFilter) SetOffset(v int32) {
	o.Offset = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *TypesFeatureFilter) GetOrder() string {
	if o == nil || IsNil(o.Order) {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFeatureFilter) GetOrderOk() (*string, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *TypesFeatureFilter) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *TypesFeatureFilter) SetOrder(v string) {
	o.Order = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *TypesFeatureFilter) GetSort() []TypesSortCondition {
	if o == nil || IsNil(o.Sort) {
		var ret []TypesSortCondition
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFeatureFilter) GetSortOk() ([]TypesSortCondition, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *TypesFeatureFilter) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given []TypesSortCondition and assigns it to the Sort field.
func (o *TypesFeatureFilter) SetSort(v []TypesSortCondition) {
	o.Sort = v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *TypesFeatureFilter) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFeatureFilter) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *TypesFeatureFilter) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *TypesFeatureFilter) SetStartTime(v string) {
	o.StartTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TypesFeatureFilter) GetStatus() TypesStatus {
	if o == nil || IsNil(o.Status) {
		var ret TypesStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFeatureFilter) GetStatusOk() (*TypesStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TypesFeatureFilter) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TypesStatus and assigns it to the Status field.
func (o *TypesFeatureFilter) SetStatus(v TypesStatus) {
	o.Status = &v
}

func (o TypesFeatureFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesFeatureFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndTime) {
		toSerialize["end_time"] = o.EndTime
	}
	if !IsNil(o.Expand) {
		toSerialize["expand"] = o.Expand
	}
	if !IsNil(o.FeatureIds) {
		toSerialize["feature_ids"] = o.FeatureIds
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.LookupKey) {
		toSerialize["lookup_key"] = o.LookupKey
	}
	if !IsNil(o.MeterIds) {
		toSerialize["meter_ids"] = o.MeterIds
	}
	if !IsNil(o.NameContains) {
		toSerialize["name_contains"] = o.NameContains
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableTypesFeatureFilter struct {
	value *TypesFeatureFilter
	isSet bool
}

func (v NullableTypesFeatureFilter) Get() *TypesFeatureFilter {
	return v.value
}

func (v *NullableTypesFeatureFilter) Set(val *TypesFeatureFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesFeatureFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesFeatureFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesFeatureFilter(val *TypesFeatureFilter) *NullableTypesFeatureFilter {
	return &NullableTypesFeatureFilter{value: val, isSet: true}
}

func (v NullableTypesFeatureFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesFeatureFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


