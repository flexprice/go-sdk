/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
)

// checks if the DtoAuthResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoAuthResponse{}

// DtoAuthResponse struct for DtoAuthResponse
type DtoAuthResponse struct {
	TenantId *string `json:"tenant_id,omitempty"`
	Token *string `json:"token,omitempty"`
	UserId *string `json:"user_id,omitempty"`
}

// NewDtoAuthResponse instantiates a new DtoAuthResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoAuthResponse() *DtoAuthResponse {
	this := DtoAuthResponse{}
	return &this
}

// NewDtoAuthResponseWithDefaults instantiates a new DtoAuthResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoAuthResponseWithDefaults() *DtoAuthResponse {
	this := DtoAuthResponse{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *DtoAuthResponse) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAuthResponse) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *DtoAuthResponse) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *DtoAuthResponse) SetTenantId(v string) {
	o.TenantId = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *DtoAuthResponse) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAuthResponse) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *DtoAuthResponse) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *DtoAuthResponse) SetToken(v string) {
	o.Token = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *DtoAuthResponse) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAuthResponse) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *DtoAuthResponse) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *DtoAuthResponse) SetUserId(v string) {
	o.UserId = &v
}

func (o DtoAuthResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoAuthResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenant_id"] = o.TenantId
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	return toSerialize, nil
}

type NullableDtoAuthResponse struct {
	value *DtoAuthResponse
	isSet bool
}

func (v NullableDtoAuthResponse) Get() *DtoAuthResponse {
	return v.value
}

func (v *NullableDtoAuthResponse) Set(val *DtoAuthResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoAuthResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoAuthResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoAuthResponse(val *DtoAuthResponse) *NullableDtoAuthResponse {
	return &NullableDtoAuthResponse{value: val, isSet: true}
}

func (v NullableDtoAuthResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoAuthResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


