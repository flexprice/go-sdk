/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
)

// checks if the DtoAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoAddress{}

// DtoAddress struct for DtoAddress
type DtoAddress struct {
	AddressCity *string `json:"address_city,omitempty"`
	AddressCountry *string `json:"address_country,omitempty"`
	AddressLine1 *string `json:"address_line1,omitempty"`
	AddressLine2 *string `json:"address_line2,omitempty"`
	AddressPostalCode *string `json:"address_postal_code,omitempty"`
	AddressState *string `json:"address_state,omitempty"`
}

// NewDtoAddress instantiates a new DtoAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoAddress() *DtoAddress {
	this := DtoAddress{}
	return &this
}

// NewDtoAddressWithDefaults instantiates a new DtoAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoAddressWithDefaults() *DtoAddress {
	this := DtoAddress{}
	return &this
}

// GetAddressCity returns the AddressCity field value if set, zero value otherwise.
func (o *DtoAddress) GetAddressCity() string {
	if o == nil || IsNil(o.AddressCity) {
		var ret string
		return ret
	}
	return *o.AddressCity
}

// GetAddressCityOk returns a tuple with the AddressCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAddress) GetAddressCityOk() (*string, bool) {
	if o == nil || IsNil(o.AddressCity) {
		return nil, false
	}
	return o.AddressCity, true
}

// HasAddressCity returns a boolean if a field has been set.
func (o *DtoAddress) HasAddressCity() bool {
	if o != nil && !IsNil(o.AddressCity) {
		return true
	}

	return false
}

// SetAddressCity gets a reference to the given string and assigns it to the AddressCity field.
func (o *DtoAddress) SetAddressCity(v string) {
	o.AddressCity = &v
}

// GetAddressCountry returns the AddressCountry field value if set, zero value otherwise.
func (o *DtoAddress) GetAddressCountry() string {
	if o == nil || IsNil(o.AddressCountry) {
		var ret string
		return ret
	}
	return *o.AddressCountry
}

// GetAddressCountryOk returns a tuple with the AddressCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAddress) GetAddressCountryOk() (*string, bool) {
	if o == nil || IsNil(o.AddressCountry) {
		return nil, false
	}
	return o.AddressCountry, true
}

// HasAddressCountry returns a boolean if a field has been set.
func (o *DtoAddress) HasAddressCountry() bool {
	if o != nil && !IsNil(o.AddressCountry) {
		return true
	}

	return false
}

// SetAddressCountry gets a reference to the given string and assigns it to the AddressCountry field.
func (o *DtoAddress) SetAddressCountry(v string) {
	o.AddressCountry = &v
}

// GetAddressLine1 returns the AddressLine1 field value if set, zero value otherwise.
func (o *DtoAddress) GetAddressLine1() string {
	if o == nil || IsNil(o.AddressLine1) {
		var ret string
		return ret
	}
	return *o.AddressLine1
}

// GetAddressLine1Ok returns a tuple with the AddressLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAddress) GetAddressLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.AddressLine1) {
		return nil, false
	}
	return o.AddressLine1, true
}

// HasAddressLine1 returns a boolean if a field has been set.
func (o *DtoAddress) HasAddressLine1() bool {
	if o != nil && !IsNil(o.AddressLine1) {
		return true
	}

	return false
}

// SetAddressLine1 gets a reference to the given string and assigns it to the AddressLine1 field.
func (o *DtoAddress) SetAddressLine1(v string) {
	o.AddressLine1 = &v
}

// GetAddressLine2 returns the AddressLine2 field value if set, zero value otherwise.
func (o *DtoAddress) GetAddressLine2() string {
	if o == nil || IsNil(o.AddressLine2) {
		var ret string
		return ret
	}
	return *o.AddressLine2
}

// GetAddressLine2Ok returns a tuple with the AddressLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAddress) GetAddressLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.AddressLine2) {
		return nil, false
	}
	return o.AddressLine2, true
}

// HasAddressLine2 returns a boolean if a field has been set.
func (o *DtoAddress) HasAddressLine2() bool {
	if o != nil && !IsNil(o.AddressLine2) {
		return true
	}

	return false
}

// SetAddressLine2 gets a reference to the given string and assigns it to the AddressLine2 field.
func (o *DtoAddress) SetAddressLine2(v string) {
	o.AddressLine2 = &v
}

// GetAddressPostalCode returns the AddressPostalCode field value if set, zero value otherwise.
func (o *DtoAddress) GetAddressPostalCode() string {
	if o == nil || IsNil(o.AddressPostalCode) {
		var ret string
		return ret
	}
	return *o.AddressPostalCode
}

// GetAddressPostalCodeOk returns a tuple with the AddressPostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAddress) GetAddressPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AddressPostalCode) {
		return nil, false
	}
	return o.AddressPostalCode, true
}

// HasAddressPostalCode returns a boolean if a field has been set.
func (o *DtoAddress) HasAddressPostalCode() bool {
	if o != nil && !IsNil(o.AddressPostalCode) {
		return true
	}

	return false
}

// SetAddressPostalCode gets a reference to the given string and assigns it to the AddressPostalCode field.
func (o *DtoAddress) SetAddressPostalCode(v string) {
	o.AddressPostalCode = &v
}

// GetAddressState returns the AddressState field value if set, zero value otherwise.
func (o *DtoAddress) GetAddressState() string {
	if o == nil || IsNil(o.AddressState) {
		var ret string
		return ret
	}
	return *o.AddressState
}

// GetAddressStateOk returns a tuple with the AddressState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoAddress) GetAddressStateOk() (*string, bool) {
	if o == nil || IsNil(o.AddressState) {
		return nil, false
	}
	return o.AddressState, true
}

// HasAddressState returns a boolean if a field has been set.
func (o *DtoAddress) HasAddressState() bool {
	if o != nil && !IsNil(o.AddressState) {
		return true
	}

	return false
}

// SetAddressState gets a reference to the given string and assigns it to the AddressState field.
func (o *DtoAddress) SetAddressState(v string) {
	o.AddressState = &v
}

func (o DtoAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddressCity) {
		toSerialize["address_city"] = o.AddressCity
	}
	if !IsNil(o.AddressCountry) {
		toSerialize["address_country"] = o.AddressCountry
	}
	if !IsNil(o.AddressLine1) {
		toSerialize["address_line1"] = o.AddressLine1
	}
	if !IsNil(o.AddressLine2) {
		toSerialize["address_line2"] = o.AddressLine2
	}
	if !IsNil(o.AddressPostalCode) {
		toSerialize["address_postal_code"] = o.AddressPostalCode
	}
	if !IsNil(o.AddressState) {
		toSerialize["address_state"] = o.AddressState
	}
	return toSerialize, nil
}

type NullableDtoAddress struct {
	value *DtoAddress
	isSet bool
}

func (v NullableDtoAddress) Get() *DtoAddress {
	return v.value
}

func (v *NullableDtoAddress) Set(val *DtoAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoAddress(val *DtoAddress) *NullableDtoAddress {
	return &NullableDtoAddress{value: val, isSet: true}
}

func (v NullableDtoAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


