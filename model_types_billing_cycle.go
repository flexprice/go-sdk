/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"fmt"
)

// TypesBillingCycle the model 'TypesBillingCycle'
type TypesBillingCycle string

// List of types.BillingCycle
const (
	TYPESBILLINGCYCLE_BillingCycleAnniversary TypesBillingCycle = "anniversary"
	TYPESBILLINGCYCLE_BillingCycleCalendar TypesBillingCycle = "calendar"
)

// All allowed values of TypesBillingCycle enum
var AllowedTypesBillingCycleEnumValues = []TypesBillingCycle{
	"anniversary",
	"calendar",
}

func (v *TypesBillingCycle) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesBillingCycle(value)
	for _, existing := range AllowedTypesBillingCycleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesBillingCycle", value)
}

// NewTypesBillingCycleFromValue returns a pointer to a valid TypesBillingCycle
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesBillingCycleFromValue(v string) (*TypesBillingCycle, error) {
	ev := TypesBillingCycle(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesBillingCycle: valid values are %v", v, AllowedTypesBillingCycleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesBillingCycle) IsValid() bool {
	for _, existing := range AllowedTypesBillingCycleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.BillingCycle value
func (v TypesBillingCycle) Ptr() *TypesBillingCycle {
	return &v
}

type NullableTypesBillingCycle struct {
	value *TypesBillingCycle
	isSet bool
}

func (v NullableTypesBillingCycle) Get() *TypesBillingCycle {
	return v.value
}

func (v *NullableTypesBillingCycle) Set(val *TypesBillingCycle) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesBillingCycle) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesBillingCycle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesBillingCycle(val *TypesBillingCycle) *NullableTypesBillingCycle {
	return &NullableTypesBillingCycle{value: val, isSet: true}
}

func (v NullableTypesBillingCycle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesBillingCycle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

