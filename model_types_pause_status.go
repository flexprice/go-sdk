/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"fmt"
)

// TypesPauseStatus the model 'TypesPauseStatus'
type TypesPauseStatus string

// List of types.PauseStatus
const (
	TYPESPAUSESTATUS_PauseStatusNone TypesPauseStatus = "none"
	TYPESPAUSESTATUS_PauseStatusActive TypesPauseStatus = "active"
	TYPESPAUSESTATUS_PauseStatusScheduled TypesPauseStatus = "scheduled"
	TYPESPAUSESTATUS_PauseStatusCompleted TypesPauseStatus = "completed"
	TYPESPAUSESTATUS_PauseStatusCancelled TypesPauseStatus = "cancelled"
)

// All allowed values of TypesPauseStatus enum
var AllowedTypesPauseStatusEnumValues = []TypesPauseStatus{
	"none",
	"active",
	"scheduled",
	"completed",
	"cancelled",
}

func (v *TypesPauseStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesPauseStatus(value)
	for _, existing := range AllowedTypesPauseStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesPauseStatus", value)
}

// NewTypesPauseStatusFromValue returns a pointer to a valid TypesPauseStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesPauseStatusFromValue(v string) (*TypesPauseStatus, error) {
	ev := TypesPauseStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesPauseStatus: valid values are %v", v, AllowedTypesPauseStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesPauseStatus) IsValid() bool {
	for _, existing := range AllowedTypesPauseStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.PauseStatus value
func (v TypesPauseStatus) Ptr() *TypesPauseStatus {
	return &v
}

type NullableTypesPauseStatus struct {
	value *TypesPauseStatus
	isSet bool
}

func (v NullableTypesPauseStatus) Get() *TypesPauseStatus {
	return v.value
}

func (v *NullableTypesPauseStatus) Set(val *TypesPauseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesPauseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesPauseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesPauseStatus(val *TypesPauseStatus) *NullableTypesPauseStatus {
	return &NullableTypesPauseStatus{value: val, isSet: true}
}

func (v NullableTypesPauseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesPauseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

