/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DtoCreateMeterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoCreateMeterRequest{}

// DtoCreateMeterRequest struct for DtoCreateMeterRequest
type DtoCreateMeterRequest struct {
	Aggregation MeterAggregation `json:"aggregation"`
	EventName string `json:"event_name"`
	Filters []MeterFilter `json:"filters,omitempty"`
	Name string `json:"name"`
	ResetUsage TypesResetUsage `json:"reset_usage"`
}

type _DtoCreateMeterRequest DtoCreateMeterRequest

// NewDtoCreateMeterRequest instantiates a new DtoCreateMeterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoCreateMeterRequest(aggregation MeterAggregation, eventName string, name string, resetUsage TypesResetUsage) *DtoCreateMeterRequest {
	this := DtoCreateMeterRequest{}
	this.Aggregation = aggregation
	this.EventName = eventName
	this.Name = name
	this.ResetUsage = resetUsage
	return &this
}

// NewDtoCreateMeterRequestWithDefaults instantiates a new DtoCreateMeterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoCreateMeterRequestWithDefaults() *DtoCreateMeterRequest {
	this := DtoCreateMeterRequest{}
	return &this
}

// GetAggregation returns the Aggregation field value
func (o *DtoCreateMeterRequest) GetAggregation() MeterAggregation {
	if o == nil {
		var ret MeterAggregation
		return ret
	}

	return o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value
// and a boolean to check if the value has been set.
func (o *DtoCreateMeterRequest) GetAggregationOk() (*MeterAggregation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aggregation, true
}

// SetAggregation sets field value
func (o *DtoCreateMeterRequest) SetAggregation(v MeterAggregation) {
	o.Aggregation = v
}

// GetEventName returns the EventName field value
func (o *DtoCreateMeterRequest) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *DtoCreateMeterRequest) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *DtoCreateMeterRequest) SetEventName(v string) {
	o.EventName = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *DtoCreateMeterRequest) GetFilters() []MeterFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []MeterFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoCreateMeterRequest) GetFiltersOk() ([]MeterFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *DtoCreateMeterRequest) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []MeterFilter and assigns it to the Filters field.
func (o *DtoCreateMeterRequest) SetFilters(v []MeterFilter) {
	o.Filters = v
}

// GetName returns the Name field value
func (o *DtoCreateMeterRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DtoCreateMeterRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DtoCreateMeterRequest) SetName(v string) {
	o.Name = v
}

// GetResetUsage returns the ResetUsage field value
func (o *DtoCreateMeterRequest) GetResetUsage() TypesResetUsage {
	if o == nil {
		var ret TypesResetUsage
		return ret
	}

	return o.ResetUsage
}

// GetResetUsageOk returns a tuple with the ResetUsage field value
// and a boolean to check if the value has been set.
func (o *DtoCreateMeterRequest) GetResetUsageOk() (*TypesResetUsage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResetUsage, true
}

// SetResetUsage sets field value
func (o *DtoCreateMeterRequest) SetResetUsage(v TypesResetUsage) {
	o.ResetUsage = v
}

func (o DtoCreateMeterRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoCreateMeterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aggregation"] = o.Aggregation
	toSerialize["event_name"] = o.EventName
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	toSerialize["name"] = o.Name
	toSerialize["reset_usage"] = o.ResetUsage
	return toSerialize, nil
}

func (o *DtoCreateMeterRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregation",
		"event_name",
		"name",
		"reset_usage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtoCreateMeterRequest := _DtoCreateMeterRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtoCreateMeterRequest)

	if err != nil {
		return err
	}

	*o = DtoCreateMeterRequest(varDtoCreateMeterRequest)

	return err
}

type NullableDtoCreateMeterRequest struct {
	value *DtoCreateMeterRequest
	isSet bool
}

func (v NullableDtoCreateMeterRequest) Get() *DtoCreateMeterRequest {
	return v.value
}

func (v *NullableDtoCreateMeterRequest) Set(val *DtoCreateMeterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoCreateMeterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoCreateMeterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoCreateMeterRequest(val *DtoCreateMeterRequest) *NullableDtoCreateMeterRequest {
	return &NullableDtoCreateMeterRequest{value: val, isSet: true}
}

func (v NullableDtoCreateMeterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoCreateMeterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


