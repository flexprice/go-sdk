/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"fmt"
)

// TypesFileType the model 'TypesFileType'
type TypesFileType string

// List of types.FileType
const (
	TYPESFILETYPE_FileTypeCSV TypesFileType = "CSV"
	TYPESFILETYPE_FileTypeJSON TypesFileType = "JSON"
)

// All allowed values of TypesFileType enum
var AllowedTypesFileTypeEnumValues = []TypesFileType{
	"CSV",
	"JSON",
}

func (v *TypesFileType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesFileType(value)
	for _, existing := range AllowedTypesFileTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesFileType", value)
}

// NewTypesFileTypeFromValue returns a pointer to a valid TypesFileType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesFileTypeFromValue(v string) (*TypesFileType, error) {
	ev := TypesFileType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesFileType: valid values are %v", v, AllowedTypesFileTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesFileType) IsValid() bool {
	for _, existing := range AllowedTypesFileTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.FileType value
func (v TypesFileType) Ptr() *TypesFileType {
	return &v
}

type NullableTypesFileType struct {
	value *TypesFileType
	isSet bool
}

func (v NullableTypesFileType) Get() *TypesFileType {
	return v.value
}

func (v *NullableTypesFileType) Set(val *TypesFileType) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesFileType) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesFileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesFileType(val *TypesFileType) *NullableTypesFileType {
	return &NullableTypesFileType{value: val, isSet: true}
}

func (v NullableTypesFileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesFileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

