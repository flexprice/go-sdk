/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"fmt"
)

// TypesResumeMode the model 'TypesResumeMode'
type TypesResumeMode string

// List of types.ResumeMode
const (
	TYPESRESUMEMODE_ResumeModeImmediate TypesResumeMode = "immediate"
	TYPESRESUMEMODE_ResumeModeScheduled TypesResumeMode = "scheduled"
	TYPESRESUMEMODE_ResumeModeAuto TypesResumeMode = "auto"
)

// All allowed values of TypesResumeMode enum
var AllowedTypesResumeModeEnumValues = []TypesResumeMode{
	"immediate",
	"scheduled",
	"auto",
}

func (v *TypesResumeMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesResumeMode(value)
	for _, existing := range AllowedTypesResumeModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesResumeMode", value)
}

// NewTypesResumeModeFromValue returns a pointer to a valid TypesResumeMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesResumeModeFromValue(v string) (*TypesResumeMode, error) {
	ev := TypesResumeMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesResumeMode: valid values are %v", v, AllowedTypesResumeModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesResumeMode) IsValid() bool {
	for _, existing := range AllowedTypesResumeModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.ResumeMode value
func (v TypesResumeMode) Ptr() *TypesResumeMode {
	return &v
}

type NullableTypesResumeMode struct {
	value *TypesResumeMode
	isSet bool
}

func (v NullableTypesResumeMode) Get() *TypesResumeMode {
	return v.value
}

func (v *NullableTypesResumeMode) Set(val *TypesResumeMode) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesResumeMode) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesResumeMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesResumeMode(val *TypesResumeMode) *NullableTypesResumeMode {
	return &NullableTypesResumeMode{value: val, isSet: true}
}

func (v NullableTypesResumeMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesResumeMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

