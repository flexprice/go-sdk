/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoSubscriptionUsageByMetersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoSubscriptionUsageByMetersResponse{}

// DtoSubscriptionUsageByMetersResponse struct for DtoSubscriptionUsageByMetersResponse
type DtoSubscriptionUsageByMetersResponse struct {
	Amount *float32 `json:"amount,omitempty"`
	Currency *string `json:"currency,omitempty"`
	DisplayAmount *string `json:"display_amount,omitempty"`
	FilterValues *map[string][]string `json:"filter_values,omitempty"`
	MeterDisplayName *string `json:"meter_display_name,omitempty"`
	MeterId *string `json:"meter_id,omitempty"`
	Price *PricePrice `json:"price,omitempty"`
	Quantity *float32 `json:"quantity,omitempty"`
}

// NewDtoSubscriptionUsageByMetersResponse instantiates a new DtoSubscriptionUsageByMetersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoSubscriptionUsageByMetersResponse() *DtoSubscriptionUsageByMetersResponse {
	this := DtoSubscriptionUsageByMetersResponse{}
	return &this
}

// NewDtoSubscriptionUsageByMetersResponseWithDefaults instantiates a new DtoSubscriptionUsageByMetersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoSubscriptionUsageByMetersResponseWithDefaults() *DtoSubscriptionUsageByMetersResponse {
	this := DtoSubscriptionUsageByMetersResponse{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *DtoSubscriptionUsageByMetersResponse) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionUsageByMetersResponse) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *DtoSubscriptionUsageByMetersResponse) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *DtoSubscriptionUsageByMetersResponse) SetAmount(v float32) {
	o.Amount = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *DtoSubscriptionUsageByMetersResponse) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionUsageByMetersResponse) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *DtoSubscriptionUsageByMetersResponse) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *DtoSubscriptionUsageByMetersResponse) SetCurrency(v string) {
	o.Currency = &v
}

// GetDisplayAmount returns the DisplayAmount field value if set, zero value otherwise.
func (o *DtoSubscriptionUsageByMetersResponse) GetDisplayAmount() string {
	if o == nil || IsNil(o.DisplayAmount) {
		var ret string
		return ret
	}
	return *o.DisplayAmount
}

// GetDisplayAmountOk returns a tuple with the DisplayAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionUsageByMetersResponse) GetDisplayAmountOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayAmount) {
		return nil, false
	}
	return o.DisplayAmount, true
}

// HasDisplayAmount returns a boolean if a field has been set.
func (o *DtoSubscriptionUsageByMetersResponse) HasDisplayAmount() bool {
	if o != nil && !IsNil(o.DisplayAmount) {
		return true
	}

	return false
}

// SetDisplayAmount gets a reference to the given string and assigns it to the DisplayAmount field.
func (o *DtoSubscriptionUsageByMetersResponse) SetDisplayAmount(v string) {
	o.DisplayAmount = &v
}

// GetFilterValues returns the FilterValues field value if set, zero value otherwise.
func (o *DtoSubscriptionUsageByMetersResponse) GetFilterValues() map[string][]string {
	if o == nil || IsNil(o.FilterValues) {
		var ret map[string][]string
		return ret
	}
	return *o.FilterValues
}

// GetFilterValuesOk returns a tuple with the FilterValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionUsageByMetersResponse) GetFilterValuesOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.FilterValues) {
		return nil, false
	}
	return o.FilterValues, true
}

// HasFilterValues returns a boolean if a field has been set.
func (o *DtoSubscriptionUsageByMetersResponse) HasFilterValues() bool {
	if o != nil && !IsNil(o.FilterValues) {
		return true
	}

	return false
}

// SetFilterValues gets a reference to the given map[string][]string and assigns it to the FilterValues field.
func (o *DtoSubscriptionUsageByMetersResponse) SetFilterValues(v map[string][]string) {
	o.FilterValues = &v
}

// GetMeterDisplayName returns the MeterDisplayName field value if set, zero value otherwise.
func (o *DtoSubscriptionUsageByMetersResponse) GetMeterDisplayName() string {
	if o == nil || IsNil(o.MeterDisplayName) {
		var ret string
		return ret
	}
	return *o.MeterDisplayName
}

// GetMeterDisplayNameOk returns a tuple with the MeterDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionUsageByMetersResponse) GetMeterDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.MeterDisplayName) {
		return nil, false
	}
	return o.MeterDisplayName, true
}

// HasMeterDisplayName returns a boolean if a field has been set.
func (o *DtoSubscriptionUsageByMetersResponse) HasMeterDisplayName() bool {
	if o != nil && !IsNil(o.MeterDisplayName) {
		return true
	}

	return false
}

// SetMeterDisplayName gets a reference to the given string and assigns it to the MeterDisplayName field.
func (o *DtoSubscriptionUsageByMetersResponse) SetMeterDisplayName(v string) {
	o.MeterDisplayName = &v
}

// GetMeterId returns the MeterId field value if set, zero value otherwise.
func (o *DtoSubscriptionUsageByMetersResponse) GetMeterId() string {
	if o == nil || IsNil(o.MeterId) {
		var ret string
		return ret
	}
	return *o.MeterId
}

// GetMeterIdOk returns a tuple with the MeterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionUsageByMetersResponse) GetMeterIdOk() (*string, bool) {
	if o == nil || IsNil(o.MeterId) {
		return nil, false
	}
	return o.MeterId, true
}

// HasMeterId returns a boolean if a field has been set.
func (o *DtoSubscriptionUsageByMetersResponse) HasMeterId() bool {
	if o != nil && !IsNil(o.MeterId) {
		return true
	}

	return false
}

// SetMeterId gets a reference to the given string and assigns it to the MeterId field.
func (o *DtoSubscriptionUsageByMetersResponse) SetMeterId(v string) {
	o.MeterId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *DtoSubscriptionUsageByMetersResponse) GetPrice() PricePrice {
	if o == nil || IsNil(o.Price) {
		var ret PricePrice
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionUsageByMetersResponse) GetPriceOk() (*PricePrice, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *DtoSubscriptionUsageByMetersResponse) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given PricePrice and assigns it to the Price field.
func (o *DtoSubscriptionUsageByMetersResponse) SetPrice(v PricePrice) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *DtoSubscriptionUsageByMetersResponse) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSubscriptionUsageByMetersResponse) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *DtoSubscriptionUsageByMetersResponse) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *DtoSubscriptionUsageByMetersResponse) SetQuantity(v float32) {
	o.Quantity = &v
}

func (o DtoSubscriptionUsageByMetersResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoSubscriptionUsageByMetersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.DisplayAmount) {
		toSerialize["display_amount"] = o.DisplayAmount
	}
	if !IsNil(o.FilterValues) {
		toSerialize["filter_values"] = o.FilterValues
	}
	if !IsNil(o.MeterDisplayName) {
		toSerialize["meter_display_name"] = o.MeterDisplayName
	}
	if !IsNil(o.MeterId) {
		toSerialize["meter_id"] = o.MeterId
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	return toSerialize, nil
}

type NullableDtoSubscriptionUsageByMetersResponse struct {
	value *DtoSubscriptionUsageByMetersResponse
	isSet bool
}

func (v NullableDtoSubscriptionUsageByMetersResponse) Get() *DtoSubscriptionUsageByMetersResponse {
	return v.value
}

func (v *NullableDtoSubscriptionUsageByMetersResponse) Set(val *DtoSubscriptionUsageByMetersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoSubscriptionUsageByMetersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoSubscriptionUsageByMetersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoSubscriptionUsageByMetersResponse(val *DtoSubscriptionUsageByMetersResponse) *NullableDtoSubscriptionUsageByMetersResponse {
	return &NullableDtoSubscriptionUsageByMetersResponse{value: val, isSet: true}
}

func (v NullableDtoSubscriptionUsageByMetersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoSubscriptionUsageByMetersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


