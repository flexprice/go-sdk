/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the ErrorsErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorsErrorResponse{}

// ErrorsErrorResponse struct for ErrorsErrorResponse
type ErrorsErrorResponse struct {
	Error *ErrorsErrorDetail `json:"error,omitempty"`
	Success *bool `json:"success,omitempty"`
}

// NewErrorsErrorResponse instantiates a new ErrorsErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorsErrorResponse() *ErrorsErrorResponse {
	this := ErrorsErrorResponse{}
	return &this
}

// NewErrorsErrorResponseWithDefaults instantiates a new ErrorsErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorsErrorResponseWithDefaults() *ErrorsErrorResponse {
	this := ErrorsErrorResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ErrorsErrorResponse) GetError() ErrorsErrorDetail {
	if o == nil || IsNil(o.Error) {
		var ret ErrorsErrorDetail
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsErrorResponse) GetErrorOk() (*ErrorsErrorDetail, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ErrorsErrorResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorsErrorDetail and assigns it to the Error field.
func (o *ErrorsErrorResponse) SetError(v ErrorsErrorDetail) {
	o.Error = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ErrorsErrorResponse) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsErrorResponse) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ErrorsErrorResponse) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *ErrorsErrorResponse) SetSuccess(v bool) {
	o.Success = &v
}

func (o ErrorsErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorsErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	return toSerialize, nil
}

type NullableErrorsErrorResponse struct {
	value *ErrorsErrorResponse
	isSet bool
}

func (v NullableErrorsErrorResponse) Get() *ErrorsErrorResponse {
	return v.value
}

func (v *NullableErrorsErrorResponse) Set(val *ErrorsErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorsErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorsErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorsErrorResponse(val *ErrorsErrorResponse) *NullableErrorsErrorResponse {
	return &NullableErrorsErrorResponse{value: val, isSet: true}
}

func (v NullableErrorsErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorsErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


