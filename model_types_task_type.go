/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"fmt"
)

// TypesTaskType the model 'TypesTaskType'
type TypesTaskType string

// List of types.TaskType
const (
	TYPESTASKTYPE_TaskTypeImport TypesTaskType = "IMPORT"
	TYPESTASKTYPE_TaskTypeExport TypesTaskType = "EXPORT"
)

// All allowed values of TypesTaskType enum
var AllowedTypesTaskTypeEnumValues = []TypesTaskType{
	"IMPORT",
	"EXPORT",
}

func (v *TypesTaskType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesTaskType(value)
	for _, existing := range AllowedTypesTaskTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesTaskType", value)
}

// NewTypesTaskTypeFromValue returns a pointer to a valid TypesTaskType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesTaskTypeFromValue(v string) (*TypesTaskType, error) {
	ev := TypesTaskType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesTaskType: valid values are %v", v, AllowedTypesTaskTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesTaskType) IsValid() bool {
	for _, existing := range AllowedTypesTaskTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.TaskType value
func (v TypesTaskType) Ptr() *TypesTaskType {
	return &v
}

type NullableTypesTaskType struct {
	value *TypesTaskType
	isSet bool
}

func (v NullableTypesTaskType) Get() *TypesTaskType {
	return v.value
}

func (v *NullableTypesTaskType) Set(val *TypesTaskType) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesTaskType) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesTaskType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesTaskType(val *TypesTaskType) *NullableTypesTaskType {
	return &NullableTypesTaskType{value: val, isSet: true}
}

func (v NullableTypesTaskType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesTaskType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

