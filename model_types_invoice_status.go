/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"fmt"
)

// TypesInvoiceStatus the model 'TypesInvoiceStatus'
type TypesInvoiceStatus string

// List of types.InvoiceStatus
const (
	TYPESINVOICESTATUS_InvoiceStatusDraft TypesInvoiceStatus = "DRAFT"
	TYPESINVOICESTATUS_InvoiceStatusFinalized TypesInvoiceStatus = "FINALIZED"
	TYPESINVOICESTATUS_InvoiceStatusVoided TypesInvoiceStatus = "VOIDED"
)

// All allowed values of TypesInvoiceStatus enum
var AllowedTypesInvoiceStatusEnumValues = []TypesInvoiceStatus{
	"DRAFT",
	"FINALIZED",
	"VOIDED",
}

func (v *TypesInvoiceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesInvoiceStatus(value)
	for _, existing := range AllowedTypesInvoiceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesInvoiceStatus", value)
}

// NewTypesInvoiceStatusFromValue returns a pointer to a valid TypesInvoiceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesInvoiceStatusFromValue(v string) (*TypesInvoiceStatus, error) {
	ev := TypesInvoiceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesInvoiceStatus: valid values are %v", v, AllowedTypesInvoiceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesInvoiceStatus) IsValid() bool {
	for _, existing := range AllowedTypesInvoiceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.InvoiceStatus value
func (v TypesInvoiceStatus) Ptr() *TypesInvoiceStatus {
	return &v
}

type NullableTypesInvoiceStatus struct {
	value *TypesInvoiceStatus
	isSet bool
}

func (v NullableTypesInvoiceStatus) Get() *TypesInvoiceStatus {
	return v.value
}

func (v *NullableTypesInvoiceStatus) Set(val *TypesInvoiceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesInvoiceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesInvoiceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesInvoiceStatus(val *TypesInvoiceStatus) *NullableTypesInvoiceStatus {
	return &NullableTypesInvoiceStatus{value: val, isSet: true}
}

func (v NullableTypesInvoiceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesInvoiceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

