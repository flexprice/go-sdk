/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
)

// checks if the DtoMeterResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoMeterResponse{}

// DtoMeterResponse struct for DtoMeterResponse
type DtoMeterResponse struct {
	Aggregation *MeterAggregation `json:"aggregation,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	EventName *string `json:"event_name,omitempty"`
	Filters []MeterFilter `json:"filters,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	ResetUsage *TypesResetUsage `json:"reset_usage,omitempty"`
	Status *string `json:"status,omitempty"`
	TenantId *string `json:"tenant_id,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewDtoMeterResponse instantiates a new DtoMeterResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoMeterResponse() *DtoMeterResponse {
	this := DtoMeterResponse{}
	return &this
}

// NewDtoMeterResponseWithDefaults instantiates a new DtoMeterResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoMeterResponseWithDefaults() *DtoMeterResponse {
	this := DtoMeterResponse{}
	return &this
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise.
func (o *DtoMeterResponse) GetAggregation() MeterAggregation {
	if o == nil || IsNil(o.Aggregation) {
		var ret MeterAggregation
		return ret
	}
	return *o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMeterResponse) GetAggregationOk() (*MeterAggregation, bool) {
	if o == nil || IsNil(o.Aggregation) {
		return nil, false
	}
	return o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *DtoMeterResponse) HasAggregation() bool {
	if o != nil && !IsNil(o.Aggregation) {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given MeterAggregation and assigns it to the Aggregation field.
func (o *DtoMeterResponse) SetAggregation(v MeterAggregation) {
	o.Aggregation = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DtoMeterResponse) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMeterResponse) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DtoMeterResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *DtoMeterResponse) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *DtoMeterResponse) GetEventName() string {
	if o == nil || IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMeterResponse) GetEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *DtoMeterResponse) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *DtoMeterResponse) SetEventName(v string) {
	o.EventName = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *DtoMeterResponse) GetFilters() []MeterFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []MeterFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMeterResponse) GetFiltersOk() ([]MeterFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *DtoMeterResponse) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []MeterFilter and assigns it to the Filters field.
func (o *DtoMeterResponse) SetFilters(v []MeterFilter) {
	o.Filters = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DtoMeterResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMeterResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DtoMeterResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DtoMeterResponse) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtoMeterResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMeterResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtoMeterResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtoMeterResponse) SetName(v string) {
	o.Name = &v
}

// GetResetUsage returns the ResetUsage field value if set, zero value otherwise.
func (o *DtoMeterResponse) GetResetUsage() TypesResetUsage {
	if o == nil || IsNil(o.ResetUsage) {
		var ret TypesResetUsage
		return ret
	}
	return *o.ResetUsage
}

// GetResetUsageOk returns a tuple with the ResetUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMeterResponse) GetResetUsageOk() (*TypesResetUsage, bool) {
	if o == nil || IsNil(o.ResetUsage) {
		return nil, false
	}
	return o.ResetUsage, true
}

// HasResetUsage returns a boolean if a field has been set.
func (o *DtoMeterResponse) HasResetUsage() bool {
	if o != nil && !IsNil(o.ResetUsage) {
		return true
	}

	return false
}

// SetResetUsage gets a reference to the given TypesResetUsage and assigns it to the ResetUsage field.
func (o *DtoMeterResponse) SetResetUsage(v TypesResetUsage) {
	o.ResetUsage = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DtoMeterResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMeterResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DtoMeterResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DtoMeterResponse) SetStatus(v string) {
	o.Status = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *DtoMeterResponse) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMeterResponse) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *DtoMeterResponse) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *DtoMeterResponse) SetTenantId(v string) {
	o.TenantId = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DtoMeterResponse) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMeterResponse) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DtoMeterResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *DtoMeterResponse) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o DtoMeterResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoMeterResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregation) {
		toSerialize["aggregation"] = o.Aggregation
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.EventName) {
		toSerialize["event_name"] = o.EventName
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ResetUsage) {
		toSerialize["reset_usage"] = o.ResetUsage
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenant_id"] = o.TenantId
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableDtoMeterResponse struct {
	value *DtoMeterResponse
	isSet bool
}

func (v NullableDtoMeterResponse) Get() *DtoMeterResponse {
	return v.value
}

func (v *NullableDtoMeterResponse) Set(val *DtoMeterResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoMeterResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoMeterResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoMeterResponse(val *DtoMeterResponse) *NullableDtoMeterResponse {
	return &NullableDtoMeterResponse{value: val, isSet: true}
}

func (v NullableDtoMeterResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoMeterResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


