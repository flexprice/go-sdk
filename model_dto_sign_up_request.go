/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DtoSignUpRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoSignUpRequest{}

// DtoSignUpRequest struct for DtoSignUpRequest
type DtoSignUpRequest struct {
	Email string `json:"email"`
	Password *string `json:"password,omitempty"`
	TenantName *string `json:"tenant_name,omitempty"`
	Token *string `json:"token,omitempty"`
}

type _DtoSignUpRequest DtoSignUpRequest

// NewDtoSignUpRequest instantiates a new DtoSignUpRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoSignUpRequest(email string) *DtoSignUpRequest {
	this := DtoSignUpRequest{}
	this.Email = email
	return &this
}

// NewDtoSignUpRequestWithDefaults instantiates a new DtoSignUpRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoSignUpRequestWithDefaults() *DtoSignUpRequest {
	this := DtoSignUpRequest{}
	return &this
}

// GetEmail returns the Email field value
func (o *DtoSignUpRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *DtoSignUpRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *DtoSignUpRequest) SetEmail(v string) {
	o.Email = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *DtoSignUpRequest) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSignUpRequest) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *DtoSignUpRequest) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *DtoSignUpRequest) SetPassword(v string) {
	o.Password = &v
}

// GetTenantName returns the TenantName field value if set, zero value otherwise.
func (o *DtoSignUpRequest) GetTenantName() string {
	if o == nil || IsNil(o.TenantName) {
		var ret string
		return ret
	}
	return *o.TenantName
}

// GetTenantNameOk returns a tuple with the TenantName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSignUpRequest) GetTenantNameOk() (*string, bool) {
	if o == nil || IsNil(o.TenantName) {
		return nil, false
	}
	return o.TenantName, true
}

// HasTenantName returns a boolean if a field has been set.
func (o *DtoSignUpRequest) HasTenantName() bool {
	if o != nil && !IsNil(o.TenantName) {
		return true
	}

	return false
}

// SetTenantName gets a reference to the given string and assigns it to the TenantName field.
func (o *DtoSignUpRequest) SetTenantName(v string) {
	o.TenantName = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *DtoSignUpRequest) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSignUpRequest) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *DtoSignUpRequest) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *DtoSignUpRequest) SetToken(v string) {
	o.Token = &v
}

func (o DtoSignUpRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoSignUpRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.TenantName) {
		toSerialize["tenant_name"] = o.TenantName
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

func (o *DtoSignUpRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtoSignUpRequest := _DtoSignUpRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtoSignUpRequest)

	if err != nil {
		return err
	}

	*o = DtoSignUpRequest(varDtoSignUpRequest)

	return err
}

type NullableDtoSignUpRequest struct {
	value *DtoSignUpRequest
	isSet bool
}

func (v NullableDtoSignUpRequest) Get() *DtoSignUpRequest {
	return v.value
}

func (v *NullableDtoSignUpRequest) Set(val *DtoSignUpRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoSignUpRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoSignUpRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoSignUpRequest(val *DtoSignUpRequest) *NullableDtoSignUpRequest {
	return &NullableDtoSignUpRequest{value: val, isSet: true}
}

func (v NullableDtoSignUpRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoSignUpRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


