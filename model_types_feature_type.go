/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"fmt"
)

// TypesFeatureType the model 'TypesFeatureType'
type TypesFeatureType string

// List of types.FeatureType
const (
	TYPESFEATURETYPE_FeatureTypeMetered TypesFeatureType = "metered"
	TYPESFEATURETYPE_FeatureTypeBoolean TypesFeatureType = "boolean"
	TYPESFEATURETYPE_FeatureTypeStatic TypesFeatureType = "static"
)

// All allowed values of TypesFeatureType enum
var AllowedTypesFeatureTypeEnumValues = []TypesFeatureType{
	"metered",
	"boolean",
	"static",
}

func (v *TypesFeatureType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesFeatureType(value)
	for _, existing := range AllowedTypesFeatureTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesFeatureType", value)
}

// NewTypesFeatureTypeFromValue returns a pointer to a valid TypesFeatureType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesFeatureTypeFromValue(v string) (*TypesFeatureType, error) {
	ev := TypesFeatureType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesFeatureType: valid values are %v", v, AllowedTypesFeatureTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesFeatureType) IsValid() bool {
	for _, existing := range AllowedTypesFeatureTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.FeatureType value
func (v TypesFeatureType) Ptr() *TypesFeatureType {
	return &v
}

type NullableTypesFeatureType struct {
	value *TypesFeatureType
	isSet bool
}

func (v NullableTypesFeatureType) Get() *TypesFeatureType {
	return v.value
}

func (v *NullableTypesFeatureType) Set(val *TypesFeatureType) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesFeatureType) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesFeatureType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesFeatureType(val *TypesFeatureType) *NullableTypesFeatureType {
	return &NullableTypesFeatureType{value: val, isSet: true}
}

func (v NullableTypesFeatureType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesFeatureType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

