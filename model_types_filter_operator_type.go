/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"fmt"
)

// TypesFilterOperatorType the model 'TypesFilterOperatorType'
type TypesFilterOperatorType string

// List of types.FilterOperatorType
const (
	TYPESFILTEROPERATORTYPE_EQUAL TypesFilterOperatorType = "eq"
	TYPESFILTEROPERATORTYPE_CONTAINS TypesFilterOperatorType = "contains"
	TYPESFILTEROPERATORTYPE_GREATER_THAN TypesFilterOperatorType = "gt"
	TYPESFILTEROPERATORTYPE_LESS_THAN TypesFilterOperatorType = "lt"
	TYPESFILTEROPERATORTYPE_IN TypesFilterOperatorType = "in"
	TYPESFILTEROPERATORTYPE_NOT_IN TypesFilterOperatorType = "not_in"
	TYPESFILTEROPERATORTYPE_BEFORE TypesFilterOperatorType = "before"
	TYPESFILTEROPERATORTYPE_AFTER TypesFilterOperatorType = "after"
)

// All allowed values of TypesFilterOperatorType enum
var AllowedTypesFilterOperatorTypeEnumValues = []TypesFilterOperatorType{
	"eq",
	"contains",
	"gt",
	"lt",
	"in",
	"not_in",
	"before",
	"after",
}

func (v *TypesFilterOperatorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesFilterOperatorType(value)
	for _, existing := range AllowedTypesFilterOperatorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesFilterOperatorType", value)
}

// NewTypesFilterOperatorTypeFromValue returns a pointer to a valid TypesFilterOperatorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesFilterOperatorTypeFromValue(v string) (*TypesFilterOperatorType, error) {
	ev := TypesFilterOperatorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesFilterOperatorType: valid values are %v", v, AllowedTypesFilterOperatorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesFilterOperatorType) IsValid() bool {
	for _, existing := range AllowedTypesFilterOperatorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.FilterOperatorType value
func (v TypesFilterOperatorType) Ptr() *TypesFilterOperatorType {
	return &v
}

type NullableTypesFilterOperatorType struct {
	value *TypesFilterOperatorType
	isSet bool
}

func (v NullableTypesFilterOperatorType) Get() *TypesFilterOperatorType {
	return v.value
}

func (v *NullableTypesFilterOperatorType) Set(val *TypesFilterOperatorType) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesFilterOperatorType) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesFilterOperatorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesFilterOperatorType(val *TypesFilterOperatorType) *NullableTypesFilterOperatorType {
	return &NullableTypesFilterOperatorType{value: val, isSet: true}
}

func (v NullableTypesFilterOperatorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesFilterOperatorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

