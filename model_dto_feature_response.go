/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
)

// checks if the DtoFeatureResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoFeatureResponse{}

// DtoFeatureResponse struct for DtoFeatureResponse
type DtoFeatureResponse struct {
	CreatedAt *string `json:"created_at,omitempty"`
	CreatedBy *string `json:"created_by,omitempty"`
	Description *string `json:"description,omitempty"`
	EnvironmentId *string `json:"environment_id,omitempty"`
	Id *string `json:"id,omitempty"`
	LookupKey *string `json:"lookup_key,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	Meter *DtoMeterResponse `json:"meter,omitempty"`
	MeterId *string `json:"meter_id,omitempty"`
	Name *string `json:"name,omitempty"`
	Status *TypesStatus `json:"status,omitempty"`
	TenantId *string `json:"tenant_id,omitempty"`
	Type *TypesFeatureType `json:"type,omitempty"`
	UnitPlural *string `json:"unit_plural,omitempty"`
	UnitSingular *string `json:"unit_singular,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	UpdatedBy *string `json:"updated_by,omitempty"`
}

// NewDtoFeatureResponse instantiates a new DtoFeatureResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoFeatureResponse() *DtoFeatureResponse {
	this := DtoFeatureResponse{}
	return &this
}

// NewDtoFeatureResponseWithDefaults instantiates a new DtoFeatureResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoFeatureResponseWithDefaults() *DtoFeatureResponse {
	this := DtoFeatureResponse{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *DtoFeatureResponse) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *DtoFeatureResponse) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DtoFeatureResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId) {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentId) {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasEnvironmentId() bool {
	if o != nil && !IsNil(o.EnvironmentId) {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *DtoFeatureResponse) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DtoFeatureResponse) SetId(v string) {
	o.Id = &v
}

// GetLookupKey returns the LookupKey field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetLookupKey() string {
	if o == nil || IsNil(o.LookupKey) {
		var ret string
		return ret
	}
	return *o.LookupKey
}

// GetLookupKeyOk returns a tuple with the LookupKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetLookupKeyOk() (*string, bool) {
	if o == nil || IsNil(o.LookupKey) {
		return nil, false
	}
	return o.LookupKey, true
}

// HasLookupKey returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasLookupKey() bool {
	if o != nil && !IsNil(o.LookupKey) {
		return true
	}

	return false
}

// SetLookupKey gets a reference to the given string and assigns it to the LookupKey field.
func (o *DtoFeatureResponse) SetLookupKey(v string) {
	o.LookupKey = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *DtoFeatureResponse) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetMeter returns the Meter field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetMeter() DtoMeterResponse {
	if o == nil || IsNil(o.Meter) {
		var ret DtoMeterResponse
		return ret
	}
	return *o.Meter
}

// GetMeterOk returns a tuple with the Meter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetMeterOk() (*DtoMeterResponse, bool) {
	if o == nil || IsNil(o.Meter) {
		return nil, false
	}
	return o.Meter, true
}

// HasMeter returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasMeter() bool {
	if o != nil && !IsNil(o.Meter) {
		return true
	}

	return false
}

// SetMeter gets a reference to the given DtoMeterResponse and assigns it to the Meter field.
func (o *DtoFeatureResponse) SetMeter(v DtoMeterResponse) {
	o.Meter = &v
}

// GetMeterId returns the MeterId field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetMeterId() string {
	if o == nil || IsNil(o.MeterId) {
		var ret string
		return ret
	}
	return *o.MeterId
}

// GetMeterIdOk returns a tuple with the MeterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetMeterIdOk() (*string, bool) {
	if o == nil || IsNil(o.MeterId) {
		return nil, false
	}
	return o.MeterId, true
}

// HasMeterId returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasMeterId() bool {
	if o != nil && !IsNil(o.MeterId) {
		return true
	}

	return false
}

// SetMeterId gets a reference to the given string and assigns it to the MeterId field.
func (o *DtoFeatureResponse) SetMeterId(v string) {
	o.MeterId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtoFeatureResponse) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetStatus() TypesStatus {
	if o == nil || IsNil(o.Status) {
		var ret TypesStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetStatusOk() (*TypesStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TypesStatus and assigns it to the Status field.
func (o *DtoFeatureResponse) SetStatus(v TypesStatus) {
	o.Status = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *DtoFeatureResponse) SetTenantId(v string) {
	o.TenantId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetType() TypesFeatureType {
	if o == nil || IsNil(o.Type) {
		var ret TypesFeatureType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetTypeOk() (*TypesFeatureType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given TypesFeatureType and assigns it to the Type field.
func (o *DtoFeatureResponse) SetType(v TypesFeatureType) {
	o.Type = &v
}

// GetUnitPlural returns the UnitPlural field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetUnitPlural() string {
	if o == nil || IsNil(o.UnitPlural) {
		var ret string
		return ret
	}
	return *o.UnitPlural
}

// GetUnitPluralOk returns a tuple with the UnitPlural field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetUnitPluralOk() (*string, bool) {
	if o == nil || IsNil(o.UnitPlural) {
		return nil, false
	}
	return o.UnitPlural, true
}

// HasUnitPlural returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasUnitPlural() bool {
	if o != nil && !IsNil(o.UnitPlural) {
		return true
	}

	return false
}

// SetUnitPlural gets a reference to the given string and assigns it to the UnitPlural field.
func (o *DtoFeatureResponse) SetUnitPlural(v string) {
	o.UnitPlural = &v
}

// GetUnitSingular returns the UnitSingular field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetUnitSingular() string {
	if o == nil || IsNil(o.UnitSingular) {
		var ret string
		return ret
	}
	return *o.UnitSingular
}

// GetUnitSingularOk returns a tuple with the UnitSingular field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetUnitSingularOk() (*string, bool) {
	if o == nil || IsNil(o.UnitSingular) {
		return nil, false
	}
	return o.UnitSingular, true
}

// HasUnitSingular returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasUnitSingular() bool {
	if o != nil && !IsNil(o.UnitSingular) {
		return true
	}

	return false
}

// SetUnitSingular gets a reference to the given string and assigns it to the UnitSingular field.
func (o *DtoFeatureResponse) SetUnitSingular(v string) {
	o.UnitSingular = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *DtoFeatureResponse) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *DtoFeatureResponse) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoFeatureResponse) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *DtoFeatureResponse) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *DtoFeatureResponse) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

func (o DtoFeatureResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoFeatureResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EnvironmentId) {
		toSerialize["environment_id"] = o.EnvironmentId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LookupKey) {
		toSerialize["lookup_key"] = o.LookupKey
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Meter) {
		toSerialize["meter"] = o.Meter
	}
	if !IsNil(o.MeterId) {
		toSerialize["meter_id"] = o.MeterId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenant_id"] = o.TenantId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UnitPlural) {
		toSerialize["unit_plural"] = o.UnitPlural
	}
	if !IsNil(o.UnitSingular) {
		toSerialize["unit_singular"] = o.UnitSingular
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	return toSerialize, nil
}

type NullableDtoFeatureResponse struct {
	value *DtoFeatureResponse
	isSet bool
}

func (v NullableDtoFeatureResponse) Get() *DtoFeatureResponse {
	return v.value
}

func (v *NullableDtoFeatureResponse) Set(val *DtoFeatureResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoFeatureResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoFeatureResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoFeatureResponse(val *DtoFeatureResponse) *NullableDtoFeatureResponse {
	return &NullableDtoFeatureResponse{value: val, isSet: true}
}

func (v NullableDtoFeatureResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoFeatureResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


