/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
)

// checks if the DtoTenantBillingUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoTenantBillingUsage{}

// DtoTenantBillingUsage struct for DtoTenantBillingUsage
type DtoTenantBillingUsage struct {
	Subscriptions []DtoSubscriptionResponse `json:"subscriptions,omitempty"`
	Usage *DtoCustomerUsageSummaryResponse `json:"usage,omitempty"`
}

// NewDtoTenantBillingUsage instantiates a new DtoTenantBillingUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoTenantBillingUsage() *DtoTenantBillingUsage {
	this := DtoTenantBillingUsage{}
	return &this
}

// NewDtoTenantBillingUsageWithDefaults instantiates a new DtoTenantBillingUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoTenantBillingUsageWithDefaults() *DtoTenantBillingUsage {
	this := DtoTenantBillingUsage{}
	return &this
}

// GetSubscriptions returns the Subscriptions field value if set, zero value otherwise.
func (o *DtoTenantBillingUsage) GetSubscriptions() []DtoSubscriptionResponse {
	if o == nil || IsNil(o.Subscriptions) {
		var ret []DtoSubscriptionResponse
		return ret
	}
	return o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTenantBillingUsage) GetSubscriptionsOk() ([]DtoSubscriptionResponse, bool) {
	if o == nil || IsNil(o.Subscriptions) {
		return nil, false
	}
	return o.Subscriptions, true
}

// HasSubscriptions returns a boolean if a field has been set.
func (o *DtoTenantBillingUsage) HasSubscriptions() bool {
	if o != nil && !IsNil(o.Subscriptions) {
		return true
	}

	return false
}

// SetSubscriptions gets a reference to the given []DtoSubscriptionResponse and assigns it to the Subscriptions field.
func (o *DtoTenantBillingUsage) SetSubscriptions(v []DtoSubscriptionResponse) {
	o.Subscriptions = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *DtoTenantBillingUsage) GetUsage() DtoCustomerUsageSummaryResponse {
	if o == nil || IsNil(o.Usage) {
		var ret DtoCustomerUsageSummaryResponse
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTenantBillingUsage) GetUsageOk() (*DtoCustomerUsageSummaryResponse, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *DtoTenantBillingUsage) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given DtoCustomerUsageSummaryResponse and assigns it to the Usage field.
func (o *DtoTenantBillingUsage) SetUsage(v DtoCustomerUsageSummaryResponse) {
	o.Usage = &v
}

func (o DtoTenantBillingUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoTenantBillingUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subscriptions) {
		toSerialize["subscriptions"] = o.Subscriptions
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return toSerialize, nil
}

type NullableDtoTenantBillingUsage struct {
	value *DtoTenantBillingUsage
	isSet bool
}

func (v NullableDtoTenantBillingUsage) Get() *DtoTenantBillingUsage {
	return v.value
}

func (v *NullableDtoTenantBillingUsage) Set(val *DtoTenantBillingUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoTenantBillingUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoTenantBillingUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoTenantBillingUsage(val *DtoTenantBillingUsage) *NullableDtoTenantBillingUsage {
	return &NullableDtoTenantBillingUsage{value: val, isSet: true}
}

func (v NullableDtoTenantBillingUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoTenantBillingUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


