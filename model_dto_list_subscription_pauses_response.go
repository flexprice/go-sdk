/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
)

// checks if the DtoListSubscriptionPausesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoListSubscriptionPausesResponse{}

// DtoListSubscriptionPausesResponse struct for DtoListSubscriptionPausesResponse
type DtoListSubscriptionPausesResponse struct {
	Items []DtoSubscriptionPauseResponse `json:"items,omitempty"`
	Total *int32 `json:"total,omitempty"`
}

// NewDtoListSubscriptionPausesResponse instantiates a new DtoListSubscriptionPausesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoListSubscriptionPausesResponse() *DtoListSubscriptionPausesResponse {
	this := DtoListSubscriptionPausesResponse{}
	return &this
}

// NewDtoListSubscriptionPausesResponseWithDefaults instantiates a new DtoListSubscriptionPausesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoListSubscriptionPausesResponseWithDefaults() *DtoListSubscriptionPausesResponse {
	this := DtoListSubscriptionPausesResponse{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *DtoListSubscriptionPausesResponse) GetItems() []DtoSubscriptionPauseResponse {
	if o == nil || IsNil(o.Items) {
		var ret []DtoSubscriptionPauseResponse
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoListSubscriptionPausesResponse) GetItemsOk() ([]DtoSubscriptionPauseResponse, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *DtoListSubscriptionPausesResponse) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []DtoSubscriptionPauseResponse and assigns it to the Items field.
func (o *DtoListSubscriptionPausesResponse) SetItems(v []DtoSubscriptionPauseResponse) {
	o.Items = v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *DtoListSubscriptionPausesResponse) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoListSubscriptionPausesResponse) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *DtoListSubscriptionPausesResponse) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *DtoListSubscriptionPausesResponse) SetTotal(v int32) {
	o.Total = &v
}

func (o DtoListSubscriptionPausesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoListSubscriptionPausesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableDtoListSubscriptionPausesResponse struct {
	value *DtoListSubscriptionPausesResponse
	isSet bool
}

func (v NullableDtoListSubscriptionPausesResponse) Get() *DtoListSubscriptionPausesResponse {
	return v.value
}

func (v *NullableDtoListSubscriptionPausesResponse) Set(val *DtoListSubscriptionPausesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoListSubscriptionPausesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoListSubscriptionPausesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoListSubscriptionPausesResponse(val *DtoListSubscriptionPausesResponse) *NullableDtoListSubscriptionPausesResponse {
	return &NullableDtoListSubscriptionPausesResponse{value: val, isSet: true}
}

func (v NullableDtoListSubscriptionPausesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoListSubscriptionPausesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


