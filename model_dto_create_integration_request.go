/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexpriceclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DtoCreateIntegrationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoCreateIntegrationRequest{}

// DtoCreateIntegrationRequest struct for DtoCreateIntegrationRequest
type DtoCreateIntegrationRequest struct {
	Credentials map[string]string `json:"credentials"`
	Name string `json:"name"`
	Provider TypesSecretProvider `json:"provider"`
}

type _DtoCreateIntegrationRequest DtoCreateIntegrationRequest

// NewDtoCreateIntegrationRequest instantiates a new DtoCreateIntegrationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoCreateIntegrationRequest(credentials map[string]string, name string, provider TypesSecretProvider) *DtoCreateIntegrationRequest {
	this := DtoCreateIntegrationRequest{}
	this.Credentials = credentials
	this.Name = name
	this.Provider = provider
	return &this
}

// NewDtoCreateIntegrationRequestWithDefaults instantiates a new DtoCreateIntegrationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoCreateIntegrationRequestWithDefaults() *DtoCreateIntegrationRequest {
	this := DtoCreateIntegrationRequest{}
	return &this
}

// GetCredentials returns the Credentials field value
func (o *DtoCreateIntegrationRequest) GetCredentials() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value
// and a boolean to check if the value has been set.
func (o *DtoCreateIntegrationRequest) GetCredentialsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Credentials, true
}

// SetCredentials sets field value
func (o *DtoCreateIntegrationRequest) SetCredentials(v map[string]string) {
	o.Credentials = v
}

// GetName returns the Name field value
func (o *DtoCreateIntegrationRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DtoCreateIntegrationRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DtoCreateIntegrationRequest) SetName(v string) {
	o.Name = v
}

// GetProvider returns the Provider field value
func (o *DtoCreateIntegrationRequest) GetProvider() TypesSecretProvider {
	if o == nil {
		var ret TypesSecretProvider
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *DtoCreateIntegrationRequest) GetProviderOk() (*TypesSecretProvider, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *DtoCreateIntegrationRequest) SetProvider(v TypesSecretProvider) {
	o.Provider = v
}

func (o DtoCreateIntegrationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoCreateIntegrationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["credentials"] = o.Credentials
	toSerialize["name"] = o.Name
	toSerialize["provider"] = o.Provider
	return toSerialize, nil
}

func (o *DtoCreateIntegrationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"credentials",
		"name",
		"provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtoCreateIntegrationRequest := _DtoCreateIntegrationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtoCreateIntegrationRequest)

	if err != nil {
		return err
	}

	*o = DtoCreateIntegrationRequest(varDtoCreateIntegrationRequest)

	return err
}

type NullableDtoCreateIntegrationRequest struct {
	value *DtoCreateIntegrationRequest
	isSet bool
}

func (v NullableDtoCreateIntegrationRequest) Get() *DtoCreateIntegrationRequest {
	return v.value
}

func (v *NullableDtoCreateIntegrationRequest) Set(val *DtoCreateIntegrationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoCreateIntegrationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoCreateIntegrationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoCreateIntegrationRequest(val *DtoCreateIntegrationRequest) *NullableDtoCreateIntegrationRequest {
	return &NullableDtoCreateIntegrationRequest{value: val, isSet: true}
}

func (v NullableDtoCreateIntegrationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoCreateIntegrationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


