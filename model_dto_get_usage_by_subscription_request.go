/*
FlexPrice API

FlexPrice API Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flexprice

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DtoGetUsageBySubscriptionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoGetUsageBySubscriptionRequest{}

// DtoGetUsageBySubscriptionRequest struct for DtoGetUsageBySubscriptionRequest
type DtoGetUsageBySubscriptionRequest struct {
	EndTime *string `json:"end_time,omitempty"`
	LifetimeUsage *bool `json:"lifetime_usage,omitempty"`
	StartTime *string `json:"start_time,omitempty"`
	SubscriptionId string `json:"subscription_id"`
}

type _DtoGetUsageBySubscriptionRequest DtoGetUsageBySubscriptionRequest

// NewDtoGetUsageBySubscriptionRequest instantiates a new DtoGetUsageBySubscriptionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoGetUsageBySubscriptionRequest(subscriptionId string) *DtoGetUsageBySubscriptionRequest {
	this := DtoGetUsageBySubscriptionRequest{}
	this.SubscriptionId = subscriptionId
	return &this
}

// NewDtoGetUsageBySubscriptionRequestWithDefaults instantiates a new DtoGetUsageBySubscriptionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoGetUsageBySubscriptionRequestWithDefaults() *DtoGetUsageBySubscriptionRequest {
	this := DtoGetUsageBySubscriptionRequest{}
	return &this
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *DtoGetUsageBySubscriptionRequest) GetEndTime() string {
	if o == nil || IsNil(o.EndTime) {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageBySubscriptionRequest) GetEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *DtoGetUsageBySubscriptionRequest) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *DtoGetUsageBySubscriptionRequest) SetEndTime(v string) {
	o.EndTime = &v
}

// GetLifetimeUsage returns the LifetimeUsage field value if set, zero value otherwise.
func (o *DtoGetUsageBySubscriptionRequest) GetLifetimeUsage() bool {
	if o == nil || IsNil(o.LifetimeUsage) {
		var ret bool
		return ret
	}
	return *o.LifetimeUsage
}

// GetLifetimeUsageOk returns a tuple with the LifetimeUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageBySubscriptionRequest) GetLifetimeUsageOk() (*bool, bool) {
	if o == nil || IsNil(o.LifetimeUsage) {
		return nil, false
	}
	return o.LifetimeUsage, true
}

// HasLifetimeUsage returns a boolean if a field has been set.
func (o *DtoGetUsageBySubscriptionRequest) HasLifetimeUsage() bool {
	if o != nil && !IsNil(o.LifetimeUsage) {
		return true
	}

	return false
}

// SetLifetimeUsage gets a reference to the given bool and assigns it to the LifetimeUsage field.
func (o *DtoGetUsageBySubscriptionRequest) SetLifetimeUsage(v bool) {
	o.LifetimeUsage = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *DtoGetUsageBySubscriptionRequest) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoGetUsageBySubscriptionRequest) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *DtoGetUsageBySubscriptionRequest) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *DtoGetUsageBySubscriptionRequest) SetStartTime(v string) {
	o.StartTime = &v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *DtoGetUsageBySubscriptionRequest) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *DtoGetUsageBySubscriptionRequest) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *DtoGetUsageBySubscriptionRequest) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

func (o DtoGetUsageBySubscriptionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoGetUsageBySubscriptionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndTime) {
		toSerialize["end_time"] = o.EndTime
	}
	if !IsNil(o.LifetimeUsage) {
		toSerialize["lifetime_usage"] = o.LifetimeUsage
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	toSerialize["subscription_id"] = o.SubscriptionId
	return toSerialize, nil
}

func (o *DtoGetUsageBySubscriptionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subscription_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtoGetUsageBySubscriptionRequest := _DtoGetUsageBySubscriptionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtoGetUsageBySubscriptionRequest)

	if err != nil {
		return err
	}

	*o = DtoGetUsageBySubscriptionRequest(varDtoGetUsageBySubscriptionRequest)

	return err
}

type NullableDtoGetUsageBySubscriptionRequest struct {
	value *DtoGetUsageBySubscriptionRequest
	isSet bool
}

func (v NullableDtoGetUsageBySubscriptionRequest) Get() *DtoGetUsageBySubscriptionRequest {
	return v.value
}

func (v *NullableDtoGetUsageBySubscriptionRequest) Set(val *DtoGetUsageBySubscriptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoGetUsageBySubscriptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoGetUsageBySubscriptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoGetUsageBySubscriptionRequest(val *DtoGetUsageBySubscriptionRequest) *NullableDtoGetUsageBySubscriptionRequest {
	return &NullableDtoGetUsageBySubscriptionRequest{value: val, isSet: true}
}

func (v NullableDtoGetUsageBySubscriptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoGetUsageBySubscriptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


